<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid>
        <MudItem xs="12" sm="4" md="4" lg="3" xl="12">
            <MudField Label="Тип фаски" Variant="Variant.Outlined" InnerPadding="false">
                <MudRadioGroup @bind-SelectedOption="@ChamferType">
                    <MudRadio Option="@(Chamfer.External)" Color="Color.Primary">Наружная</MudRadio>
                    <MudRadio Option="@(Chamfer.Internal)" Color="Color.Primary">Внутренняя</MudRadio>
                </MudRadioGroup>
            </MudField>
        </MudItem>
        <MudItem xs="6" sm="4" md="4" lg="5" xl="6">
            <MudTextField @bind-Value="ChamferDiameterString" T="string" Label="Конечный диаметр" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                          @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter" />
            <MudTextField @bind-Value="AngleString" T="string" Label="Угол" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="°" Immediate="true"
                          @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalChamferAngle : Images.InternalChamferAngle" />
        </MudItem>
        <MudItem xs="6" sm="4" md="4" lg="4" xl="6">
            <MudTextField @bind-Value="ChamferSizeString" T="string" Label="Размер фаски" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                          @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalChamferSize : Images.InternalChamferSize" />
            <MudTextField @bind-Value="ChamferInsertRadiusString" T="string" Label="Радиус пластины" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                          @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalToolRadius : Images.InternalToolRadius" />
        </MudItem>
        <MudCard Outlined="true" Class="m-4" >
            <MudCardContent>
                @if (CurrentImage == Images.ExternalChamferAngle)
                {
                    <img src="/img/stuffimages/chamfer/ext_chamfer_angle.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.ExternalChamferSize)
                {
                    <img src="/img/stuffimages/chamfer/ext_chamfer_size.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.ExternalPartDiameter)
                {
                    <img src="/img/stuffimages/chamfer/ext_part_diam.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.ExternalToolRadius)
                {
                    <img src="/img/stuffimages/chamfer/ext_tool_radius.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.InternalChamferAngle)
                {
                    <img src="/img/stuffimages/chamfer/int_chamfer_angle.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.InternalChamferSize)
                {
                    <img src="/img/stuffimages/chamfer/int_chamfer_size.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.InternalPartDiameter)
                {
                    <img src="/img/stuffimages/chamfer/int_part_diam.svg" asp-append-version="true" width="280" />
                }
                @if (CurrentImage == Images.InternalToolRadius)
                {
                    <img src="/img/stuffimages/chamfer/int_tool_radius.svg" asp-append-version="true" width="280" />
                }
            </MudCardContent>
        </MudCard>
    </MudGrid>
    

    @if (ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0)
    {
        <MudItem xs="12">
            <MudField Variant="Variant.Outlined">
                <MudText>@ResultMessage</MudText>
            </MudField>
        </MudItem>
        <MudExpansionPanel Class="mt-2" Text="Пример программы для Fanuc">
            <MudGrid>
                <MudItem xs="6" sm="5" md="4" xl="3">
                    <MudSwitch @bind-Checked="@RoundCorners" Label="Скруглить углы" Color="Color.Primary" />
                </MudItem>
                <MudItem xs="6" sm="7" md="8" xl="9" Style="margin-top: -2vh">
                    @if (RoundCorners)
                    {
                        <MudTextField @bind-Value="RoundCornerString" T="string" Label="Радиус скругления" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" Adornment="Adornment.End" AdornmentText="мм" />
                    }
                </MudItem>
            </MudGrid>
            <MudItem xs="12">
                <MudTextField Variant="Variant.Outlined" Style="font-family: Consolas" ReadOnly="true" Lines="ExampleLines" Value="@ChamferExample" />
            </MudItem>
        </MudExpansionPanel>
    }
</MudContainer>

@code {
    public string ResultMessage
    {
        get
        {
            if (ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0)
            {
                return $"Начальный диаметр фаски с учетом радиуса пластины: {Util.ToPrettyString(ChamferResult)} мм";
            }
            return string.Empty;
        }
    }

    public string ChamferExample
    {
        get
        {
            if (ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0 && !RoundCorners)
            {
                return
                    $"G0 X{Util.NCFormat(ChamferResult)} Z1. S180 M3\n" +
                    $"G1 Z0. F0.1\n" +
                    $"X{Util.NCFormat(ChamferDiameter)} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{Util.NCFormat(Angle)}";
            }
            else if(ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0 && RoundCorners)
            {
                return
                $"G0 X{Util.NCFormat(ChamferType == Chamfer.External ? ChamferResult - 2 * (ChamferInsertRadius + RoundCorner) : ChamferResult + 2 * (ChamferInsertRadius + RoundCorner))} Z1. S180 M3\n" +
                $"G1 Z0. F0.1\n" +
                $"X{Util.NCFormat(ChamferResult)} R{Util.NCFormat(ChamferInsertRadius + RoundCorner)}\n" +
                $"X{Util.NCFormat(ChamferDiameter)} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{Util.NCFormat(Angle)} R{Util.NCFormat(ChamferInsertRadius + RoundCorner)}\n" +
                $"W-{Util.NCFormat(ChamferInsertRadius + RoundCorner)}";
            }
            return string.Empty;
        }
    }
    public enum Chamfer { External, Internal };
    public Chamfer ChamferType { get; set; } = Chamfer.External;

    public enum Images {
        ExternalChamferAngle,
        ExternalChamferSize,
        ExternalPartDiameter,
        ExternalToolRadius,
        InternalChamferAngle,
        InternalChamferSize,
        InternalPartDiameter,
        InternalToolRadius,
    };
    public enum ImageType { Diameter, ToolRaduis, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; }

    public string ChamferDiameterString { get; set; } = string.Empty;
    public double ChamferDiameter { get => Util.GetDouble(ChamferDiameterString); }

    public string AngleString { get; set; } = string.Empty;
    public double Angle { get => Util.GetDouble(AngleString); }

    public string ChamferSizeString { get; set; } = string.Empty;
    public double ChamferSize { get => Util.GetDouble(ChamferSizeString); }

    public string ChamferInsertRadiusString { get; set; } = string.Empty;
    public double ChamferInsertRadius { get => Util.GetDouble(ChamferInsertRadiusString); }

    public double ChamferResult
    {
        get
        {
            double result;
            if (ChamferType == Chamfer.External)
            {
                result = ((ChamferDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - ChamferInsertRadius * Math.Tan(Util.Radians(Angle)));
            }
            else
            {
                result = ((ChamferDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + ChamferInsertRadius * Math.Tan(Util.Radians(Angle)));

            }
            return result;
        }
    }

    public bool RoundCorners { get; set; } = false;
    public string RoundCornerString { get; set; } = "0.3";
    public double RoundCorner { get => Util.GetDouble(RoundCornerString); }

    public int ExampleLines { get => ChamferExample.Count(f => f == '\n') + 1; }

    public void SetImage(ImageType image)
    {
        if (image == ImageType.Diameter)
        {
            CurrentImage = ChamferType == Chamfer.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter;
        }
    }
}
