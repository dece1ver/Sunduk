<style>
    .monofield {
        font-family: 'Roboto Mono', monospace;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid>
        <MudItem xs="12" xl="12">
            <MudGrid>
                <MudItem xs="12" sm="4" md="4" lg="3" xl="2">
                    <MudField Label="Тип фаски" Variant="Variant.Outlined" InnerPadding="false">
                        <MudRadioGroup @bind-SelectedOption="@ChamferType">
                            <MudRadio Option="@Chamfer.External" Color="Color.Primary" @onfocus="SetExternalType">Наружная</MudRadio>
                            <MudRadio Option="@Chamfer.Internal" Color="Color.Primary" @onfocus="SetInternalType">Внутренняя</MudRadio>
                        </MudRadioGroup>
                    </MudField>
                </MudItem>
                <MudItem xs="6" sm="4" md="4" lg="5" xl="5">
                    <MudTextField @bind-Value="_ChamferDiameter" T="string" Label="Конечный диаметр" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter" />
                    <MudTextField @bind-Value="_Angle" T="string" Label="Угол" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="°" Immediate="true"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalChamferAngle : Images.InternalChamferAngle" />
                </MudItem>
                <MudItem xs="6" sm="4" md="4" lg="4" xl="5">
                    <MudTextField @bind-Value="_ChamferSize" T="string" Label="Размер фаски" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalChamferSize : Images.InternalChamferSize" />
                    <MudTextField @bind-Value="_ChamferInsertRadius" T="string" Label="Радиус пластины" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalToolRadius : Images.InternalToolRadius" />
                </MudItem>
            </MudGrid>
        </MudItem>
        @if (ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0)
        {
            <MudItem xs="12">
                <MudField Variant="Variant.Outlined">
                    <MudText>@ResultMessage</MudText>
                </MudField>
            </MudItem>
            <MudExpansionPanel Text="Пример программы для Fanuc">
                <MudGrid>
                    <MudItem xs="6" sm="5" md="4" xl="3">
                        <MudSwitch @bind-Checked="@RoundCorners" Label="Скруглить углы" Color="Color.Primary" />
                    </MudItem>
                    <MudItem xs="6" sm="7" md="8" xl="9" Style="margin-top: -2vh">
                        @if (RoundCorners)
                        {
                            <MudTextField @bind-Value="_RoundCorner" T="string" Label="Радиус скругления" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" Adornment="Adornment.End" AdornmentText="мм" />
                        }
                    </MudItem>
                </MudGrid>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Class="monofield" ReadOnly="true" Lines="ExampleLines" Value="@ChamferExample" />
                </MudItem>
            </MudExpansionPanel>
        }
        <MudItem xs="12" xl="12">
            <MudCard Outlined="true" Style="margin: 0">
                <MudCardContent>
                    @if (CurrentImage == Images.ExternalChamferAngle)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_chamfer_angle.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalChamferSize)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_chamfer_size.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalPartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalChamferAngle)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_chamfer_angle.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalChamferSize)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_chamfer_size.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalPartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code 
{
    readonly int _imgHeigth = 150;
    readonly int _imgWidth = 350;

    public string ResultMessage
    {
        get
        {
            if (ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0)
            {
                return $"Начальный диаметр фаски с учетом радиуса пластины: {Util.ToPrettyString(ChamferResult)} мм";
            }
            return string.Empty;
        }
    }

    public string ChamferExample
    {
        get
        {
            if (ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0 && !RoundCorners)
            {
                return
                    $"G0 X{(ChamferResult).NC()} Z1. S180 M3\n" +
                    $"G1 Z0. F0.1\n" +
                    $"X{ChamferDiameter.NC()} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{(Angle).NC()}";
            }
            else if(ChamferDiameter > 0 && Angle > 0 && ChamferSize > 0 && RoundCorners)
            {
                return
                $"G0 X{(ChamferType == Chamfer.External ? ChamferResult - 2 * (ChamferInsertRadius + RoundCorner) : ChamferResult + 2 * (ChamferInsertRadius + RoundCorner)).NC()} Z1. S180 M3\n" +
                $"G1 Z0. F0.1\n" +
                $"X{ChamferResult.NC()} R{(ChamferInsertRadius + RoundCorner).NC()}\n" +
                $"X{ChamferDiameter.NC()} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{Angle.NC()} R{(ChamferInsertRadius + RoundCorner).NC()}\n" +
                $"W-{(ChamferInsertRadius + RoundCorner).NC()}";
            }
            return string.Empty;
        }
    }
    public enum Chamfer { External, Internal };
    public Chamfer ChamferType { get; set; } = Chamfer.External;

    public enum Images {
        ExternalChamferAngle,
        ExternalChamferSize,
        ExternalPartDiameter,
        ExternalToolRadius,
        InternalChamferAngle,
        InternalChamferSize,
        InternalPartDiameter,
        InternalToolRadius,
    };
    //public enum ImageType { Diameter, ToolRaduis, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; } = Images.ExternalPartDiameter;

    public string _ChamferDiameter { get; set; } = string.Empty;
    public double ChamferDiameter { get => Util.GetDouble(_ChamferDiameter); }

    public string _Angle { get; set; } = string.Empty;
    public double Angle { get => Util.GetDouble(_Angle); }

    public string _ChamferSize { get; set; } = string.Empty;
    public double ChamferSize { get => Util.GetDouble(_ChamferSize); }

    public string _ChamferInsertRadius { get; set; } = string.Empty;
    public double ChamferInsertRadius { get => Util.GetDouble(_ChamferInsertRadius); }

    public double ChamferResult
    {
        get
        {
            double result;
            if (ChamferType == Chamfer.External)
            {
                result = ((ChamferDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - ChamferInsertRadius * Math.Tan(Util.Radians(Angle)));
            }
            else
            {
                result = ((ChamferDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + ChamferInsertRadius * Math.Tan(Util.Radians(Angle)));

            }
            return result;
        }
    }

    public bool RoundCorners { get; set; } = false;
    public string _RoundCorner { get; set; } = "0.3";
    public double RoundCorner { get => Util.GetDouble(_RoundCorner); }

    public int ExampleLines { get => ChamferExample.Count(f => f == '\n') + 1; }

    //public void SetImage(ImageType image)
    //{
    //    if (image == ImageType.Diameter)
    //    {
    //        CurrentImage = ChamferType == Chamfer.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter;
    //    }
    //}

    private void SetInternalType()
    {
        if (CurrentImage == Images.ExternalPartDiameter) CurrentImage = Images.InternalPartDiameter;
        if (CurrentImage == Images.ExternalChamferAngle) CurrentImage = Images.InternalChamferAngle;
        if (CurrentImage == Images.ExternalChamferSize) CurrentImage = Images.InternalChamferSize;
        if (CurrentImage == Images.ExternalToolRadius) CurrentImage = Images.InternalToolRadius;
    }

    private void SetExternalType()
    {
        if (CurrentImage == Images.InternalPartDiameter) CurrentImage = Images.ExternalPartDiameter;
        if (CurrentImage == Images.InternalChamferAngle) CurrentImage = Images.ExternalChamferAngle;
        if (CurrentImage == Images.InternalChamferSize) CurrentImage = Images.ExternalChamferSize;
        if (CurrentImage == Images.InternalToolRadius) CurrentImage = Images.ExternalToolRadius;
    }
}
