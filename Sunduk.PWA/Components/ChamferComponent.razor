<style>
    .monofield {
        font-family: 'Roboto Mono', monospace;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid >
        <MudItem xs="12" sm="6">
            <MudGrid Spacing="1">
                <MudItem xs="12">
                    <MudField Label="Тип фаски" Variant="Variant.Filled" InnerPadding="false">
                        <MudRadioGroup @bind-SelectedOption="@ChamferType">
                            <MudRadio Option="@Chamfer.External" Color="Color.Primary" @onfocus="SetExternalType">Наружная</MudRadio>
                            <MudRadio Option="@Chamfer.Internal" Color="Color.Primary" @onfocus="SetInternalType">Внутренняя</MudRadio>
                        </MudRadioGroup>
                    </MudField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_ChamferEndDiameter" T="string" Label="Конечный диаметр" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalEndDiameter : Images.InternalEndDiameter" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_Angle" T="string" Label="Угол" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentText="°" Immediate="true"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalChamferAngle : Images.InternalChamferAngle" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_ChamferSize" @onfocusin="@(() => calcStartDiam = true)" T="string" Label="Глубина фаски" Variant="Variant.Filled" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalChamferSize : Images.InternalChamferSize" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_ChamferInsertRadius" T="string" Label="Радиус пластины" Variant="Variant.Filled" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalToolRadius : Images.InternalToolRadius" Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="_ChamferStartDiameter" @onfocusin="@(() => calcStartDiam = false)" T="string" Label="Начальный диаметр" Variant="Variant.Filled" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                  @onfocus="() => CurrentImage = ChamferType == Chamfer.External ? Images.ExternalStartDiameter : Images.InternalStartDiameter" Margin="Margin.Dense">
                    </MudTextField>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudCard Outlined="true" Class="mt-1">
                <MudCardContent>
                    @if (CurrentImage == Images.ExternalChamferAngle)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_chamfer_angle.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalChamferSize)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_chamfer_size.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalStartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/drill/drill_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalEndDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/ext_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalChamferAngle)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_chamfer_angle.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalChamferSize)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_chamfer_size.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalStartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/drill/drill_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalEndDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/chamfer/int_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        @if (ChamferEndDiameter > 0 && Angle > 0 && ChamferSize > 0)
        {
            @*<MudItem xs="12">
                <MudField Variant="Variant.Filled">
                    <MudText>@ResultMessage</MudText>
                </MudField>
            </MudItem>
            <MudExpansionPanel Text="Пример программы для Fanuc">
                <MudGrid>
                    <MudItem xs="6" sm="5" md="4" xl="3">
                        <MudSwitch @bind-Checked="@RoundCorners" Label="Скруглить углы" Color="Color.Primary" />
                    </MudItem>
                    <MudItem xs="6" sm="7" md="8" xl="9" Style="margin-top: -2vh">
                        @if (RoundCorners)
                        {
                            <MudTextField @bind-Value="_RoundCorner" T="string" Label="Радиус скругления" Variant="Variant.Outlined" Margin="Margin.Dense" Immediate="true" Adornment="Adornment.End" AdornmentText="мм" />
                        }
                    </MudItem>
                </MudGrid>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Class="monofield" ReadOnly="true" Lines="ExampleLines" Value="@ChamferExample" />
                </MudItem>
            </MudExpansionPanel>*@
        }

    </MudGrid>
</MudContainer>

@code 
{
    readonly int _imgHeigth = 335;
    readonly int _imgWidth = 335;

    bool calcStartDiam = true;
    bool calcTrueRadiusShift = true;

    public string ResultMessage
    {
        get
        {
            if (ChamferEndDiameter > 0 && Angle > 0 && ChamferSize > 0)
            {
                return $"Начальный диаметр фаски с учетом радиуса пластины: {Util.ToPrettyString(ChamferResult)} мм";
            }
            return string.Empty;
        }
    }

    public string ChamferExample
    {
        get
        {
            if (ChamferEndDiameter > 0 && Angle > 0 && ChamferSize > 0 && !RoundCorners && calcStartDiam)
            {
                return
                    $"G0 X{(ChamferStartDiameter).NC()} Z1. S180 M3\n" +
                    $"G1 Z0. F0.1\n" +
                    $"X{ChamferEndDiameter.NC()} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{(Angle).NC()}";
            }
            else if (ChamferEndDiameter > 0 && Angle > 0 && ChamferSize > 0 && !RoundCorners && !calcStartDiam)
            {
                switch (ChamferType)
                {
                    case Chamfer.External:
                        return $"G0 X{(ChamferEndDiameter + 1).NC(1)} Z-{(ChamferSize).NC()} Z1. S180 M3\n" +
                                $"G1 X{ChamferEndDiameter.NC()}. F0.1\n" +
                                $"Z0. A-{(Angle).NC()}";
                    case Chamfer.Internal:
                        return $"G0 X{(ChamferEndDiameter + 1).NC(1)} Z1. S180 M3\n" +
                                $"Z-{(ChamferSize).NC()} " +
                                $"G1 X{ChamferEndDiameter.NC()}. F0.1\n" +
                                $"Z0. A-{(Angle).NC()}";
                    default:
                        return string.Empty;
                }
            }
            else if(ChamferEndDiameter > 0 && Angle > 0 && ChamferSize > 0 && RoundCorners && calcStartDiam)
            {
                return
                $"G0 X{(ChamferType == Chamfer.External ? ChamferResult - 2 * (ChamferInsertRadius + RoundCorner) : ChamferResult + 2 * (ChamferInsertRadius + RoundCorner)).NC()} Z1. S180 M3\n" +
                $"G1 Z0. F0.1\n" +
                $"X{ChamferResult.NC()} R{(ChamferInsertRadius + RoundCorner).NC()}\n" +
                $"X{ChamferEndDiameter.NC()} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{Angle.NC()} R{(ChamferInsertRadius + RoundCorner).NC()}\n" +
                $"W-{(ChamferInsertRadius + RoundCorner).NC()}";
            }
            else if (ChamferEndDiameter > 0 && Angle > 0 && ChamferSize > 0 && RoundCorners && !calcStartDiam)
            {
                return
                $"G0 X{(ChamferType == Chamfer.External ? ChamferEndDiameter + 1 : ChamferEndDiameter - 1).NC(1)} Z-{(ChamferSize + ChamferInsertRadius + RoundCorner).NC()} Z1. S180 M3\n" +
                $"G0 X{(ChamferType == Chamfer.External ? ChamferResult - 2 * (ChamferInsertRadius + RoundCorner) : ChamferResult + 2 * (ChamferInsertRadius + RoundCorner)).NC()} Z1. S180 M3\n" +
                $"G1 Z0. F0.1\n" +
                $"X{ChamferResult.NC()} R{(ChamferInsertRadius + RoundCorner).NC()}\n" +
                $"X{ChamferEndDiameter.NC()} A{(ChamferType == Chamfer.External ? '-' : string.Empty)}{Angle.NC()} R{(ChamferInsertRadius + RoundCorner).NC()}\n" +
                $"W-{(ChamferInsertRadius + RoundCorner).NC()}";
            }
            return string.Empty;
        }
    }
    public enum Chamfer { External, Internal };
    public Chamfer ChamferType { get; set; } = Chamfer.External;

    public enum Images {
        ExternalChamferAngle,
        ExternalChamferSize,
        ExternalStartDiameter,
        ExternalEndDiameter,
        ExternalToolRadius,
        InternalChamferAngle,
        InternalChamferSize,
        InternalStartDiameter,
        InternalEndDiameter,
        InternalToolRadius,
    };
    //public enum ImageType { Diameter, ToolRaduis, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; } = Images.ExternalEndDiameter;

    private string _chamferEndDiameter;
    public string _ChamferEndDiameter
    {
        get { return _chamferEndDiameter; }
        set
        {
            _chamferEndDiameter = value;
            if (calcStartDiam && ChamferType == Chamfer.External)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - 2 * RadiusShit).ToPrettyString();
            }
            else if (calcStartDiam && ChamferType == Chamfer.Internal)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + 2 * RadiusShit).ToPrettyString();
            }
            else
            {
                _ChamferSize = Math.Abs((ChamferEndDiameter - ChamferStartDiameter) / 2 * Math.Tan((90 - Angle).Radians()) + RadiusShit).ToPrettyString();
            }
        }
    }
    public double ChamferEndDiameter { get => Util.GetDouble(_ChamferEndDiameter); }

    private string _chamferStartDiameter;
    public string _ChamferStartDiameter
    {
        get { return _chamferStartDiameter; }
        set
        {
            _chamferStartDiameter = value;
            if (!calcStartDiam)
            {
                _ChamferSize = Math.Abs((ChamferEndDiameter - ChamferStartDiameter) / 2 * Math.Tan((90 - Angle).Radians()) + RadiusShit).ToPrettyString();
            }
        }
    }
    public double ChamferStartDiameter { get => Util.GetDouble(_ChamferStartDiameter); }

    private string _angle;
    public string _Angle
    {
        get { return _angle; }
        set
        {
            _angle = value;
            if (calcStartDiam && ChamferType == Chamfer.External)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - 2 * RadiusShit).ToPrettyString();
            }
            else if (calcStartDiam && ChamferType == Chamfer.Internal)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + 2 * RadiusShit).ToPrettyString();
            }
            else
            {
                _ChamferSize = Math.Abs((ChamferEndDiameter - ChamferStartDiameter) / 2 * Math.Tan((90 - Angle).Radians()) + RadiusShit).ToPrettyString();
            }
        }
    }
    public double Angle { get => Util.GetDouble(_Angle); }

    private string _chamferSize;
    public string _ChamferSize
    {
        get { return _chamferSize; }
        set
        {
            _chamferSize = value;
            if (calcStartDiam && ChamferType == Chamfer.External)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - 2 * RadiusShit).ToPrettyString();
            }
            else if (calcStartDiam && ChamferType == Chamfer.Internal)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + 2 * RadiusShit).ToPrettyString();
            }
        }
    }
    public double ChamferSize { get => Util.GetDouble(_ChamferSize); }

    private string _chamferInsertRadius;
    public string _ChamferInsertRadius
    {
        get { return _chamferInsertRadius; }
        set {
            _chamferInsertRadius = value;
            if (calcStartDiam && ChamferType == Chamfer.External)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - 2 * RadiusShit).ToPrettyString();
            }
            else if (calcStartDiam && ChamferType == Chamfer.Internal)
            {
                _ChamferStartDiameter = ((ChamferEndDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + 2 * RadiusShit).ToPrettyString();
            }
            else
            {
                _ChamferSize = Math.Abs((ChamferEndDiameter - ChamferStartDiameter) / 2 * Math.Tan((90 - Angle).Radians()) + RadiusShit).ToPrettyString();
            }
        }
    }
    public double ChamferInsertRadius { get => Util.GetDouble(_ChamferInsertRadius); }

    public double ChamferResult
    {
        get
        {
            double result;
            if (ChamferType == Chamfer.External)
            {
                result = (ChamferEndDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - ChamferInsertRadius * Math.Tan(Util.Radians(Angle));
            }
            else
            {
                result = ((ChamferEndDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + ChamferInsertRadius * Math.Tan(Util.Radians(Angle)));

            }
            return result;
        }
        set { }
    }

    public bool RoundCorners { get; set; } = false;
    public string _RoundCorner { get; set; } = "0.3";
    public double RoundCorner { get => Util.GetDouble(_RoundCorner); }
    public double RadiusShit { get
        {
            if (calcTrueRadiusShift && calcStartDiam)
            {
                return ChamferInsertRadius - ChamferInsertRadius / Math.Tan((90 - (90 - Angle) / 2).Radians());
            }
            else if (calcTrueRadiusShift && !calcStartDiam)
            {
                return ChamferInsertRadius - ChamferInsertRadius / Math.Tan((90 - Angle / 2).Radians());
            }
            else
            {
                return ChamferInsertRadius * Math.Tan(Angle.Radians()) / 2;
            }
        } set { } }

    public int ExampleLines { get => ChamferExample.Count(f => f == '\n') + 1; }

    //public void SetImage(ImageType image)
    //{
    //    if (image == ImageType.Diameter)
    //    {
    //        CurrentImage = ChamferType == Chamfer.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter;
    //    }
    //}

    private void SetInternalType()
    {
        if (CurrentImage == Images.ExternalEndDiameter) CurrentImage = Images.InternalEndDiameter;
        if (CurrentImage == Images.ExternalChamferAngle) CurrentImage = Images.InternalChamferAngle;
        if (CurrentImage == Images.ExternalChamferSize) CurrentImage = Images.InternalChamferSize;
        if (CurrentImage == Images.ExternalToolRadius) CurrentImage = Images.InternalToolRadius;
        if (calcStartDiam) _ChamferStartDiameter = ((ChamferEndDiameter + (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) + 2 * RadiusShit).ToPrettyString();

    }

    private void SetExternalType()
    {
        if (CurrentImage == Images.InternalEndDiameter) CurrentImage = Images.ExternalEndDiameter;
        if (CurrentImage == Images.InternalChamferAngle) CurrentImage = Images.ExternalChamferAngle;
        if (CurrentImage == Images.InternalChamferSize) CurrentImage = Images.ExternalChamferSize;
        if (CurrentImage == Images.InternalToolRadius) CurrentImage = Images.ExternalToolRadius;
        if (calcStartDiam) _ChamferStartDiameter = ((ChamferEndDiameter - (2 * ChamferSize * Math.Tan(Util.Radians(Angle)))) - 2 * RadiusShit).ToPrettyString();
    }
}
