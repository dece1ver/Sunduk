<style>
    .tl {
        padding: 0px 15px 0px 0px;
    }

    .monofield {
        font-family: 'Roboto Mono', monospace;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid Spacing="1">
        <MudItem xs="12" sm="6">
            <MudSelect Label="Стандарт" T="ThreadStandard" Value="ThreadStandard" Variant="Variant.Filled" ValueChanged="OnStandardChanged">
                <MudSelectItem Value="@(ThreadStandard.Metric)">@(ThreadStandard.Metric.Description())</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandard.BSPP)">@(ThreadStandard.BSPP.Description())</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandard.Trapezoidal)">@(ThreadStandard.Trapezoidal.Description())</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandard.NPT)">@(ThreadStandard.NPT.Description())</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" ValueChanged="OnTemplateChanged">
                @foreach (string item in ThreadTemplates)
                {
                    <MudSelectItem Value="@(item)">
                        <MudText>@item</MudText>
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>

        <MudItem xs="12">
            <MudField Label="Параметры резьбы" Variant="Variant.Filled" DisableUnderLine="true">
                <MudGrid Spacing="0">
                    <MudHidden Breakpoint="Breakpoint.Xs">
                        <MudItem xs="12" sm="3" md="2">
                            <MudRadioGroup @bind-SelectedOption="@ThreadType" Class="mt-2 mb-n2 ml-n6 d-flex justify-center">
                                <div>
                                    <div class="d-block">
                                        <MudRadio Option="@(CuttingType.External)" Color="Color.Primary">Наружная</MudRadio>
                                    </div>
                                    <div class="d-block">
                                        <MudRadio Option="@(CuttingType.Internal)" Color="Color.Primary">Внутренняя</MudRadio>
                                    </div>
                                </div>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12" sm="9" md="10" Class="mt-n3">
                            <MudTextField @bind-Value="ThreadDiameterString" Label="Диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" />
                            <MudTextField @bind-Value="ThreadPitchString" Label="Шаг" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" />
                        </MudItem>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                        <MudItem xs="12" sm="4" md="3">
                            <MudRadioGroup @bind-SelectedOption="@ThreadType" Class="mt-2 mb-n2 d-flex justify-center">
                                <MudRadio Option="@(CuttingType.External)" Color="Color.Primary">Наружная</MudRadio>
                                <MudRadio Option="@(CuttingType.Internal)" Color="Color.Primary">Внутренняя</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                        <MudItem xs="12" sm="8" md="9">
                            <MudTextField @bind-Value="ThreadDiameterString" Label="Диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" />
                            <MudTextField @bind-Value="ThreadPitchString" Label="Шаг" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" />
                        </MudItem>
                    </MudHidden>
                </MudGrid>
            </MudField>
        </MudItem>

    </MudGrid>
        @*<MudDivider Class="my-4"/>*@
        @if (Thread.Valid(ThreadDiameter, ThreadPitch))
        {
            <MudItem Class="mt-4" xs="12">
                <MudField Label="Информация" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-n1">
                    <table>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Верхний диаметр:</MudText></td>
                            <td><MudText Typo="Typo.caption">@(ThreadDiameter.ToPrettyString(3)) мм</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Нижний диаметр:</MudText></td>
                            <td><MudText Typo="Typo.caption">@((ThreadDiameter - 2 * Thread.ProfileHeight(ThreadStandard, ThreadType, ThreadPitch)).ToPrettyString(3)) мм</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Шаг:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(ThreadPitch.ToPrettyString() + (ThreadStandard is ThreadStandard.BSPP or ThreadStandard.NPT ? $" ({25.4/ThreadPitch:N0} TPI)" : ""))</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Общая высота профиля:</MudText></td>
                            <td><MudText Typo="Typo.caption">@($"{Passes.Sum().ToString("G3").Replace(",", ".")}") мм</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Угол подъема винтовой линии:</MudText></td>
                            <td><MudText Typo="Typo.caption">@(ThreadAngle?.ToString("G3").Replace(",",".")) °</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Угол опорной пластины:</MudText></td>
                            <td><MudText Typo="Typo.caption">@(ThreadAngle?.ToString("N0").Replace(",",".")) °</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Количество проходов:</MudText></td>
                            <td><MudText Typo="Typo.caption">@(Passes.Length)</MudText></td>
                        </tr>
                        <tr>
                            <td class="tl"><MudText Typo="Typo.caption">Обороты шпинделя:</MudText></td>
                            <td><MudText Typo="Typo.caption">@SpindleSpeed об/мин</MudText></td>
                        </tr>
                    </table>
                </MudField>
            </MudItem>
            <MudExpansionPanel Text="Проходы">
                <MudItem xs="12">
                    <table>
                        <tr>
                            <td class="tl"><MudText>Проход</MudText></td>
                            <td class="tl"><MudText>Съем</MudText></td>
                            <td><MudText>Накопленный</MudText></td>
                        </tr>
                        @foreach ((double value, int index) in Passes.Select((v, i) => (v, i)))
                        {
                            <tr>
                                <td><MudText Typo="Typo.caption">@(index + 1)</MudText></td>
                                <td><MudText Typo="Typo.caption">@value.ToString("N3").Replace(",", ".")</MudText></td>
                                <td><MudText Typo="Typo.caption">@TotalPasses[index].ToString("N3").Replace(",", ".")</MudText></td>
                            </tr>
                        }
                    </table>
                </MudItem>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Пример программы для Fanuc">
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Style="font-family: 'Roboto Mono', monospace; font-size: small;" Margin="Margin.Dense" ReadOnly="true" Lines="3" Value="@($"G0 X{ApproachDiameter} Z{StartPointZ.NC()} S{SpindleSpeed.Round(100)} M3 G97\n" +
                                $"G76 P0201{Thread.Profile(ThreadStandard)} Q{Passes[^2].Microns()} R{Passes[^1].NC()}\n" +
                                $"G76 X{EndDiameter} Z{EndPointZ.NC()} P{(int)(Passes.Sum().Microns())} Q{Passes[0].Microns()}{ThreadShift} F{ThreadPitch.NC()}")">
                    </MudTextField>
                </MudItem>
            </MudExpansionPanel>
        <MudExpansionPanel Text="Пример проточки под резьбу">
            <MudGrid>
                <MudItem xs="12">
                    <MudField Label="Параметры" Variant="Variant.Outlined" InnerPadding="false">
                        <MudGrid Spacing="1">
                            <MudItem xs="Blunted ? 6 : 12" sm="Blunted ? 3 : 4">
                                <MudSwitch Class="mb-1 mt-3 ml-1" @bind-Checked="Blunted" Color="Color.Primary">Скруглить</MudSwitch>
                            </MudItem>
                            <MudHidden Breakpoint="Breakpoint.Xs" Invert="true">
                                @if (Blunted)
                                {
                                    <MudItem xs="6" sm="Blunted ? 3 : 4">
                                        <MudTextField Class="mb-n2 mt-0" T="double" @bind-Value="BluntSize" Label="Скругление" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" DisableUnderLine="true" />
                                    </MudItem>
                                }
                                <MudItem Class="mb-2" xs="6" sm="Blunted ? 3 : 4">
                                    <MudTextField T="double" @bind-Value="ThreadChamfer" Label="Фаска" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" DisableUnderLine="true" />
                                </MudItem>
                                <MudItem Class="mb-2" xs="6" sm="Blunted ? 3 : 4">
                                    <MudTextField T="double" @bind-Value="InsertRadius" Label="Радиус пластины" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" DisableUnderLine="true" />
                                </MudItem>
                            </MudHidden>
                            <MudHidden Breakpoint="Breakpoint.Xs">
                                @if (Blunted)
                                {
                                    <MudItem xs="6" sm="Blunted ? 3 : 4" Class="mb-2">
                                        <MudTextField T="double" @bind-Value="BluntSize" Label="Скругление" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" DisableUnderLine="true" />
                                    </MudItem>
                                }
                                <MudItem Class="mb-2" xs="6" sm="Blunted ? 3 : 4">
                                    <MudTextField T="double" @bind-Value="ThreadChamfer" Label="Фаска" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" DisableUnderLine="true" />
                                </MudItem>
                                <MudItem Class="mb-2" xs="6" sm="Blunted ? 3 : 4">
                                    <MudTextField T="double" @bind-Value="InsertRadius" Label="Радиус пластины" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" DisableUnderLine="true" />
                                </MudItem>
                            </MudHidden>
                        </MudGrid>
                    </MudField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Style="font-family: 'Roboto Mono', monospace; font-size: small;" Margin="Margin.Dense" ReadOnly="true" Lines="ExampleLines" Value="@(TurningExample)" />
                </MudItem>
            </MudGrid>
        </MudExpansionPanel>
    }

</MudContainer>


@code
{
    public ICollection<string> ThreadTemplates
    {
        get
        {
            return ThreadStandard switch
            {
                ThreadStandard.Metric => Thread.MetricTemplates,
                ThreadStandard.BSPP => Thread.BsppTemplates,
                ThreadStandard.Trapezoidal => Thread.TrapezoidalTemplates,
                ThreadStandard.NPT => Thread.NptTemplates,
                _ => new HashSet<string> { }
            };
        }
    }
    public string CurrentThreadTemplate { get; set; }

    public ThreadStandard ThreadStandard { get; set; } = ThreadStandard.Metric;
    public CuttingType ThreadType { get; set; } = CuttingType.External;

    public double ThreadChamfer { get; set; }

    public string ThreadDiameterString { get; set; }
    public double ThreadDiameter => Util.GetDouble(ThreadDiameterString);

    public string ThreadPitchString { get; set; }
    public double ThreadPitch => Util.GetDouble(ThreadPitchString);

    public bool Blunted { get; set; } = false;
    public double BluntSize { get; set; } = 0.3;

    public double PlaneLength { get; set; } = 0;
    public string ThreadShift
    {
        get
        {
            if (ThreadStandard == ThreadStandard.NPT)
            {
                return ThreadType switch
                {
                    CuttingType.External => $" R-{Thread.IntNptThreadShift(EndPointZ, StartPointZ).NC(2)}",
                    CuttingType.Internal => $" R{Thread.IntNptThreadShift(EndPointZ, StartPointZ).NC(2)}",
                    _ => string.Empty
                    };
            }
            return string.Empty;
        }
    }

    public string TurningExample { get
        {
            switch (ThreadStandard)
            {
                case ThreadStandard.Metric or ThreadStandard.Trapezoidal:
                    switch (ThreadType)
                    {
                        case CuttingType.External:
                            if (Blunted) {
                                double threadExtChamferStartX = ThreadDiameter - 2 * ThreadChamfer - InsertRadius;
                                return $"G0 X{(threadExtChamferStartX - 2 * Calc.ChamferRadiusLengths(45, InsertRadius + BluntSize).X).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{threadExtChamferStartX.NC()} R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"X{ThreadDiameter.NC()} A-45. R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            } else {
                                return $"G0 X{(ThreadDiameter - 2 * ThreadChamfer - InsertRadius).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{ThreadDiameter.NC()} C{(ThreadChamfer + InsertRadius / 2).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            }
                        case CuttingType.Internal:
                            var threadIntChamferStartX = ThreadDiameter - ThreadPitch + 2 * ThreadChamfer + InsertRadius;
                            if (Blunted) {
                                return $"G0 X{(threadIntChamferStartX + 2 * Calc.ChamferRadiusLengths(45, InsertRadius + BluntSize).X).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{threadIntChamferStartX.NC()} R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"X{(ThreadDiameter - ThreadPitch).NC()} A45. R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            } else {
                                return $"G0 X{(ThreadDiameter - ThreadPitch + 2 * ThreadChamfer + InsertRadius).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{(ThreadDiameter - ThreadPitch).NC()} C{(ThreadChamfer + InsertRadius / 2).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            }
                        default:
                            return string.Empty;
                    }
                case ThreadStandard.BSPP:
                    switch (ThreadType)
                    {
                        case CuttingType.External:
                            if (Blunted)
                            {
                                var threadExtChamferStartX = ThreadDiameter - 2 * ThreadChamfer - InsertRadius;
                                return $"G0 X{(threadExtChamferStartX - 2 * Calc.ChamferRadiusLengths(45, InsertRadius + BluntSize).X).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{threadExtChamferStartX.NC()} R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"X{ThreadDiameter.NC()} A-45. R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            }
                            else
                            {
                                return $"G0 X{(ThreadDiameter - 2 * ThreadChamfer - InsertRadius).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{ThreadDiameter.NC()} C{(ThreadChamfer + InsertRadius / 2).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            }
                        case CuttingType.Internal:
                            var threadIntChamferStartX = ThreadDiameter - 2 * Thread.ProfileHeight(ThreadStandard, ThreadType, ThreadPitch) + 2 * ThreadChamfer + InsertRadius;
                            if (Blunted)
                            {
                                return $"G0 X{(threadIntChamferStartX + 2 * Calc.ChamferRadiusLengths(45, InsertRadius + BluntSize).X).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{threadIntChamferStartX.NC()} R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"X{(ThreadDiameter - 2 * Thread.ProfileHeight(ThreadStandard, ThreadType, ThreadPitch)).NC()} A45. R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            }
                            else
                            {
                                return $"G0 X{(threadIntChamferStartX).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{(ThreadDiameter - 2 * Thread.ProfileHeight(ThreadStandard, ThreadType, ThreadPitch)).NC()} C{(ThreadChamfer + InsertRadius / 2).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()}";
                            }
                        default:
                            return string.Empty;
                    }
                case ThreadStandard.NPT:
                    switch (ThreadType)
                    {
                        case CuttingType.External:
                            if (Blunted) {
                                return $"G0 X{CalculatedNptChamferStartXWithShift.NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{CalculatedNptChamferStartX.NC()} R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"X{CalculatedNptChamferEndX.NC()} A-45. R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()} A-1.79";
                            } else {
                                return $"G0 X{(CalculatedNptStart - 2 * ThreadChamfer - InsertRadius).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{CalculatedNptStart.NC()} C{(ThreadChamfer + InsertRadius / 2).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()} A-1.79";
                            }
                        case CuttingType.Internal:
                            if (Blunted) {
                                return $"G0 X{CalculatedNptChamferStartXWithShift.NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{CalculatedNptChamferStartX.NC()} R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"X{CalculatedNptChamferEndX.NC()} A45. R{(InsertRadius + BluntSize).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()} A1.79";
                            } else {
                                return $"G0 X{(ThreadDiameter - 2 * Thread.ProfileHeight(ThreadStandard, ThreadType, ThreadPitch) + 2 * ThreadChamfer + InsertRadius).NC()} Z1. S180 M3\n" +
                                   $"G1 Z0. F0.1\n" +
                                   $"X{CalculatedNptStart.NC()} C{(ThreadChamfer + InsertRadius / 2).NC()}\n" +
                                   $"G1 Z{EndPointZ.NC()} A1.79";
                            }
                        default:
                            return string.Empty;
                    }
                default:
                    return string.Empty;
            }
        } set { } }

    public int ExampleLines => TurningExample.Count(f => f == '\n') + 1;

    public double[] Passes => Thread.Passes(ThreadStandard, ThreadType, ThreadPitch);
    public double[] TotalPasses => Thread.TotalPasses(ThreadStandard, ThreadType, ThreadPitch);

    public double CalculatedNptStart => ThreadType switch
    {
        CuttingType.External => (ThreadDiameter - 2 * (PlaneLength * Math.Tan(1.79.Radians()))),
        CuttingType.Internal => (ThreadDiameter - 2 * Thread.ProfileHeight(ThreadStandard, ThreadType, ThreadPitch)),
        _ => 0,
    };

    public double CalculatedNptChamferEndX => ThreadType switch
    {
        CuttingType.External => CalculatedNptStart + 2 * ThreadChamfer * Math.Tan(1.79.Radians()),
        CuttingType.Internal => CalculatedNptStart - 2 * ThreadChamfer * Math.Tan(1.79.Radians()),
        _ => 0,
    };

    public double CalculatedNptChamferStartX => ThreadType switch
    {
        CuttingType.External => CalculatedNptChamferEndX - 2 * ThreadChamfer - InsertRadius,
        CuttingType.Internal => CalculatedNptChamferEndX + 2 * ThreadChamfer + InsertRadius,
        _ => 0,
    };

    public double CalculatedNptChamferStartXWithShift => ThreadType switch
    {
        CuttingType.External => CalculatedNptChamferStartX - 2 * Calc.ChamferRadiusLengths(45, InsertRadius + BluntSize).X,
        CuttingType.Internal => CalculatedNptChamferStartX + 2 * Calc.ChamferRadiusLengths(45, InsertRadius + BluntSize).X,
        _ => 0,
    };

    public int SpindleSpeed 
    { 
        get 
        {
            int spins = ((int)(120000 / (Math.PI * ThreadDiameter)));
            if (spins > 2000) spins = 2000; // ограничение 2000 оборотов
            return spins;
        }
    }

    public double? ThreadAngle
    {
        get
        {
            if (Thread.Valid(ThreadDiameter, ThreadPitch))
            {
                return Thread.Angle(ThreadDiameter, ThreadPitch);
            }
            else
            {
                return 0;
            }
        }
    }

    public string ApproachDiameter => Thread.Valid(ThreadDiameter, ThreadPitch) ? Thread.ApproachDiameter(ThreadStandard, ThreadType, ThreadDiameter, ThreadPitch, EndPointZ, StartPointZ, PlaneLength).NC(1) : string.Empty;

    public string EndDiameter => Thread.Valid(ThreadDiameter, ThreadPitch) ? Thread.EndDiameter(ThreadStandard, ThreadType, ThreadDiameter, ThreadPitch, EndPointZ, StartPointZ, PlaneLength).NC(2) : string.Empty;

    public double StartPointZ { get; set; } = 2;
    public double EndPointZ { get; set; } = -20;

    public double InsertRadius { get; set; } = 0.4;

    private void OnStandardChanged(ThreadStandard value)
    {
        if (ThreadStandard == value) return;
        ThreadStandard = value;
        ThreadPitchString = string.Empty;
        ThreadDiameterString = string.Empty;
        CurrentThreadTemplate = null;
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        switch (ThreadStandard)
        {
            case ThreadStandard.Metric:
            {
                Thread.GetMetricValues(CurrentThreadTemplate, out string diameter, out string pitch);
                ThreadDiameterString = diameter;
                ThreadPitchString = pitch;
                PlaneLength = 0;
                EndPointZ = -20 - Math.Round(Thread.ThreadRunout(ThreadStandard, ThreadPitch, ThreadType), 1);
                ThreadChamfer = Thread.ThreadChamfer(ThreadStandard, ThreadPitch, ThreadType);
                break;
            }
            case ThreadStandard.BSPP:
            {
                Thread.GetBsppValues(CurrentThreadTemplate, out string diameter, out string pitch);
                ThreadDiameterString = diameter;
                ThreadPitchString = pitch;
                PlaneLength = 0;
                EndPointZ = -20 - Math.Round(Thread.ThreadRunout(ThreadStandard, ThreadPitch, ThreadType), 1);
                ThreadChamfer = Thread.ThreadChamfer(ThreadStandard, ThreadPitch, ThreadType);
                break;
            }
            case ThreadStandard.Trapezoidal:
            {
                Thread.GetTrapezoidalValues(CurrentThreadTemplate, out string diameter, out string pitch);
                ThreadDiameterString = diameter;
                ThreadPitchString = pitch;
                PlaneLength = 0;
                EndPointZ = -30;
                ThreadChamfer = Thread.ThreadChamfer(ThreadStandard, ThreadPitch, ThreadType);
                break;
            }
            case ThreadStandard.NPT:
            {
                Thread.GetNptValues(CurrentThreadTemplate, out string externalDiameter, out string internalDiameter, out string pitch, out double planeLength, out double threadLength);
                ThreadDiameterString = externalDiameter;
                ThreadPitchString = pitch;
                PlaneLength = planeLength;
                EndPointZ = -threadLength - Math.Round(Thread.ThreadRunout(ThreadStandard, ThreadPitch, ThreadType), 1);
                ThreadChamfer = Thread.ThreadChamfer(ThreadStandard, ThreadPitch, ThreadType);
                break;
            }
        }
    }
}