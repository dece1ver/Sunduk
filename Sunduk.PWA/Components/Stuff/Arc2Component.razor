<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid Spacing="1">
        <MudItem xs="12" sm="6">
            <MudField Label="Параметры" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1"
            @onfocusout="(() => CurrentImage = Images.Base)">
                <MudGrid Spacing="0">
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_PartDiameter" T="string" Label="Конечный диаметр" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                      @onfocus="() => CurrentImage = Images.PartDiameter" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_RadiusSize" T="string" Label="Радиус дуги" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                      @onfocus="() => CurrentImage = Images.ArcRadius" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_StartDiameter" T="string" Label="Начальный диаметр" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                      @onfocus="() => CurrentImage = Images.PartDiameter" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_InsertRadius" T="string" Label="Радиус пластины" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                      @onfocus="() => CurrentImage = Images.ToolRadius" Margin="Margin.Dense"/>
                    </MudItem>
                </MudGrid>
            </MudField>
        </MudItem>

        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudItem xs="12" sm="6" >
            <MudCard Elevation="0" Outlined="true" Class="mt-1 rounded-0">
                <MudCardContent>
                    @if (CurrentImage == Images.Base)
                    {
                        <center>
                            <img src="/img/stuffimages/arc2/arc2_bez.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.PartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/arc2/arc2_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.StartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/arc2/arc2_start_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ArcRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/arc2/arc2_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/arc2/arc2_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth"/>
                        </center>
                    }
                </MudCardContent>
                </MudCard>
            </MudItem>
            <div>
                <img src="/img/stuffimages/arc2/arc2_bez.svg" asp-append-version="true" width="0" height="0" />
                <img src="/img/stuffimages/arc2/arc2_part_diam.svg" asp-append-version="true" width="0" height="0" />
                <img src="/img/stuffimages/arc2/arc2_start_diam.svg" asp-append-version="true" width="0" height="0" />
                <img src="/img/stuffimages/arc2/arc2_radius.svg" asp-append-version="true" width="0" height="0" />
                <img src="/img/stuffimages/arc2/arc2_tool_radius.svg" asp-append-version="true" width="0" height="0" />

            </div>
        </MudHidden>
        <MudItem xs="12">
            <MudField Label="Результат" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-n1">
                <MudGrid Spacing="1">
                    <MudItem xs="12" Class="mt-2">
                        @if (Math.Abs(PartDiameter - StartDiameter) > 0.001)
                        {
                            <MudText Typo="Typo.body2">@($"Глубина: {RadiusDepth.ToPrettyString(3)} мм")</MudText>
                        }
                        @if (PartDiameter <= 0 && RadiusSize <= 0)
                        {
                            <MudText Typo="Typo.body2">@($"Глубина: -")</MudText>
                        }
                    </MudItem>
                    <MudItem xs="12">
                        @if (PartDiameter > 0 && RadiusSize > 0)
                        {
                            <MudText Typo="Typo.body2">@($"Глубина с учетом радиуса пластины: {(RadiusDepthWithShift).ToPrettyString()} мм")</MudText>
                        }
                        @if (PartDiameter <= 0 && RadiusSize <= 0)
                        {
                            <MudText Typo="Typo.body2">@($"Глубина с учетом радиуса пластины: -")</MudText>
                        }
                    </MudItem>
                    <MudItem xs="12">
                        @if (Math.Abs(StartDiameter - StartDiamWithShift) > 0.001)
                        {
                            <MudText Typo="Typo.body2">@($"Начальный диаметр с учетом радиуса пластины: {StartDiamWithShift.ToPrettyString()} мм")</MudText>
                        }
                    </MudItem>
@*                    <MudItem xs="12">
                        @if (PartDiameter != NippelStartDiameter)
                        {
                            <MudText Typo="Typo.body2">@($"Угол между осью и касательной: {Angle.ToPrettyString(3)}°")</MudText>
                        }
                        @if (PartDiameter <= 0 && RadiusSize <= 0)
                        {
                            <MudText Typo="Typo.body2">@($"Угол между осью и касательной: -")</MudText>
                        }
                    </MudItem>*@
                </MudGrid>
            </MudField>
        </MudItem>
        @if (PartDiameter > 0 && RadiusSize > 0)
        {
            <MudItem xs="12">
                <MudExpansionPanel Class="rounded-0" Text="Пример программы для Fanuc">
                    <MudGrid Class="mb-1 pa-n3">
                        <MudItem xs="6" md="4">
                            <MudSwitch @bind-Checked="@RoundCorner" Label="Скруглить углы" Color="Color.Primary" Class="ma-n3"/>
                        </MudItem>
                        <MudItem xs="6" md="4">
                            @if (RoundCorner)
                            {
                                <MudTextField @bind-Value="_Blunt" T="string" Label="Радиус скругления" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"  Class="ma-n4" DisableUnderLine="true"/>
                            }
                        </MudItem>
                    </MudGrid>
                    <MudItem xs="12" Class="mt-1">
                        <MudTextField Variant="Variant.Outlined" Class="monofield" ReadOnly="true" Lines="ExampleLines" Value="@RadiusExample" />
                    </MudItem>
                </MudExpansionPanel>
            </MudItem>
        }
    </MudGrid>


</MudContainer>

@code 
{
    readonly int _imgHeigth = 196;
    readonly int _imgWidth = 250;

    public bool RoundCorner { get; set; } = false;

    public enum Images
    {
        Base,
        PartDiameter,
        StartDiameter,
        ArcRadius,
        ToolRadius,
    };
    public enum ImageType { Diameter, ToolRadius, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; } = Images.Base;

    public string RadiusExample
    {
        get
        {
            if (PartDiameter > 0 && RadiusSize > 0)
            {
                if (RoundCorner)
                {
                    return GetBluntedShape();
                }
                return
                    $"G0 X{StartDiamWithShift.NC()} Z1. S200 M3\n" +
                    $"G1 Z0. F0.1\n" +
                    $"G3 X{PartDiameter.NC()} Z-{RadiusDepthWithShift.NC()} R{FullRadius.NC()}\n";
            }
            return string.Empty;
        }
    }
    public enum Radius { External, Internal };
    public Radius RadiusType { get; set; } = Radius.External;

    public string _PartDiameter { get; set; } = string.Empty;
    public double PartDiameter => _PartDiameter.GetDouble();
    
    public string _RadiusSize { get; set; } = string.Empty;
    public double RadiusSize => _RadiusSize.GetDouble();

    public string _StartDiameter { get; set; } = string.Empty;
    public double StartDiameter => _StartDiameter.GetDouble();

    public string _InsertRadius { get; set; } = string.Empty;
    public double InsertRadius => _InsertRadius.GetDouble();
    
    public string _Blunt { get; set; } = "0.3";
    public double Blunt => _Blunt.GetDouble();
    public double FullBluntRadius => Blunt + InsertRadius;

    public double RadiusDepth => RadiusSize - Math.Sqrt(Math.Pow(RadiusSize, 2) - Math.Pow(PartDiameter - StartDiameter, 2) / 4) ;
    public double RadiusDepthWithShift => FullRadius - Math.Sqrt(Math.Pow(FullRadius, 2) - Math.Pow(PartDiameter - StartDiamWithShift, 2) / 4);

    //public double Angle => Math.Atan(StartDiameter / EndPointZ).Degrees();

    public double StartDiamWithShift => StartDiameter - InsertRadius * 2;
    public double EndPointZWithShift => Math.Sqrt(Math.Pow(RadiusSize, 2) - Math.Pow(StartDiameter, 2));
    
    public double FullRadius => RadiusSize + InsertRadius;

    public int ExampleLines => RadiusExample.Count(f => f == '\n') + 1;

    string GetBluntedShape()
    {
        double hypotenuse = FullRadius - FullBluntRadius;
        double legA = (PartDiameter - StartDiamWithShift) / 2 - FullBluntRadius;
        double legB = Math.Sqrt(Math.Pow(hypotenuse, 2) - Math.Pow(legA, 2));
        double endZ = FullRadius - legB;
        double angle = Math.Atan(legA / legB);
        double shiftX = Math.Sin(angle) * FullBluntRadius;
        double shiftZ = Math.Cos(angle) * FullBluntRadius;

        double startBluntX = PartDiameter - 2 * (FullBluntRadius - shiftX);
        double startBluntZ = endZ - shiftZ;


        return $"G0 X{(StartDiamWithShift).NC()} Z1. S200 M3\n" +
        $"G1 Z0. F0.1\n" +
        $"G3 X{(startBluntX).NC()} Z-{startBluntZ.NC()} R{FullRadius.NC()}\n" +
        $"X{PartDiameter.NC()} Z-{endZ.NC()} R{FullBluntRadius.NC()}\n" +
        $"";
    }
}
