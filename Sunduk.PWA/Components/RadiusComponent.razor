<style>
    .monofield {
        font-family: 'Roboto Mono', monospace;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid Spacing="1">
        <MudItem xs="12" sm="6">
            <MudField Label="Параметры скругления" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                <MudGrid Spacing="0">
                    <MudItem xs="12">
                        <MudRadioGroup @bind-SelectedOption="@RadiusType" Class="mb-n2 d-flex justify-center">
                            <MudRadio Option="@Radius.External" Color="Color.Primary" @onfocus="SetExternalType">Наружное</MudRadio>
                            <MudRadio Option="@Radius.Internal" Color="Color.Primary" @onfocus="SetInternalType">Внутреннее</MudRadio>
                        </MudRadioGroup>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_RadiusDiameter" T="string" Label="Конечный диаметр" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                      @onfocus="() => CurrentImage = RadiusType == Radius.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_RadiusSize" T="string" Label="Радиус скругления" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                                      @onfocus="() => CurrentImage = RadiusType == Radius.External ? Images.ExternalRadiusSize : Images.InternalRadiusSize" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField @bind-Value="_InsertRadius" T="string" Label="Радиус пластины" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                                      @onfocus="() => CurrentImage = RadiusType == Radius.External ? Images.ExternalToolRadius : Images.InternalToolRadius" Margin="Margin.Dense"/>
                    </MudItem>
                </MudGrid>
            </MudField>
            
        </MudItem>

        <MudHidden Breakpoint="Breakpoint.Xs">
            <MudItem xs="12" sm="6" >
            <MudCard Elevation="0" Outlined="true" Class="mt-1">
                <MudCardContent>
                    @if (CurrentImage == Images.ExternalRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_raduis.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_raduis.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalRadiusSize)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_part_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalPartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalRadiusSize)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/int_part_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalPartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/int_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/int_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
        <div>
            <img src="/img/stuffimages/radius/ext_radius.svg" asp-append-version="true" width="0" height="0" />
            <img src="/img/stuffimages/radius/int_radius.svg" asp-append-version="true" width="0" height="0" />
            <img src="/img/stuffimages/radius/ext_part_radius.svg" asp-append-version="true" width="0" height="0" />
            <img src="/img/stuffimages/radius/ext_part_diam.svg" asp-append-version="true" width="0" height="0" />
            <img src="/img/stuffimages/radius/ext_tool_radius.svg" asp-append-version="true" width="0" height="0"/>
            <img src="/img/stuffimages/radius/ext_tool_radius.svg" asp-append-version="true" width="0" height="0"/>
            <img src="/img/stuffimages/radius/int_part_radius.svg" asp-append-version="true" width="0" height="0"/>
            <img src="/img/stuffimages/radius/int_part_diam.svg" asp-append-version="true" width="0" height="0"/>
            <img src="/img/stuffimages/radius/int_tool_radius.svg" asp-append-version="true" width="0" height="0"/>
        </div>
        </MudHidden>
        <MudItem xs="12">
            <MudField Label="Результат" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-n3">
                <MudGrid Spacing="1">
                    <MudItem xs="12" Class="mt-2">
                        @if (RadiusDiameter > 0 && RadiusSize > 0)
                        {
                            <MudText Typo="Typo.body2">@($"Начальный диаметр с учетом радиуса пластины: {RadiusStartDiameter.ToPrettyString()} мм")</MudText>
                        }
                        @if (RadiusDiameter <= 0 && RadiusSize <= 0)
                        {
                            <MudText Typo="Typo.body2">@($"Начальный диаметр с учетом радиуса пластины: -")</MudText>
                        }
                    </MudItem>
                    <MudItem xs="12">
                        @if (RadiusDiameter > 0 && RadiusSize > 0)
                        {
                            <MudText Typo="Typo.body2">@($"Глубина с учетом радиуса пластины: {RadiusDepth.ToPrettyString()} мм")</MudText>
                        }
                        @if (RadiusDiameter <= 0 && RadiusSize <= 0)
                        {
                            <MudText Typo="Typo.body2">@($"Глубина с учетом радиуса пластины: -")</MudText>
                        }
                    </MudItem>
                </MudGrid>
            </MudField>
        </MudItem>
        @if (RadiusDiameter > 0 && RadiusSize > 0)
        {
        <MudItem xs="12">
            <MudExpansionPanel Class="mt-2" Text="Пример программы для Fanuc">
                <MudItem xs="12" md="4">
                            <MudRadioGroup T="bool" @bind-SelectedOption="showClassicRadius" Class="ma-n3">
                                <MudRadio Option="true" Color="Color.Primary">Обычная</MudRadio>
                                <MudRadio Option="false" Color="Color.Primary">Обратная</MudRadio>
                            </MudRadioGroup>
                        </MudItem>
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Class="monofield" ReadOnly="true" Lines="ExampleLines" Value="@RadiusExample" />
                </MudItem>
            </MudExpansionPanel>
        </MudItem>
        }
    </MudGrid>
    
    
</MudContainer>

@code 
{
    readonly int _imgHeigth = 187;
    readonly int _imgWidth = 300;

    bool showClassicRadius = true;

    public enum Images
    {
        ExternalRadius,
        InternalRadius,
        ExternalRadiusSize,
        ExternalPartDiameter,
        ExternalToolRadius,
        InternalRadiusSize,
        InternalPartDiameter,
        InternalToolRadius,
    };
    public enum ImageType { Diameter, ToolRaduis, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; } = Images.ExternalRadius;

    public string RadiusExample
    {
        get
        {
            if (RadiusDiameter > 0 && RadiusSize > 0)
            {
                if(showClassicRadius)
                {
                    return
                    $"G0 X{RadiusStartDiameter.NC()} Z1. S180 M3\n" +
                    $"G1 Z0. F0.1\n" +
                    $"X{RadiusDiameter.NC()} R{RadiusDepth.NC()}\n" +
                    $"W-{RadiusDepth.NC()}";
                }

                return RadiusType == Radius.External
                ? $"G0 X{(RadiusDiameter + 1).NC()} Z-{RadiusDepth.NC()} S180 M3\n" +
                  $"G1 X{RadiusDiameter.NC()} F0.1\n" +
                  $"Z0. R{RadiusDepth.NC()}\n" +
                  $"U-{(2 * RadiusDepth).NC()}"
                : $"G0 X{(RadiusDiameter - 1).NC()} Z1. S180 M3\n" +
                  $"Z-{RadiusDepth.NC()}\n" +
                  $"G1 X{RadiusDiameter.NC()} F0.1\n" +
                  $"Z0. R{RadiusDepth.NC()}\n" +
                  $"U-{(2 * RadiusDepth).NC()}";
            }
            return string.Empty;
        }
    }
    public enum Radius { External, Internal };
    public Radius RadiusType { get; set; } = Radius.External;

    public string _RadiusDiameter { get; set; } = string.Empty;
    public double RadiusDiameter { get => Util.GetDouble(_RadiusDiameter); }

    public string _RadiusSize { get; set; } = string.Empty;
    public double RadiusSize { get => Util.GetDouble(_RadiusSize); }

    public string _InsertRadius { get; set; } = string.Empty;
    public double InsertRadius { get => Util.GetDouble(_InsertRadius); }

    public double RadiusStartDiameter
    {
        get
        {
            if (RadiusType == Radius.External)
            {
                return RadiusDiameter - (2 * (RadiusSize + InsertRadius) );
            }
            return RadiusDiameter + (2 * (RadiusSize + InsertRadius));
        }
    }

    public double RadiusDepth { get => RadiusSize + InsertRadius; }

    public int ExampleLines { get => RadiusExample.Count(f => f == '\n') + 1; }


    private void SetInternalType()
    {
        if (CurrentImage == Images.ExternalPartDiameter) CurrentImage = Images.InternalPartDiameter;
        if (CurrentImage == Images.ExternalRadiusSize) CurrentImage = Images.InternalRadiusSize;
        if (CurrentImage == Images.ExternalToolRadius) CurrentImage = Images.InternalToolRadius;
    }

    private void SetExternalType()
    {
        if (CurrentImage == Images.InternalPartDiameter) CurrentImage = Images.ExternalPartDiameter;
        if (CurrentImage == Images.InternalRadiusSize) CurrentImage = Images.ExternalRadiusSize;
        if (CurrentImage == Images.InternalToolRadius) CurrentImage = Images.ExternalToolRadius;
    }
}
