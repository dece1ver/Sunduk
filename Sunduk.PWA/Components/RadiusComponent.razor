<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid>
        <MudItem xs="12" sm="4" md="4" lg="3" xl="3">
            <MudField Label="Тип скругления" Variant="Variant.Outlined" InnerPadding="false">
                <MudRadioGroup @bind-SelectedOption="@RadiusType">
                    <MudRadio Option="@Radius.External" Color="Color.Primary" @onfocus="SetExternalType">Наружное</MudRadio>
                    <MudRadio Option="@Radius.Internal" Color="Color.Primary" @onfocus="SetInternalType">Внутреннее</MudRadio>
                </MudRadioGroup>
            </MudField>
        </MudItem>
        <MudItem xs="6" sm="4" md="4" lg="5" xl="3">
            <MudTextField @bind-Value="_RadiusDiameter" T="string" Label="Конечный диаметр" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                          @onfocus="() => CurrentImage = RadiusType == Radius.External ? Images.ExternalPartDiameter : Images.InternalPartDiameter" />
        </MudItem>
        <MudItem xs="6" sm="4" md="4" lg="4" xl="3">
            <MudTextField @bind-Value="_RadiusSize" T="string" Label="Радиус скругления" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true"
                          @onfocus="() => CurrentImage = RadiusType == Radius.External ? Images.ExternalRadiusSize : Images.InternalRadiusSize" />
        </MudItem>
        <MudItem xs="6" sm="4" md="4" lg="4" xl="3">
            <MudTextField @bind-Value="_InsertRadius" T="string" Label="Радиус пластины" Variant="Variant.Text" Immediate="true" Adornment="Adornment.End" AdornmentText="мм"
                          @onfocus="() => CurrentImage = RadiusType == Radius.External ? Images.ExternalToolRadius : Images.InternalToolRadius" />
        </MudItem>

        @if (RadiusDiameter > 0 && RadiusSize > 0)
        {
            <MudItem xs="12">
                <MudField Variant="Variant.Outlined">
                    <MudText>@ResultMessage</MudText>
                </MudField>
            </MudItem>
            <MudExpansionPanel Class="mt-2" Text="Пример программы для Fanuc">
                <MudItem xs="12">
                    <MudTextField Variant="Variant.Outlined" Style="font-family: Consolas" ReadOnly="true" Lines="ExampleLines" Value="@RadiusExample" />
                </MudItem>
            </MudExpansionPanel>
        }

        <MudItem xs="12" xl="12">
            <MudCard Outlined="true" Style="margin: 0">
                <MudCardContent>
                    @if (CurrentImage == Images.ExternalRadiusSize)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_part_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalPartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.ExternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/ext_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalRadiusSize)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/int_part_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalPartDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/int_part_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.InternalToolRadius)
                    {
                        <center>
                            <img src="/img/stuffimages/radius/int_tool_radius.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    
    
</MudContainer>

@code 
{
    readonly int _imgHeigth = 150;
    readonly int _imgWidth = 350;

    public enum Images
    {
        ExternalRadiusSize,
        ExternalPartDiameter,
        ExternalToolRadius,
        InternalRadiusSize,
        InternalPartDiameter,
        InternalToolRadius,
    };
    public enum ImageType { Diameter, ToolRaduis, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; }

    public string ResultMessage
    {
        get
        {
            if (RadiusDiameter > 0 && RadiusSize > 0)
            {
                return $"Начальный диаметр скругления с учетом радиуса пластины: {Util.ToPrettyString(RadiusResult)} мм";
            }
            return string.Empty;
        }
    }

    public string RadiusExample
    {
        get
        {
            if (RadiusDiameter > 0 && RadiusSize > 0)
            {
                return
                    $"G0 X{RadiusResult.NC()} Z1. S180 M3\n" +
                    $"G1 Z0. F0.1\n" +
                    $"X{RadiusDiameter.NC()} R{(RadiusSize + InsertRadius).NC()}\n" +
                    $"W-{(RadiusSize + InsertRadius).NC()}";
            }
            return string.Empty;
        }
    }
    public enum Radius { External, Internal };
    public Radius RadiusType { get; set; } = Radius.External;

    public string _RadiusDiameter { get; set; } = string.Empty;
    public double RadiusDiameter { get => Util.GetDouble(_RadiusDiameter); }

    public string _RadiusSize { get; set; } = string.Empty;
    public double RadiusSize { get => Util.GetDouble(_RadiusSize); }

    public string _InsertRadius { get; set; } = string.Empty;
    public double InsertRadius { get => Util.GetDouble(_InsertRadius); }

    public double RadiusResult
    {
        get
        {
            double result;
            if (RadiusType == Radius.External)
            {
                result = RadiusDiameter - (2 * (RadiusSize + InsertRadius) );
            }
            else
            {
                result = RadiusDiameter + (2 * (RadiusSize + InsertRadius));

            }
            return result;
        }
    }

    public int ExampleLines { get => RadiusExample.Count(f => f == '\n') + 1; }


    private void SetInternalType()
    {
        if (CurrentImage == Images.ExternalPartDiameter) CurrentImage = Images.InternalPartDiameter;
        if (CurrentImage == Images.ExternalRadiusSize) CurrentImage = Images.InternalRadiusSize;
        if (CurrentImage == Images.ExternalToolRadius) CurrentImage = Images.InternalToolRadius;
    }

    private void SetExternalType()
    {
        if (CurrentImage == Images.InternalPartDiameter) CurrentImage = Images.ExternalPartDiameter;
        if (CurrentImage == Images.InternalRadiusSize) CurrentImage = Images.ExternalRadiusSize;
        if (CurrentImage == Images.InternalToolRadius) CurrentImage = Images.ExternalToolRadius;
    }
}
