<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid>
        <MudItem xs="6">
            <MudSelect @bind-Value="WorkpieceForm" Label="Форма заготовки" T="Form" Variant="Variant.Outlined">
                <MudSelectItem Value="@(Form.Circle)">Круглая</MudSelectItem>
                <MudSelectItem Value="@(Form.Rectangle)">Прямоугольная</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="6">
            <MudSelect @bind-Value="WorkpieceMaterial" Label="Материал" T="Material" Variant="Variant.Outlined">
                <MudSelectItem Value="@(Material.Steel)">Черная сталь</MudSelectItem>
                <MudSelectItem Value="@(Material.Stainless)">Нержавеющая сталь</MudSelectItem>
            </MudSelect>

        </MudItem>
        <MudItem xs="6">
            @if (WorkpieceForm == Form.Circle)
            {
                <MudTextField @bind-Value="_WorkpieceExternalDiameter" Label="Наружный диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                <MudTextField @bind-Value="_WorkpieceInternalDiameter" Label="Внутренний диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
            }
            @if (WorkpieceForm == Form.Rectangle)
            {
                <MudTextField @bind-Value="_WorkpieceWidth" Label="Ширина" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                <MudTextField @bind-Value="_WorkpieceHeight" Label="Высота" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
            }
        </MudItem>
        <MudItem xs="6">
            <MudTextField @bind-Value="_WorkpieceLength" Label="Длина заготовки" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
            <MudTextField @bind-Value="_PartsCount" Label="Количество" Adornment="Adornment.End" AdornmentText="шт" Variant="Variant.Text" Immediate="true"></MudTextField>
        </MudItem>
        <MudItem Class="mt-4" xs="12">
            <MudPaper Class="pa-4" Outlined="true">
                <table>
                    <tr>
                        <MudText>Информация:</MudText>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Заготовка:</MudText></td>
                        <td><MudText Typo="Typo.caption">@WorkpieceInfo</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Партия:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(PartsCount + " шт.")</MudText></td>
                    </tr>
                </table>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>


@code
{
    private const double _sawBarFeed = 3600;    // мм/мин
    private const double _sawRapidFeed = 2000;  // мм/мин
    private const double _clampingTime = 6.5;   // сек

    public enum Form { Circle, Rectangle }
    public Form WorkpieceForm { get; set; } = Form.Circle;

    public enum Material { Steel, Stainless }
    public Material WorkpieceMaterial { get; set; } = Material.Steel;

    public string _WorkpieceExternalDiameter { get; set; } = string.Empty;
    public double WorkpieceExternalDiameter { get => Util.GetDouble(_WorkpieceExternalDiameter); }

    public string _WorkpieceInternalDiameter { get; set; } = string.Empty;
    public double WorkpieceInternalDiameter { get => Util.GetDouble(_WorkpieceInternalDiameter); }

    public string _WorkpieceWidth { get; set; } = string.Empty;
    public double WorkpieceWidth { get => Util.GetDouble(_WorkpieceWidth); }

    public string _WorkpieceHeight { get; set; } = string.Empty;
    public double WorkpieceHeight { get => Util.GetDouble(_WorkpieceHeight); }

    public string _WorkpieceLength { get; set; } = string.Empty;
    public double WorkpieceLength { get => Util.GetDouble(_WorkpieceLength); }

    public string _PartsCount { get; set; } = string.Empty;
    public double PartsCount { get => Util.GetDouble(_PartsCount, 1); }

    #region Заготовка
    public bool ValidWorkpiece
    {
        get
        {
            if (WorkpieceForm == Form.Circle && WorkpieceExternalDiameter > 0 && WorkpieceInternalDiameter < WorkpieceExternalDiameter && WorkpieceLength > 0)
            {
                return true;
            }
            if (WorkpieceForm == Form.Rectangle && WorkpieceWidth > 0 && WorkpieceHeight > 0 && WorkpieceLength > 0)
            {
                return true;
            }
            return false;
        }
    }

    public string WorkpieceInfo
    {
        get
        {
            if (ValidWorkpiece && WorkpieceForm == Form.Circle)
            {
                if (WorkpieceInternalDiameter > 0)
                {
                    return $"Труба Ø{Util.ToPrettyString(WorkpieceExternalDiameter)}x{Util.ToPrettyString((WorkpieceExternalDiameter - WorkpieceInternalDiameter) / 2)} " +
                            $"L{Util.ToPrettyString(WorkpieceLength)}мм";
                }
                else
                {
                    return $"Круг Ø{Util.ToPrettyString(WorkpieceExternalDiameter)} " +
                            $"L{Util.ToPrettyString(WorkpieceLength)}мм";
                }
            }
            if (ValidWorkpiece && WorkpieceForm == Form.Rectangle)
            {
                return $"Прямоугольник {Util.ToPrettyString(WorkpieceWidth)}x{Util.ToPrettyString(WorkpieceHeight)} " +
                        $"L{Util.ToPrettyString(WorkpieceLength)}мм";
            }
            return $"Не указана";
        }
    }
    #endregion

    public double CutSpeed {
        get
        {
            if (WorkpieceMaterial == Material.Steel)
            {
                return 50;
            }
            if (WorkpieceMaterial == Material.Stainless)
            {
                return 40;
            }
            return 0;
        }
    }

    public double SawFeed { get
        {
            if (WorkpieceForm == Form.Circle)
            {
                if (WorkpieceMaterial == Material.Steel)
                {
                    switch (WorkpieceExternalDiameter)
                    {
                        case < 50:
                            return 20;
                        case < 100:
                            return 14;
                        case < 150:
                            return 12;
                        case < 190:
                            return 9;
                        case < 230:
                            return 7;
                        case < 280:
                            return 6;
                        case < 320:
                            return 5;
                        default:
                            return 0;
                    }
                }
                if (WorkpieceMaterial == Material.Stainless)
                {
                    switch (WorkpieceExternalDiameter)
                    {
                        case < 50:
                            return 30;
                        case < 100:
                            return 20;
                        case < 150:
                            return 16;
                        case < 190:
                            return 12;
                        case < 230:
                            return 10;
                        case < 280:
                            return 8;
                        case < 320:
                            return 7;
                        default:
                            return 0;
                    }
                }
            }
            return 0;
        }
    }

    public int SawingTime { get
        {

            return 0;
        } }

}
