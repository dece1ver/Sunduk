@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudSwipeArea OnSwipe="@OnSwipe">
    <MudTabs @ref="_toolTabs" Elevation="0">
        @if (MachineType == MachineType.Milling)
        {
            // Общий список
            <MudTabPanel Text="Общий" Style="font-size: x-small">

                @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Milling))
                {
                    <MudText>@tool.Description()</MudText>
                }
            </MudTabPanel>

            // MillingChamfer
            <MudTabPanel Text="Фасочники" Style="font-size: x-small">
                <MudTable Items="MillingChamferTools" ReadOnly="false" Hover="true" CanCancelEdit="false" Elevation="0">
                    <ColGroup>
                        <col />
                        <col />
                        <col />
                        <col />
                        <col />
                        <col style="width: 50px;"/>
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол</MudTh>
                        <MudTh>Компенсация кончика</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh Style="text-align:center"/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Компенсация кончика">@context.TipCompensation.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd DataLabel="" Style="text-align:right">
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline"
                            OnClick="(() => RemoveMillingChamferTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField Class="my-n2" @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр" Class="my-n2">
                            <MudTextField Class="my-n2" @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол" Class="my-n2">
                            @*<MudAutocomplete T="double" Label="Угол" @bind-Value="@context.Angle" SearchFunc="@SearchAsync" CoerceText="true" CoerceValue="true" 
                                Converter="Util.DoubleConverter" Required Variant="Variant.Outlined" Margin="Margin.Dense" />*@
                            <MudTextField Class="my-n2" @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Компенсация кончика" Class="my-n2">
                            <MudTextField Class="my-n2" @bind-Value="@context.TipCompensation" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение" Class="my-n2">
                            <MudSelect Class="my-n2" T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingChamferTool" />
                    </div>
                </div>
            </MudTabPanel>
            

            // MillingDrilling
            <MudTabPanel Text="Сверла" Style="font-size: x-small">
                <MudTable Items="MillingDrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedMillingDrillingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                        @if (context.Type == DrillingTool.Types.Solid)
                            {
                            <MudTd DataLabel="Тип">Твердосплавное</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Insert)
                            {
                            <MudTd DataLabel="Тип">С пластинами</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Tip)
                            {
                            <MudTd DataLabel="Тип">С головкой</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Rapid)
                            {
                            <MudTd DataLabel="Тип">Быстрорез</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Center)
                            {
                            <MudTd DataLabel="Тип">Центровочное</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingDrillingTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="DrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@DrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Insert">С пластинами</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Tip">С головкой</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Rapid">Быстрорез</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Center">Центровочное</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingDrillingTool" />
                    </div>
                </div>
            </MudTabPanel>


            // MillingSpecial
            <MudTabPanel Text="Спец инструмент" Style="font-size: x-small">
                <MudTable Items="MillingSpecialTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedMillingSpecialTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Описание</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Описание">@context.Name</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingSpecialTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Описание">
                            <MudTextField @bind-Value="@context.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
            <div class="mt-3 ml-0 mr-4 d-flex">
                <div class="d-flex ml-auto align-center">
                    <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingSpecialTool" />
                </div>
            </div>
            </MudTabPanel>

            // MillingTapping
            <MudTabPanel Text="Метчики" Style="font-size: x-small">
                <MudTable Items="MillingTappingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedMillingTappingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        @if (context.Type == TappingTool.Types.Cutting)
                        {
                            <MudTd DataLabel="Тип">Нарезной</MudTd>
                        }
                        @if (context.Type == TappingTool.Types.Forming)
                        {
                            <MudTd DataLabel="Тип">Раскатник</MudTd>
                        }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingTappingTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="TappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TappingTool.Types.Cutting">Нарезной</MudSelectItem>
                                <MudSelectItem Value="@TappingTool.Types.Forming">Раскатник</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingTappingTool" />
                    </div>
                </div>
            </MudTabPanel>

            // MillingThreadCutting
            <MudTabPanel Text="Резьбофрезы" Style="font-size: x-small">
                <MudTable Items="MillingThreadCuttingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedMillingThreadCuttingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Стандарт</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        @switch (@context.ThreadStandart)
                        {
                            case ThreadStandart.Metric:
                                <MudTd DataLabel="Стандарт">Метрическая 60° (М)</MudTd>
                                break;
                            case ThreadStandart.BSPP:
                                <MudTd DataLabel="Стандарт">Трубная цилиндрическая 55° (G)</MudTd>
                                break;
                            case ThreadStandart.Trapezoidal:
                                <MudTd DataLabel="Стандарт">Трапецеидальная 30° (Tr)</MudTd>
                                break;
                            case ThreadStandart.NPT:
                                <MudTd DataLabel="Стандарт">Коническая 60° (K)</MudTd>
                                break;
                        }
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingThreadCuttingTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Стандарт">
                            <MudSelect T="ThreadStandart" @bind-Value="@context.ThreadStandart" Variant="Variant.Outlined" Required>
                                <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                                <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (G)</MudSelectItem>
                                <MudSelectItem Value="@(ThreadStandart.Trapezoidal)">Трапецеидальная 30° (Tr)</MudSelectItem>
                                <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingThreadCuttingTool" />
                    </div>
                </div>
            </MudTabPanel>

            // Milling
            <MudTabPanel Text="Фрезы" Style="font-size: x-small">
                <MudTable Items="MillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedMillingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Зубья</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Рабочая глубина</MudTh>
                        <MudTh>Радиус при вершине</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Зубья">@context.Edges</MudTd>
                        @if (context.Type == MillingTool.Types.Solid)
                            {
                            <MudTd DataLabel="Тип">Твердосплавная</MudTd>
                            }
                        @if (context.Type == MillingTool.Types.Insert)
                            {
                            <MudTd DataLabel="Тип">С пластинами</MudTd>
                            }
                        <MudTd DataLabel="Рабочая глубина">@context.CuttingLength.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус при вершине">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Зубья">
                            <MudTextField @bind-Value="@context.Edges" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.EdgesConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="MillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@MillingTool.Types.Solid">Твердосплавная</MudSelectItem>
                                <MudSelectItem Value="@MillingTool.Types.Insert">С пластинами</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Рабочая глубина">
                            <MudTextField @bind-Value="@context.CuttingLength" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус при вершине">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingTool" />
                    </div>
                </div>
            </MudTabPanel>

        }

        @if (MachineType == MachineType.Turning)
        {
            // GroovingExternal
            <MudTabPanel Text="Канавки наружные" Style="font-size: x-small">
                <MudTable Items="GroovingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedGroovingExternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Ширина</MudTh>
                        <MudTh>Радиус</MudTh>
                        <MudTh>Привязка</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        @if (context.Type == GroovingExternalTool.Types.Grooving)
                            {
                            <MudTd DataLabel="Тип">Канавочный</MudTd>
                            }
                        @if (context.Type == GroovingExternalTool.Types.Cutting)
                            {
                            <MudTd DataLabel="Тип">Отрезной</MudTd>
                            }
                        @if (context.Type == GroovingExternalTool.Types.Blade)
                            {
                            <MudTd DataLabel="Тип">Лезвие</MudTd>
                            }
                        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Привязка">@(context.ZeroPoint == TurningGroovingTool.Point.Left ? "Как проходной" : "Как отрезной")</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveGroovingExternalTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="GroovingExternalTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@GroovingExternalTool.Types.Grooving">Канавочный</MudSelectItem>
                                <MudSelectItem Value="@GroovingExternalTool.Types.Cutting">Отрезной</MudSelectItem>
                                <MudSelectItem Value="@GroovingExternalTool.Types.Blade">Лезвие</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Привязка">
                            <MudSelect T="TurningGroovingTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TurningGroovingTool.Point.Left">Как проходной</MudSelectItem>
                                <MudSelectItem Value="@TurningGroovingTool.Point.Right">Как отрезной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingExternalTool" />
                    </div>
                </div>
            </MudTabPanel>


            // GroovingFace
            <MudTabPanel Text="Канавки торцевые" Style="font-size: x-small">
                <MudTable Items="GroovingFaceTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedGroovingFaceTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Ширина</MudTh>
                        <MudTh>Радиус</MudTh>
                        <MudTh>Привязка</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Привязка">@(context.ZeroPoint == TurningGroovingTool.Point.Bottom ? "Как проходной" : "Как расточной")</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveGroovingFaceTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Привязка">
                            <MudSelect T="TurningGroovingTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TurningGroovingTool.Point.Bottom">Как проходной</MudSelectItem>
                                <MudSelectItem Value="@TurningGroovingTool.Point.Top">Как расточной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingFaceTool" />
                    </div>
                </div>
            </MudTabPanel>


            // GroovingInternal
            <MudTabPanel Text="Канавки внутренние" Style="font-size: x-small">
                <MudTable Items="GroovingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedGroovingInternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Ширина</MudTh>
                        <MudTh>Радиус</MudTh>
                        <MudTh>Привязка</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Привязка">@(context.ZeroPoint == TurningGroovingTool.Point.Left ? "Как расточной" : "Как отрезной")</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveGroovingInternalTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Привязка">
                            <MudSelect T="TurningGroovingTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TurningGroovingTool.Point.Left">Как расточной</MudSelectItem>
                                <MudSelectItem Value="@TurningGroovingTool.Point.Right">Как отрезной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingInternalTool" />
                    </div>
                </div>
            </MudTabPanel>


            // SpecialTurning
            <MudTabPanel Text="Спец инструмент" Style="font-size: x-small">
                <MudTable Items="TurningSpecialTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedTurningSpecialTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Описание</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Описание">@context.Name</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveSpecialTurningTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Описание">
                            <MudTextField @bind-Value="@context.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddSpecialTurningTool" />
                    </div>
                </div>
            </MudTabPanel>


            // ThreadingExternal
            <MudTabPanel Text="Резьбовые наружные" Style="font-size: x-small">
                <MudTable Items="ThreadingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedThreadingExternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Угол опорной пластины</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveThreadingExternalTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол опорной пластины">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingExternalTool" />
                    </div>
                </div>
            </MudTabPanel>


            // ThreadingInternal
            <MudTabPanel Text="Резьбовые внутренние" Style="font-size: x-small">
                <MudTable Items="ThreadingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedThreadingInternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Угол опорной пластины</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveThreadingInternalTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол опорной пластины">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingInternalTool" />
                    </div>
                </div>
            </MudTabPanel>


            // TurningDrilling
            <MudTabPanel Text="Сверла" Style="font-size: x-small">
                <MudTable Items="TurningDrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedTurningDrillingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                        @if (context.Type == DrillingTool.Types.Solid)
                            {
                            <MudTd DataLabel="Тип">Твердосплавное</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Insert)
                            {
                            <MudTd DataLabel="Тип">С пластинами</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Tip)
                            {
                            <MudTd DataLabel="Тип">С головкой</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Rapid)
                            {
                            <MudTd DataLabel="Тип">Быстрорез</MudTd>
                            }
                        @if (context.Type == DrillingTool.Types.Center)
                            {
                            <MudTd DataLabel="Тип">Центровочное</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveTurningDrillingTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="DrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@DrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Insert">С пластинами</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Tip">С головкой</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Rapid">Быстрорез</MudSelectItem>
                                <MudSelectItem Value="@DrillingTool.Types.Center">Центровочное</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningDrillingTool" />
                    </div>
                </div>
            </MudTabPanel>


            // TurningExternal
            <MudTabPanel Text="Точение наружное" Style="font-size: x-small">
                <MudTable Items="TurningExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedTurningExternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Описание</MudTh>
                        <MudTh>Угол кромки</MudTh>
                        <MudTh>Радиус кромки</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Тип">@(context.Type == TurningExternalTool.Types.Bar ? "Проходной" : "Подрезной")</MudTd>
                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveTurningExternalTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="TurningExternalTool.Types" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Type" Required>
                                <MudSelectItem Value="@TurningExternalTool.Types.Bar">Проходной</MudSelectItem>
                                <MudSelectItem Value="@TurningExternalTool.Types.Face">Подрезной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Угол кромки">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус кромки">
                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Hand" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningExternalTool" />
                    </div>
                </div>
            </MudTabPanel>


            // TurningInternal
            <MudTabPanel Text="Точение внутреннее" Style="font-size: x-small">
                <MudTable Items="TurningInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedTurningInternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол кромки</MudTh>
                        <MudTh>Радиус кромки</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveTurningInternalTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол кромки">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус кромки">
                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningInternalTool" />
                    </div>
                </div>
            </MudTabPanel>


            // TurningTapping
            <MudTabPanel Text="Метчики" Style="font-size: x-small">
                <MudTable Items="TurningTappingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="_selectedTurningTappingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                        <MudTh/>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        @if (context.Type == TappingTool.Types.Cutting)
                            {
                            <MudTd DataLabel="Тип">Нарезной</MudTd>
                            }
                        @if (context.Type == TappingTool.Types.Forming)
                            {
                            <MudTd DataLabel="Тип">Раскатник</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
                        <MudTd>
                            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveTurningTappingTool(context))" />
                        </MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="TappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TappingTool.Types.Cutting">Нарезной</MudSelectItem>
                                <MudSelectItem Value="@TappingTool.Types.Forming">Раскатник</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningTappingTool" />
                    </div>
                </div>
            </MudTabPanel>
        }
    </MudTabs>
</MudSwipeArea>

@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter]
    public MachineType MachineType { get; set; }

    public int Tabs => MachineType == MachineType.Turning ? 9 : 3;

    #region Список фасочников
    public List<MillingChamferTool> MillingChamferTools
    {
        get => Tools.OfType<MillingChamferTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingChamferTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список сверел (фрезерный)
    public List<MillingDrillingTool> MillingDrillingTools
    {
        get => Tools.OfType<MillingDrillingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingDrillingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список спец. инструмента (фрезерный)
    public List<MillingSpecialTool> MillingSpecialTools
    {
        get => Tools.OfType<MillingSpecialTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingSpecialTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список метчиков (фрезерный)
    public List<MillingTappingTool> MillingTappingTools
    {
        get => Tools.OfType<MillingTappingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingTappingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список резьбофрез
    public List<MillingThreadCuttingTool> MillingThreadCuttingTools
    {
        get => Tools.OfType<MillingThreadCuttingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingThreadCuttingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список фрез
    public List<MillingTool> MillingTools
    {
        get => Tools.OfType<MillingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingTool);
            Tools.AddRange(value);
        }
    }
    #endregion


    #region Список наружных канавочных
    public List<GroovingExternalTool> GroovingExternalTools
    {
        get => Tools.OfType<GroovingExternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is GroovingExternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список торцевых канавочных
    public List<GroovingFaceTool> GroovingFaceTools
    {
        get => Tools.OfType<GroovingFaceTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is GroovingFaceTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список внутренних канавочных
    public List<GroovingInternalTool> GroovingInternalTools
    {
        get => Tools.OfType<GroovingInternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is GroovingInternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список спец/ инструмента (токарный)
    public List<TurningSpecialTool> TurningSpecialTools
    {
        get => Tools.OfType<TurningSpecialTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningSpecialTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список наружных резьбовых
    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get => Tools.OfType<ThreadingExternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is ThreadingExternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список внутренних резьбовых
    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get => Tools.OfType<ThreadingInternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is ThreadingInternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список сверел (токарный)
    public List<TurningDrillingTool> TurningDrillingTools
    {
        get => Tools.OfType<TurningDrillingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningDrillingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список наружных проходных
    public List<TurningExternalTool> TurningExternalTools
    {
        get => Tools.OfType<TurningExternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningExternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список расточных
    public List<TurningInternalTool> TurningInternalTools
    {
        get => Tools.OfType<TurningInternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningInternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список метчиков (токарный)
    public List<TurningTappingTool> TurningTappingTools
    {
        get => Tools.OfType<TurningTappingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningTappingTool);
            Tools.AddRange(value);
        }
    }
    #endregion


    private MillingChamferTool _selectedMillingChamferTool = null;
    private MillingDrillingTool _selectedMillingDrillingTool = null;
    private MillingSpecialTool _selectedMillingSpecialTool = null;
    private MillingTappingTool _selectedMillingTappingTool = null;
    private MillingThreadCuttingTool _selectedMillingThreadCuttingTool = null;
    private MillingTool _selectedMillingTool = null;

    private GroovingExternalTool _selectedGroovingExternalTool = null;
    private GroovingFaceTool _selectedGroovingFaceTool = null;
    private GroovingInternalTool _selectedGroovingInternalTool = null;
    private TurningSpecialTool _selectedTurningSpecialTool = null;
    private ThreadingExternalTool _selectedThreadingExternalTool = null;
    private ThreadingInternalTool _selectedThreadingInternalTool = null;
    private TurningDrillingTool _selectedTurningDrillingTool = null;
    private TurningExternalTool _selectedTurningExternalTool = null;
    private TurningInternalTool _selectedTurningInternalTool = null;
    private TurningTappingTool _selectedTurningTappingTool = null;

    // MillingDrilling
    private async Task AddMillingChamferTool()
    {
        Tools.Add(new MillingChamferTool(1, 6, 45));
        await LocalStorage.SetItemAsync(nameof(MillingChamferTools), MillingChamferTools);
    }
    private async Task RemoveMillingChamferTool(MillingChamferTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingChamferTools), MillingChamferTools);
    }
    private async Task RemoveLastMillingChamferTool()
    {
        if (MillingChamferTools.Count > 0) Tools.Remove(MillingChamferTools[^1]);
        await LocalStorage.SetItemAsync(nameof(MillingChamferTools), MillingChamferTools);
    }

    // MillingDrilling
    private async Task AddMillingDrillingTool()
    {
        Tools.Add(new MillingDrillingTool(1, DrillingTool.Types.Solid, 10, 140));
        await LocalStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
    }
    private async Task RemoveMillingDrillingTool(MillingDrillingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
    }
    private async Task RemoveLastMillingDrillingTool()
    {
        if (MillingDrillingTools.Count > 0) Tools.Remove(MillingDrillingTools[^1]);
        await LocalStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
    }

    // MillingSpecial
    private async Task AddMillingSpecialTool()
    {
        Tools.Add(new MillingSpecialTool(1, string.Empty));
        await LocalStorage.SetItemAsync(nameof(MillingSpecialTools), MillingSpecialTools);
    }
    private async Task RemoveMillingSpecialTool(MillingSpecialTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingSpecialTools), MillingSpecialTools);
    }
    private async Task RemoveLastMillingSpecialTool()
    {
        if (MillingSpecialTools.Count > 0) Tools.Remove(MillingSpecialTools[^1]);
        await LocalStorage.SetItemAsync(nameof(MillingSpecialTools), MillingSpecialTools);
    }

    // MillingTapping
    private async Task AddMillingTappingTool()
    {
        Tools.Add(new MillingTappingTool(1, TappingTool.Types.Cutting, 8, 1.25));
        await LocalStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
    }
    private async Task RemoveMillingTappingTool(MillingTappingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
    }
    private async Task RemoveLastMillingTappingTool()
    {
        if (MillingTappingTools.Count > 0) Tools.Remove(MillingTappingTools[^1]);
        await LocalStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
    }

    // MillingThreadCutting
    private async Task AddMillingThreadCuttingTool()
    {
        Tools.Add(new MillingThreadCuttingTool(1, 9.5, ThreadStandart.NPT, 1.411));
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
    }
    private async Task RemoveMillingThreadCuttingTool(MillingThreadCuttingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
    }
    private async Task RemoveLastMillingThreadCuttingTool()
    {
        if (MillingThreadCuttingTools.Count > 0) Tools.Remove(MillingThreadCuttingTools[^1]);
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
    }

    //Milling
    private async Task AddMillingTool()
    {
        Tools.Add(new MillingTool(1, MillingTool.Types.Solid, 12));
        await LocalStorage.SetItemAsync(nameof(MillingTools), MillingTools);
    }
    private async Task RemoveMillingTool(MillingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingTools), MillingTools);
    }
    private async Task RemoveLastMillingTool()
    {
        if (MillingTools.Count > 0) Tools.Remove(MillingTools[^1]);
        await LocalStorage.SetItemAsync(nameof(MillingTools), MillingTools);
    }

    // GroovingExternal
    private async Task AddGroovingExternalTool()
    {
        Tools.Add(new GroovingExternalTool(0101, GroovingExternalTool.Types.Cutting, 3, TurningGroovingTool.Point.Left));
        await LocalStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }
    private async Task RemoveGroovingExternalTool(GroovingExternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }
    private async Task RemoveLastGroovingExternalTool()
    {
        if (GroovingExternalTools.Count > 0) Tools.Remove(GroovingExternalTools[^1]);
        await LocalStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }

    // GroovingFace
    private async Task AddGroovingFaceTool()
    {
        Tools.Add(new GroovingFaceTool(0101, 3, TurningGroovingTool.Point.Top));
        await LocalStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
    }
    private async Task RemoveGroovingFaceTool(GroovingFaceTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
    }
    private async Task RemoveLastGroovingFaceTool()
    {
        if (GroovingFaceTools.Count > 0) Tools.Remove(GroovingFaceTools[^1]);
        await LocalStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
    }

    // GroovingInternal
    private async Task AddGroovingInternalTool()
    {
        Tools.Add(new GroovingInternalTool(0101, 20, 3, TurningGroovingTool.Point.Left));
        await LocalStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }
    private async Task RemoveGroovingInternalTool(GroovingInternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }
    private async Task RemoveLastGroovingInternalTool()
    {
        if (GroovingInternalTools.Count > 0) Tools.Remove(GroovingInternalTools[^1]);
        await LocalStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }

    // SpecialTurning
    private async Task AddSpecialTurningTool()
    {
        Tools.Add(new TurningSpecialTool(0101, string.Empty));
        await LocalStorage.SetItemAsync(nameof(TurningSpecialTools), TurningSpecialTools);
    }
    private async Task RemoveSpecialTurningTool(TurningSpecialTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningSpecialTools), TurningSpecialTools);
    }
    private async Task RemoveLastSpecialTurningTool()
    {
        if (TurningSpecialTools.Count > 0) Tools.Remove(TurningSpecialTools[^1]);
        await LocalStorage.SetItemAsync(nameof(TurningSpecialTools), TurningSpecialTools);
    }

    // ThreadingExternal
    private async Task AddThreadingExternalTool()
    {
        Tools.Add(new ThreadingExternalTool(0101, 1.5, 1));
        await LocalStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }
    private async Task RemoveThreadingExternalTool(ThreadingExternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }
    private async Task RemoveLastThreadingExternalTool()
    {
        if (ThreadingExternalTools.Count > 0) Tools.Remove(ThreadingExternalTools[^1]);
        await LocalStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }

    // ThreadingInternal
    private async Task AddThreadingInternalTool()
    {
        Tools.Add(new ThreadingInternalTool(0101, 20, 1.5, 1));
        await LocalStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }
    private async Task RemoveThreadingInternalTool(ThreadingInternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }
    private async Task RemoveLastThreadingInternalTool()
    {
        if (ThreadingInternalTools.Count > 0) Tools.Remove(ThreadingInternalTools[^1]);
        await LocalStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }

    // TurningDrilling
    private async Task AddTurningDrillingTool()
    {
        Tools.Add(new TurningDrillingTool(0101, DrillingTool.Types.Solid, 10, 140));
        await LocalStorage.SetItemAsync(nameof(TurningDrillingTools), TurningDrillingTools);
    }
    private async Task RemoveTurningDrillingTool(TurningDrillingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningDrillingTools), TurningDrillingTools);
    }
    private async Task RemoveLastTurningDrillingTool()
    {
        if (TurningDrillingTools.Count > 0) Tools.Remove(TurningDrillingTools[^1]);
        await LocalStorage.SetItemAsync(nameof(TurningDrillingTools), TurningDrillingTools);
    }

    // TurningExternal
    private async Task AddTurningExternalTool()
    {
        Tools.Add(new TurningExternalTool(0101, TurningExternalTool.Types.Bar, 80, 0.8));
        await LocalStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }
    private async Task RemoveTurningExternalTool(TurningExternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }
    private async Task RemoveLastTurningExternalTool()
    {
        if (TurningExternalTools.Count > 0) Tools.Remove(TurningExternalTools[^1]);
        await LocalStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }

    // TurningInternal
    private async Task AddTurningInternalTool()
    {
        Tools.Add(new TurningInternalTool(0101, 25, 80, 0.8));
        await LocalStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }
    private async Task RemoveTurningInternalTool(TurningInternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }
    private async Task RemoveLastTurningInternalTool()
    {
        if (TurningInternalTools.Count > 0) Tools.Remove(TurningInternalTools[^1]);
        await LocalStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }

    // TurningTapping
    private async Task AddTurningTappingTool()
    {
        Tools.Add(new TurningTappingTool(0101, TappingTool.Types.Cutting, 8, 1.25));
        await LocalStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
    }
    private async Task RemoveTurningTappingTool(TurningTappingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
    }
    private async Task RemoveLastTurningTappingTool()
    {
        if (TurningTappingTools.Count > 0) Tools.Remove(TurningTappingTools[^1]);
        await LocalStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
    }

    private static double[] _chamferAngleTemplates = { 30, 45, 60, };

    MudTabs _toolTabs;

    public void OnSwipe(SwipeDirection direction)
    {
        switch (direction)
        {
            case SwipeDirection.LeftToRight:
                {
                    if (_toolTabs.ActivePanelIndex > 0)
                    {
                        _toolTabs.ActivatePanel(_toolTabs.ActivePanelIndex - 1);
                    }
                    break;
                }
            case SwipeDirection.RightToLeft:
                {
                    if (_toolTabs.ActivePanelIndex < Tabs)
                    {
                        _toolTabs.ActivatePanel(_toolTabs.ActivePanelIndex + 1);
                    }
                    break;
                }
        }
    }

     private async Task<IEnumerable<double>> SearchAsync(double value)
    {
    // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

    // if text is null or empty, show complete list
        return string.IsNullOrEmpty(value.ToString(CultureInfo.InvariantCulture)) ? _chamferAngleTemplates : _chamferAngleTemplates.Where(x => x.ToString(CultureInfo.InvariantCulture).Contains(value.ToString(CultureInfo.InvariantCulture), StringComparison.InvariantCultureIgnoreCase));
    }
}
