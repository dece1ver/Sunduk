@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudSwipeArea OnSwipe="@OnSwipe">
    <MudTabs @ref="_toolTabs" Elevation="0">
        @if (MachineType == MachineType.Milling)
        {
            // Общий список
            <MudTabPanel Text="Общий" Style="font-size: x-small">

                @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Milling))
                {
                    <MudText>@tool.Description()</MudText>
                }
            </MudTabPanel>

            <MudTabPanel Text="Расточки" Style="font-size: x-small">
                <MillingBoreToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>

            <MudTabPanel Text="Фасочники" Style="font-size: x-small">
                <MillingChamferToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>
            
            <MudTabPanel Text="Сверла" Style="font-size: x-small">
                <MillingDrillingToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>

            <MudTabPanel Text="Специальный" Style="font-size: x-small">
                <MillingSpecialToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>

            <MudTabPanel Text="Метчики" Style="font-size: x-small">
                <MillingTappingToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>

            <MudTabPanel Text="Резьбофрезы" Style="font-size: x-small">
                <MillingThreadCuttingToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>

            <MudTabPanel Text="Фрезы" Style="font-size: x-small">
                <MillingToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>
        }

        @if (MachineType == MachineType.Turning)
        {
            // GroovingExternal
            <MudTabPanel Text="Канавки наружные" Style="font-size: x-small">
                <GroovingExternalToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>


            // GroovingFace
            <MudTabPanel Text="Канавки торцевые" Style="font-size: x-small">
                 <GroovingFaceToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>


            // GroovingInternal
            <MudTabPanel Text="Канавки внутренние" Style="font-size: x-small">
                <GroovingInternalToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>


            // SpecialTurning
            <MudTabPanel Text="Спец" Style="font-size: x-small">
                <TurningSpecialToolsComponent @bind-Tools="Tools" ReadOnly="false" />
            </MudTabPanel>

            // ThreadingExternal
            <MudTabPanel Text="Резьбовые наружные" Style="font-size: x-small">
                <ThreadingExternalToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>


            // ThreadingInternal
            <MudTabPanel Text="Резьбовые внутренние" Style="font-size: x-small">
                <ThreadingInternalToolsComponent @bind-Tools="Tools" ReadOnly="false"/>
            </MudTabPanel>


            // TurningDrilling
            <MudTabPanel Text="Сверла" Style="font-size: x-small">
                <TurningDrillingToolsComponent @bind-Tools="Tools" ReadOnly="false" />
            </MudTabPanel>


            // TurningExternal
            <MudTabPanel Text="Точение наружное" Style="font-size: x-small">
                <TurningExternalToolsComponent @bind-Tools="Tools" ReadOnly="false" />
            </MudTabPanel>

            // TurningInternal
            <MudTabPanel Text="Точение внутреннее" Style="font-size: x-small">
                <TurningInternalToolsComponent @bind-Tools="Tools" ReadOnly="false" />
            </MudTabPanel>


            // TurningTapping
            <MudTabPanel Text="Метчики" Style="font-size: x-small">
                <TurningTappingToolsComponent @bind-Tools="Tools" ReadOnly="false" />
            </MudTabPanel>
        }
    </MudTabs>
</MudSwipeArea>

@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter]
    public MachineType MachineType { get; set; }

    public int Tabs => MachineType == MachineType.Turning ? 9 : 4;

    private static double[] _chamferAngleTemplates = { 30, 45, 60, };

    MudTabs _toolTabs;

    public void OnSwipe(SwipeDirection direction)
    {
        switch (direction)
        {
            case SwipeDirection.LeftToRight:
                {
                    if (_toolTabs.ActivePanelIndex > 0)
                    {
                        _toolTabs.ActivatePanel(_toolTabs.ActivePanelIndex - 1);
                    }
                    break;
                }
            case SwipeDirection.RightToLeft:
                {
                    if (_toolTabs.ActivePanelIndex < Tabs)
                    {
                        _toolTabs.ActivatePanel(_toolTabs.ActivePanelIndex + 1);
                    }
                    break;
                }
        }
    }

     private async Task<IEnumerable<double>> SearchAsync(double value)
    {
    // In real life use an asynchronous function for fetching data from an api.
        await Task.Delay(5);

    // if text is null or empty, show complete list
        return string.IsNullOrEmpty(value.ToString(CultureInfo.InvariantCulture)) ? _chamferAngleTemplates : _chamferAngleTemplates.Where(x => x.ToString(CultureInfo.InvariantCulture).Contains(value.ToString(CultureInfo.InvariantCulture), StringComparison.InvariantCultureIgnoreCase));
    }
}
