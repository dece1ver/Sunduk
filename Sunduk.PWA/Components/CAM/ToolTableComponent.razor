@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudSwipeArea OnSwipe="@OnSwipe">
    <MudTabs @ref="toolTabs" Elevation="0">
        @if (MachineType == MachineType.Milling)
        {
            #region MillingDrilling
            <MudTabPanel Text="Сверла" Style="font-size: x-small">
                <MudTable Items="MillingDrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedMillingDrillingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                        @if (context.Type == MillingDrillingTool.Types.Solid)
                            {
                            <MudTd DataLabel="Тип">Твердосплавное</MudTd>
                            }
                        @if (context.Type == MillingDrillingTool.Types.Insert)
                            {
                            <MudTd DataLabel="Тип">С пластинами</MudTd>
                            }
                        @if (context.Type == MillingDrillingTool.Types.Tip)
                            {
                            <MudTd DataLabel="Тип">С головкой</MudTd>
                            }
                        @if (context.Type == MillingDrillingTool.Types.Rapid)
                            {
                            <MudTd DataLabel="Тип">Быстрорез</MudTd>
                            }
                        @if (context.Type == MillingDrillingTool.Types.Center)
                            {
                            <MudTd DataLabel="Тип">Центровочное</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="MillingDrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@MillingDrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                                <MudSelectItem Value="@MillingDrillingTool.Types.Insert">С пластинами</MudSelectItem>
                                <MudSelectItem Value="@MillingDrillingTool.Types.Tip">С головкой</MudSelectItem>
                                <MudSelectItem Value="@MillingDrillingTool.Types.Rapid">Быстрорез</MudSelectItem>
                                <MudSelectItem Value="@MillingDrillingTool.Types.Center">Центровочное</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingDrillingTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveMillingDrillingTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region MillingTapping
            <MudTabPanel Text="Метчики" Style="font-size: x-small">
                <MudTable Items="MillingTappingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedMillingTappingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        @if (context.Type == MillingTappingTool.Types.Cutting)
                            {
                            <MudTd DataLabel="Тип">Нарезной</MudTd>
                            }
                        @if (context.Type == MillingTappingTool.Types.Forming)
                            {
                            <MudTd DataLabel="Тип">Раскатник</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="MillingTappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@MillingTappingTool.Types.Cutting">Нарезной</MudSelectItem>
                                <MudSelectItem Value="@MillingTappingTool.Types.Forming">Раскатник</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingTappingTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveMillingTappingTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region Milling
            <MudTabPanel Text="Фрезы" Style="font-size: x-small">
                <MudTable Items="MillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedMillingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Зубья</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Рабочая глубина</MudTh>
                        <MudTh>Радиус при вершине</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Зубья">@context.Edges</MudTd>
                        @if (context.Type == MillingTool.Types.Solid)
                            {
                            <MudTd DataLabel="Тип">Твердосплавная</MudTd>
                            }
                        @if (context.Type == MillingTool.Types.Insert)
                            {
                            <MudTd DataLabel="Тип">С пластинами</MudTd>
                            }
                        <MudTd DataLabel="Рабочая глубина">@context.CuttingLength.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус при вершине">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Зубья">
                            <MudTextField @bind-Value="@context.Edges" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.EdgesConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="MillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@MillingTool.Types.Solid">Твердосплавная</MudSelectItem>
                                <MudSelectItem Value="@MillingTool.Types.Insert">С пластинами</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Рабочая глубина">
                            <MudTextField @bind-Value="@context.CuttingLength" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус при вершине">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddMillingTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveMillingTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion
        }

        @if (MachineType == MachineType.Turning)
        {
            #region GroovingExternal
            <MudTabPanel Text="Канавки наружные" Style="font-size: x-small">
                <MudTable Items="GroovingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingExternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Ширина</MudTh>
                        <MudTh>Радиус</MudTh>
                        <MudTh>Привязка</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        @if (context.Type == GroovingExternalTool.Types.Grooving)
                            {
                            <MudTd DataLabel="Тип">Канавочный</MudTd>
                            }
                        @if (context.Type == GroovingExternalTool.Types.Cutting)
                            {
                            <MudTd DataLabel="Тип">Отрезной</MudTd>
                            }
                        @if (context.Type == GroovingExternalTool.Types.Blade)
                            {
                            <MudTd DataLabel="Тип">Лезвие</MudTd>
                            }
                        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingExternalTool.Point.Left ? "Как проходной" : "Как отрезной")</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="GroovingExternalTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@GroovingExternalTool.Types.Grooving">Канавочный</MudSelectItem>
                                <MudSelectItem Value="@GroovingExternalTool.Types.Cutting">Отрезной</MudSelectItem>
                                <MudSelectItem Value="@GroovingExternalTool.Types.Blade">Лезвие</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Привязка">
                            <MudSelect T="GroovingExternalTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@GroovingExternalTool.Point.Left">Как проходной</MudSelectItem>
                                <MudSelectItem Value="@GroovingExternalTool.Point.Right">Как отрезной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingExternalTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingExternalTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region GroovingFace
            <MudTabPanel Text="Канавки торцевые" Style="font-size: x-small">
                <MudTable Items="GroovingFaceTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingFaceTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Ширина</MudTh>
                        <MudTh>Радиус</MudTh>
                        <MudTh>Привязка</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingFaceTool.Point.Bottom ? "Как проходной" : "Как расточной")</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Привязка">
                            <MudSelect T="GroovingFaceTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@GroovingFaceTool.Point.Bottom">Как проходной</MudSelectItem>
                                <MudSelectItem Value="@GroovingFaceTool.Point.Top">Как расточной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingFaceTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingFaceTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region GroovingInternal
            <MudTabPanel Text="Канавки внутренние" Style="font-size: x-small">
                <MudTable Items="GroovingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingInternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Ширина</MudTh>
                        <MudTh>Радиус</MudTh>
                        <MudTh>Привязка</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingInternalTool.Point.Left ? "Как расточной" : "Как отрезной")</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Ширина">
                            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус">
                            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Привязка">
                            <MudSelect T="GroovingInternalTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@GroovingInternalTool.Point.Left">Как расточной</MudSelectItem>
                                <MudSelectItem Value="@GroovingInternalTool.Point.Right">Как отрезной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingInternalTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingInternalTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region SpecialTurning
            <MudTabPanel Text="Спец инструмент" Style="font-size: x-small">
                <MudTable Items="SpecialTurningTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedSpecialTurningTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Описание</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Описание">@context.Name</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Описание">
                            <MudTextField @bind-Value="@context.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddSpecialTurningTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveSpecialTurningTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region ThreadingExternal
            <MudTabPanel Text="Резьбовые наружные" Style="font-size: x-small">
                <MudTable Items="ThreadingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedThreadingExternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Угол опорной пластины</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол опорной пластины">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingExternalTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveThreadingExternalTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region ThreadingInternal
            <MudTabPanel Text="Резьбовые внутренние" Style="font-size: x-small">
                <MudTable Items="ThreadingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedThreadingInternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Угол опорной пластины</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол опорной пластины">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingInternalTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveThreadingInternalTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region TurningDrilling
            <MudTabPanel Text="Сверла" Style="font-size: x-small">
                <MudTable Items="TurningDrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningDrillingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                        @if (context.Type == TurningDrillingTool.Types.Solid)
                            {
                            <MudTd DataLabel="Тип">Твердосплавное</MudTd>
                            }
                        @if (context.Type == TurningDrillingTool.Types.Insert)
                            {
                            <MudTd DataLabel="Тип">С пластинами</MudTd>
                            }
                        @if (context.Type == TurningDrillingTool.Types.Tip)
                            {
                            <MudTd DataLabel="Тип">С головкой</MudTd>
                            }
                        @if (context.Type == TurningDrillingTool.Types.Rapid)
                            {
                            <MudTd DataLabel="Тип">Быстрорез</MudTd>
                            }
                        @if (context.Type == TurningDrillingTool.Types.Center)
                            {
                            <MudTd DataLabel="Тип">Центровочное</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="TurningDrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TurningDrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                                <MudSelectItem Value="@TurningDrillingTool.Types.Insert">С пластинами</MudSelectItem>
                                <MudSelectItem Value="@TurningDrillingTool.Types.Tip">С головкой</MudSelectItem>
                                <MudSelectItem Value="@TurningDrillingTool.Types.Rapid">Быстрорез</MudSelectItem>
                                <MudSelectItem Value="@TurningDrillingTool.Types.Center">Центровочное</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningDrillingTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningDrillingTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region TurningExternal
            <MudTabPanel Text="Точение наружное" Style="font-size: x-small">
                <MudTable Items="TurningExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningExternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Описание</MudTh>
                        <MudTh>Угол кромки</MudTh>
                        <MudTh>Радиус кромки</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Тип">@(context.Type == TurningExternalTool.Types.Bar ? "Проходной" : "Подрезной")</MudTd>
                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="TurningExternalTool.Types" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Type" Required>
                                <MudSelectItem Value="@TurningExternalTool.Types.Bar">Проходной</MudSelectItem>
                                <MudSelectItem Value="@TurningExternalTool.Types.Face">Подрезной</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Угол кромки">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус кромки">
                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Hand" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningExternalTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningExternalTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region TurningInternal
            <MudTabPanel Text="Точение внутреннее" Style="font-size: x-small">
                <MudTable Items="TurningInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningInternalTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Угол кромки</MudTh>
                        <MudTh>Радиус кромки</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Угол кромки">
                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Радиус кромки">
                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningInternalTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningInternalTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion

            #region TurningTapping
            <MudTabPanel Text="Метчики" Style="font-size: x-small">
                <MudTable Items="TurningTappingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningTappingTool" Elevation="0">
                    <HeaderContent>
                        <MudTh>Позиция</MudTh>
                        <MudTh>Диаметр</MudTh>
                        <MudTh>Шаг</MudTh>
                        <MudTh>Тип</MudTh>
                        <MudTh>Исполнение</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                        @if (context.Type == TurningTappingTool.Types.Cutting)
                            {
                            <MudTd DataLabel="Тип">Нарезной</MudTd>
                            }
                        @if (context.Type == TurningTappingTool.Types.Forming)
                            {
                            <MudTd DataLabel="Тип">Раскатник</MudTd>
                            }
                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                    </RowTemplate>
                    <RowEditingTemplate>
                        <MudTd DataLabel="Позиция">
                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                        </MudTd>
                        <MudTd DataLabel="Диаметр">
                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Шаг">
                            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                        </MudTd>
                        <MudTd DataLabel="Тип">
                            <MudSelect T="TurningTappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                <MudSelectItem Value="@TurningTappingTool.Types.Cutting">Нарезной</MudSelectItem>
                                <MudSelectItem Value="@TurningTappingTool.Types.Forming">Раскатник</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                        <MudTd DataLabel="Исполнение">
                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                            </MudSelect>
                        </MudTd>
                    </RowEditingTemplate>
                </MudTable>
                <div class="mt-3 ml-0 mr-4 d-flex">
                    <div class="d-flex ml-auto align-center">
                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningTappingTool" />
                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningTappingTool" />
                    </div>
                </div>
            </MudTabPanel>
            #endregion
        }
    </MudTabs>
</MudSwipeArea>

@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter]
    public MachineType MachineType { get; set; }

    public int Tabs => MachineType == MachineType.Turning ? 9 : 2;

    #region Список сверел (фрезерный)
    public List<MillingDrillingTool> MillingDrillingTools
    {
        get
        {
            List<MillingDrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is MillingDrillingTool))
            {
                result.Add(item as MillingDrillingTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is MillingDrillingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список метчиков (фрезерный)
    public List<MillingTappingTool> MillingTappingTools
    {
        get
        {
            List<MillingTappingTool> result = new();
            foreach (var item in Tools.Where(x => x is MillingTappingTool))
            {
                result.Add(item as MillingTappingTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is MillingTappingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список фрез
    public List<MillingTool> MillingTools
    {
        get
        {
            List<MillingTool> result = new();
            foreach (var item in Tools.Where(x => x is MillingTool))
            {
                result.Add(item as MillingTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is MillingTool);
            Tools.AddRange(value);
        }
    }
    #endregion


    #region Список наружных канавочных
    public List<GroovingExternalTool> GroovingExternalTools
    {
        get
        {
            List<GroovingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingExternalTool))
            {
                result.Add(item as GroovingExternalTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is GroovingExternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список торцевых канавочных
    public List<GroovingFaceTool> GroovingFaceTools
    {
        get
        {
            List<GroovingFaceTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingFaceTool))
            {
                result.Add(item as GroovingFaceTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is GroovingFaceTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список внутренних канавочных
    public List<GroovingInternalTool> GroovingInternalTools
    {
        get
        {
            List<GroovingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingInternalTool))
            {
                result.Add(item as GroovingInternalTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is GroovingInternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список спец инструмента (токарный)
    public List<SpecialTurningTool> SpecialTurningTools
    {
        get
        {
            List<SpecialTurningTool> result = new();
            foreach (var item in Tools.Where(x => x is SpecialTurningTool))
            {
                result.Add(item as SpecialTurningTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is SpecialTurningTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список наружных резьбовых
    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get
        {
            List<ThreadingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingExternalTool))
            {
                result.Add(item as ThreadingExternalTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is ThreadingExternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список внутренних резьбовых
    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get
        {
            List<ThreadingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingInternalTool))
            {
                result.Add(item as ThreadingInternalTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is ThreadingInternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список сверел (токарный)
    public List<TurningDrillingTool> TurningDrillingTools
    {
        get
        {
            List<TurningDrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningDrillingTool))
            {
                result.Add(item as TurningDrillingTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is TurningDrillingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список наружных проходных
    public List<TurningExternalTool> TurningExternalTools
    {
        get
        {
            List<TurningExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningExternalTool))
            {
                result.Add(item as TurningExternalTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is TurningExternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список расточных
    public List<TurningInternalTool> TurningInternalTools
    {
        get
        {
            List<TurningInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningInternalTool))
            {
                result.Add(item as TurningInternalTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is TurningInternalTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    #region Список метчиков (токарный)
    public List<TurningTappingTool> TurningTappingTools
    {
        get
        {
            List<TurningTappingTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningTappingTool))
            {
                result.Add(item as TurningTappingTool);
            }
            return result ?? new();
        }
        set
        {
            Tools.RemoveAll(x => x is TurningTappingTool);
            Tools.AddRange(value);
        }
    }
    #endregion

    private MillingDrillingTool selectedMillingDrillingTool = null;
    private MillingTappingTool selectedMillingTappingTool = null;
    private MillingTool selectedMillingTool = null;

    private GroovingExternalTool selectedGroovingExternalTool = null;
    private GroovingFaceTool selectedGroovingFaceTool = null;
    private GroovingInternalTool selectedGroovingInternalTool = null;
    private SpecialTurningTool selectedSpecialTurningTool = null;
    private ThreadingExternalTool selectedThreadingExternalTool = null;
    private ThreadingInternalTool selectedThreadingInternalTool = null;
    private TurningDrillingTool selectedTurningDrillingTool = null;
    private TurningExternalTool selectedTurningExternalTool = null;
    private TurningInternalTool selectedTurningInternalTool = null;
    private TurningTappingTool selectedTurningTappingTool = null;

    // MillingDrilling
    private async Task AddMillingDrillingTool()
    {
        Tools.Add(new MillingDrillingTool(1, MillingDrillingTool.Types.Solid, 10, 140));
        await localStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
    }
    private async Task RemoveMillingDrillingTool()
    {
        if (MillingDrillingTools.Count > 0) Tools.Remove(MillingDrillingTools[^1]);
        await localStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
    }

    // MillingTapping
    private async Task AddMillingTappingTool()
    {
        Tools.Add(new MillingTappingTool(1, MillingTappingTool.Types.Cutting, 8, 1.25));
        await localStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
    }
    private async Task RemoveMillingTappingTool()
    {
        if (MillingTappingTools.Count > 0) Tools.Remove(MillingTappingTools[^1]);
        await localStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
    }

    //Milling
    private async Task AddMillingTool()
    {
        Tools.Add(new MillingTool(1, MillingTool.Types.Solid, 12));
        await localStorage.SetItemAsync(nameof(MillingTools), MillingTools);
    }
    private async Task RemoveMillingTool()
    {
        if (MillingTools.Count > 0) Tools.Remove(MillingTools[^1]);
        await localStorage.SetItemAsync(nameof(MillingTools), MillingTools);
    }

    // GroovingExternal
    private async Task AddGroovingExternalTool()
    {
        Tools.Add(new GroovingExternalTool(0101, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Left));
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }
    private async Task RemoveGroovingExternalTool()
    {
        if (GroovingExternalTools.Count > 0) Tools.Remove(GroovingExternalTools[^1]);
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }

    // GroovingFace
    private async Task AddGroovingFaceTool()
    {
        Tools.Add(new GroovingFaceTool(0101, 3, GroovingFaceTool.Point.Top));
        await localStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
    }
    private async Task RemoveGroovingFaceTool()
    {
        if (GroovingFaceTools.Count > 0) Tools.Remove(GroovingFaceTools[^1]);
        await localStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
    }

    // GroovingInternal
    private async Task AddGroovingInternalTool()
    {
        Tools.Add(new GroovingInternalTool(0101, 20, 3, GroovingInternalTool.Point.Left));
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }
    private async Task RemoveGroovingInternalTool()
    {
        if (GroovingInternalTools.Count > 0) Tools.Remove(GroovingInternalTools[^1]);
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }

    // SpecialTurning
    private async Task AddSpecialTurningTool()
    {
        Tools.Add(new SpecialTurningTool(0101, "UPOR"));
        await localStorage.SetItemAsync(nameof(SpecialTurningTools), SpecialTurningTools);
    }
    private async Task RemoveSpecialTurningTool()
    {
        if (SpecialTurningTools.Count > 0) Tools.Remove(SpecialTurningTools[^1]);
        await localStorage.SetItemAsync(nameof(SpecialTurningTools), SpecialTurningTools);
    }

    // ThreadingExternal
    private async Task AddThreadingExternalTool()
    {
        Tools.Add(new ThreadingExternalTool(0101, 1.5, 1));
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }
    private async Task RemoveThreadingExternalTool()
    {
        if (ThreadingExternalTools.Count > 0) Tools.Remove(ThreadingExternalTools[^1]);
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }

    // ThreadingInternal
    private async Task AddThreadingInternalTool()
    {
        Tools.Add(new ThreadingInternalTool(0101, 20, 1.5, 1));
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }
    private async Task RemoveThreadingInternalTool()
    {
        if (ThreadingInternalTools.Count > 0) Tools.Remove(ThreadingInternalTools[^1]);
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }

    // TurningDrilling
    private async Task AddTurningDrillingTool()
    {
        Tools.Add(new TurningDrillingTool(0101, TurningDrillingTool.Types.Solid, 10, 140));
        await localStorage.SetItemAsync(nameof(TurningDrillingTools), TurningDrillingTools);
    }
    private async Task RemoveTurningDrillingTool()
    {
        if (TurningDrillingTools.Count > 0) Tools.Remove(TurningDrillingTools[^1]);
        await localStorage.SetItemAsync(nameof(TurningDrillingTools), TurningDrillingTools);
    }

    // TurningExternal
    private async Task AddTurningExternalTool()
    {
        Tools.Add(new TurningExternalTool(0101, TurningExternalTool.Types.Bar, 80, 0.8));
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }
    private async Task RemoveTurningExternalTool()
    {
        if (TurningExternalTools.Count > 0) Tools.Remove(TurningExternalTools[^1]);
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }

    // TurningInternal
    private async Task AddTurningInternalTool()
    {
        Tools.Add(new TurningInternalTool(0101, 25, 80, 0.8));
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }
    private async Task RemoveTurningInternalTool()
    {
        if (TurningInternalTools.Count > 0) Tools.Remove(TurningInternalTools[^1]);
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }

    // TurningTapping
    private async Task AddTurningTappingTool()
    {
        Tools.Add(new TurningTappingTool(0101, TurningTappingTool.Types.Cutting, 8, 1.25));
        await localStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
    }
    private async Task RemoveTurningTappingTool()
    {
        if (TurningTappingTools.Count > 0) Tools.Remove(TurningTappingTools[^1]);
        await localStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
    }

    MudTabs toolTabs;

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            if (toolTabs.ActivePanelIndex > 0)
            {
                toolTabs.ActivatePanel(toolTabs.ActivePanelIndex - 1);
            }
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            if (toolTabs.ActivePanelIndex < Tabs)
            {
                toolTabs.ActivatePanel(toolTabs.ActivePanelIndex + 1);
            }
        }
    }
}
