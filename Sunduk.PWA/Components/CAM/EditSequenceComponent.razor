<MudGrid Class="mt-2" Spacing="1">
    @switch (Sequence)
    {
        case TurningCustomSequence turningCustomSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x =>
                                                      x is SpecialTurningTool ||
                                                      x is TurningExternalTool ||
                                                      x is TurningInternalTool ||
                                                      x is GroovingExternalTool ||
                                                      x is GroovingInternalTool ||
                                                      x is ThreadingExternalTool ||
                                                      x is ThreadingInternalTool ||
                                                      x is TurningDrillingTool ||
                                                      x is TurningTappingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="CustomOperation" Label="Произвольная обработка" T="string" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Lines="@(CustomOperation is null ? 1 : CustomOperation.Count(x => x == '\n') + 2)" />
            </MudItem>
            break;
        case MillingCustomSequence millingCustomSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x =>
                                                      x is MillingDrillingTool ||
                                                      x is MillingTappingTool ||
                                                      x is MillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип охлаждения" T="Coolant" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Coolant">
                    <MudSelectItem Value="@(Coolant.General)">Обычный</MudSelectItem>
                    <MudSelectItem Value="@(Coolant.Through)">Через шпиндель</MudSelectItem>
                    <MudSelectItem Value="@(Coolant.Blow)">Обдув</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип системы координат" T="bool" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Polar">
                    <MudSelectItem Value="false">Декартова</MudSelectItem>
                    <MudSelectItem Value="true">Полярная</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="CustomOperation" Label="Произвольная обработка" T="string" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Lines="@(CustomOperation is null ? 1 : CustomOperation.Count(x => x == '\n') + 2)" />
            </MudItem>
            break;
        case LimiterSequence limiterSequence:
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is Tool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Label="Диаметр подвода" @bind-Value="LimiterApproachDiameter" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case FacingSequence facingSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case RoughFacingSequence roughFacingSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case RoughFacingCycleSequence roughFacingCycleSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case FinishFacingSequence finishFacingSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case FinishFacingCycleSequence finishFacingCycleSequence:
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="RepeatableRoughFacingSequence" Label="Черновая торцовка" T="Sequence" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var seq in Program)
                    {
                        if (seq is RoughFacingSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                        if (seq is RoughFacingCycleSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                        if (seq is FacingSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            break;
        case TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Margin="Margin.Dense" Variant="Variant.Filled">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>

            break;
        case TurningPeckDrillingSequence turningPeckDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingPeckDrillingSequence millingPeckDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case ThreadCuttingSequence threadCuttingSequence:
            if (threadCuttingSequence.Type == CuttingType.External)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Margin="Margin.Dense" Variant="Variant.Filled">
                        @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            if (threadCuttingSequence.Type == CuttingType.Internal)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                        @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ThreadType" Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="CuttingType.External">Наружная</MudSelectItem>
                    <MudSelectItem Value="CuttingType.Internal">Внутренняя</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ThreadStandart" Label="Тип" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="ThreadStandart.Metric">Метрическая 60°</MudSelectItem>
                    <MudSelectItem Value="ThreadStandart.BSPP">Трубная 55°</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Диаметр" @bind-Value="ThreadDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Шаг резьбы" @bind-Value="ThreadDiameter" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Начало" @bind-Value="ThreadStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Конец" @bind-Value="ThreadEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningExternalGroovingSequence turningExternalGroovingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => (x is GroovingExternalTool || x is GroovingInternalTool)))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Начальный диаметр" @bind-Value="ExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечный диаметр" @bind-Value="InternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечная точка" @bind-Value="CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Шаг" @bind-Value="StepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Величина притупления" @bind-Value="OuterBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
             <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Галтель" @bind-Value="InnerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    @*<MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>*@
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="InnerBluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                </MudSelect>
            </MudItem>
            break;
        case TurningCutOffSequence turningCutOffSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Начальный диаметр" @bind-Value="ExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечный диаметр" @bind-Value="InternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечная точка" @bind-Value="CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Шаг" @bind-Value="StepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        default:
            break;
    }
    <MudItem Class="mt-4" xs="12">
        <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Style="font-family: 'Roboto Mono', monospace; font-size: medium;" Variant="Variant.Filled" Text="@("\n" + ExampleText.Trim('\n'))" Lines="@(ExampleText.Trim('\n').Count(x => x == '\n') + 3)" />
    </MudItem>
</MudGrid>

<MudItem Class="d-flex flex-row-reverse py-0 px-0 mt-4">
    <MudButton Variant="Variant.Outlined" Size="Size.Large"
               EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary"
               OnClick="Submit">Подтвердить</MudButton>
</MudItem>

@code{
    protected override void OnInitialized()
    {
        switch (Sequence)
        {
            // фрезерные
            case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
                Tool = millingHighSpeedDrillingSequence.Tool;
                DrillStart = millingHighSpeedDrillingSequence.StartZ;
                DrillEnd = millingHighSpeedDrillingSequence.EndZ;
                Holes = millingHighSpeedDrillingSequence.Holes;
                Polar = millingHighSpeedDrillingSequence.Polar;
                break;
            case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
                Tool = millingPeckDeepDrillingSequence.Tool;
                DrillStart = millingPeckDeepDrillingSequence.StartZ;
                DrillEnd = millingPeckDeepDrillingSequence.EndZ;
                DrillDepth = millingPeckDeepDrillingSequence.Depth;
                Holes = millingPeckDeepDrillingSequence.Holes;
                Polar = millingPeckDeepDrillingSequence.Polar;
                break;
            case MillingPeckDrillingSequence millingPeckDrillingSequence:
                Tool = millingPeckDrillingSequence.Tool;
                DrillStart = millingPeckDrillingSequence.StartZ;
                DrillEnd = millingPeckDrillingSequence.EndZ;
                DrillDepth = millingPeckDrillingSequence.Depth;
                Holes = millingPeckDrillingSequence.Holes;
                Polar = millingPeckDrillingSequence.Polar;
                break;
            case MillingTappingSequence millingTappingSequence:
                Tool = millingTappingSequence.Tool;
                TappingCutSpeed = millingTappingSequence.CutSpeed;
                ThreadStart = millingTappingSequence.StartZ;
                ThreadEnd = millingTappingSequence.EndZ;
                Holes = millingTappingSequence.Holes;
                Polar = millingTappingSequence.Polar;
                break;
            case MillingCustomSequence millingCustomSequence:
                Tool = millingCustomSequence.Tool;
                CustomOperation = millingCustomSequence.CustomOperation;
                Coolant = millingCustomSequence.Coolant;
                Polar = millingCustomSequence.Polar;
                break;

            // токарные
            case FacingSequence facingSequence:
                Tool = facingSequence.Tool;
                ExternalDiameter = facingSequence.ExternalDiameter;
                RoughStockAllow = facingSequence.RoughStockAllow;
                ProfStockAllow = facingSequence.ProfStockAllow;
                StepOver = facingSequence.StepOver;
                CornerBlunt = facingSequence.CornerBlunt;
                CustomChamferAngle = facingSequence.BluntCustomAngle;
                BluntType = facingSequence.BluntType;
                break;
            case FinishFacingCycleSequence finishFacingCycleSequence:
                Tool = finishFacingCycleSequence.Tool;
                RepeatableRoughFacingSequence = finishFacingCycleSequence.RoughSequence;
                break;
            case FinishFacingSequence finishFacingSequence:
                Tool = finishFacingSequence.Tool;
                ExternalDiameter = finishFacingSequence.ExternalDiameter;
                ProfStockAllow = finishFacingSequence.ProfStockAllow;
                CornerBlunt = finishFacingSequence.CornerBlunt;
                CustomChamferAngle = finishFacingSequence.BluntCustomAngle;
                BluntType = finishFacingSequence.BluntType;
                break;
            case LimiterSequence limiterSequence:
                Tool = limiterSequence.Tool;
                LimiterApproachDiameter = limiterSequence.ExternalDiameter;
                break;
            case RoughFacingCycleSequence roughFacingCycleSequence:
                Tool = roughFacingCycleSequence.Tool;
                ExternalDiameter = roughFacingCycleSequence.ExternalDiameter;
                RoughStockAllow = roughFacingCycleSequence.RoughStockAllow;
                ProfStockAllow = roughFacingCycleSequence.ProfStockAllow;
                StepOver = roughFacingCycleSequence.StepOver;
                CornerBlunt = roughFacingCycleSequence.CornerBlunt;
                CustomChamferAngle = roughFacingCycleSequence.BluntCustomAngle;
                BluntType = roughFacingCycleSequence.BluntType;
                break;
            case RoughFacingSequence roughFacingSequence:
                Tool = roughFacingSequence.Tool;
                ExternalDiameter = roughFacingSequence.ExternalDiameter;
                RoughStockAllow = roughFacingSequence.RoughStockAllow;
                ProfStockAllow = roughFacingSequence.ProfStockAllow;
                StepOver = roughFacingSequence.StepOver;
                CornerBlunt = roughFacingSequence.CornerBlunt;
                CustomChamferAngle = roughFacingSequence.BluntCustomAngle;
                BluntType = roughFacingSequence.BluntType;
                break;
            case ThreadCuttingSequence threadCuttingSequence:
                Tool = threadCuttingSequence.Tool;
                ThreadDiameter = threadCuttingSequence.ThreadDiameter;
                ThreadPitch = threadCuttingSequence.ThreadPitch;
                ThreadStart = threadCuttingSequence.StartZ;
                ThreadEnd = threadCuttingSequence.EndZ;
                break;
            case TurningExternalGroovingSequence turningExternalGroovingSequence:
                Tool = turningExternalGroovingSequence.Tool;
                ExternalDiameter = turningExternalGroovingSequence.ExternalDiameter;
                InternalDiameter = turningExternalGroovingSequence.InternalDiameter;
                Width = turningExternalGroovingSequence.Width;
                StepOver = turningExternalGroovingSequence.StepOver;
                CuttingPoint = turningExternalGroovingSequence.CuttingPoint;
                OuterBlunt = turningExternalGroovingSequence.OuterCornerBlunt;
                InnerBlunt = turningExternalGroovingSequence.InnerCornerBlunt;
                BluntType = turningExternalGroovingSequence.OuterBluntType;
                InnerBluntType = turningExternalGroovingSequence.InnerBluntType;
                break;
            case TurningCutOffSequence turningCutOffSequence:
                Tool = turningCutOffSequence.Tool;
                ExternalDiameter = turningCutOffSequence.ExternalDiameter;
                InternalDiameter = turningCutOffSequence.InternalDiameter;
                StepOver = turningCutOffSequence.StepOver;
                CuttingPoint = turningCutOffSequence.CuttingPoint;
                CornerBlunt = turningCutOffSequence.CornerBlunt;
                BluntType = turningCutOffSequence.BluntType;
                CustomChamferAngle = turningCutOffSequence.BluntCustomAngle;
                CustomChamferBlunt = turningCutOffSequence.BluntCustomRadius;
                break;
            case TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence:
                Tool = turningHighSpeedDrillingSequence.Tool;
                DrillStart = turningHighSpeedDrillingSequence.StartZ;
                DrillEnd = turningHighSpeedDrillingSequence.EndZ;
                break;
            case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
                Tool = turningPeckDeepDrillingSequence.Tool;
                DrillStart = turningPeckDeepDrillingSequence.StartZ;
                DrillEnd = turningPeckDeepDrillingSequence.EndZ;
                DrillDepth = turningPeckDeepDrillingSequence.Depth;
                break;
            case TurningPeckDrillingSequence turningPeckDrillingSequence:
                Tool = turningPeckDrillingSequence.Tool;
                DrillStart = turningPeckDrillingSequence.StartZ;
                DrillEnd = turningPeckDrillingSequence.EndZ;
                DrillDepth = turningPeckDrillingSequence.Depth;
                break;
            case TurningTappingSequence turningTappingSequence:
                Tool = turningTappingSequence.Tool;
                TappingCutSpeed = turningTappingSequence.CutSpeed;
                ThreadStart = turningTappingSequence.StartZ;
                ThreadEnd = turningTappingSequence.EndZ;
                break;
            case TurningCustomSequence turningCustomSequence:
                Tool = turningCustomSequence.Tool;
                CustomOperation = turningCustomSequence.CustomOperation;
                break;
            default:
                break;
        }
    }

    [Parameter] public Mode Mode { get; set; }
    [Parameter] public EventCallback<Mode> ModeChanged { get; set; }
    [Parameter] public List<Tool> Tools { get; set; }
    [Parameter] public List<Sequence> Program { get; set; }
    [Parameter] public Sequence Sequence { get; set; }

    public Sequence CurrentSequence { get; set; } // написать как в добавлении, чтобы дубли убрать
    // или нет

    public Tool Tool { get; set; }
    public string CustomOperation { get; set; }
    public Coolant Coolant { get; set; }
    public bool Polar { get; set; }

    public double LimiterApproachDiameter { get; set; }

    public Sequence RepeatableRoughFacingSequence { get; set; }
    bool _calcChamferDiameter = true;

    private double ExternalDiameter { get; set; }
    private double InternalDiameter { get; set; }

    private double StepOver { get; set; }

    private double Width { get; set; }

    private double RoughStockAllow { get; set; }

    private double ProfStockAllow { get; set; }

    public double OuterBlunt { get; set; }
    public double InnerBlunt { get; set; }

    private double _cornerBlunt;
    private double CornerBlunt
    {
        get => _cornerBlunt;
        set
        {
            _cornerBlunt = value;
            if (_calcChamferDiameter)
            {
                CustomChamferDiameter = (ExternalDiameter - 2 * CornerBlunt * Math.Tan(CustomChamferAngle.Radians()));
            }
        }
    }

    private Blunt BluntType { get; set; }
    private Blunt InnerBluntType { get; set; }

    private double _customChamferAngle;
    private double CustomChamferAngle
    {
        get => _customChamferAngle;
        set
        {
            _customChamferAngle = value;
            if (_calcChamferDiameter)
            {
                CustomChamferDiameter = (ExternalDiameter - 2 * CornerBlunt * Math.Tan(CustomChamferAngle.Radians()));
            }
            else
            {
                CornerBlunt = ((ExternalDiameter - CustomChamferDiameter) / 2 * Math.Tan((90 - CustomChamferAngle).Radians()));
            }
        }
    }

    private double CustomChamferBlunt { get; set; }

    private double _customChamferDiameter;
    private double CustomChamferDiameter
    {
        get => _customChamferDiameter;
        set
        {
            _customChamferDiameter = value;
            if (!_calcChamferDiameter)
            {
                CornerBlunt = ((ExternalDiameter - CustomChamferDiameter) / 2 * Math.Tan((90 - CustomChamferAngle).Radians()));
            }
        }
    }

    public double DrillStart { get; set; }
    public double DrillEnd { get; set; }
    public double DrillDepth { get; set; }

    public List<Hole> Holes { get; set; }

    public CuttingType ThreadType { get; set; }
    public ThreadStandart ThreadStandart { get; set; }
    public double ThreadDiameter { get; set; }
    public double ThreadPitch { get; set; }
    public double ThreadStart { get; set; }
    public double ThreadEnd { get; set; }

    private double CuttingPoint { get; set; }

    public double TappingCutSpeed { get; set; }

    #region Пример
    public string ExampleText
    {
        get
        {
            return Sequence switch
            {
                // фрезерные
                MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence => new MillingHighSpeedDrillingSequence(
                    millingHighSpeedDrillingSequence.Machine,
                    millingHighSpeedDrillingSequence.Material,
                    Tool as MillingDrillingTool,
                    DrillStart,
                    DrillEnd,
                    millingHighSpeedDrillingSequence.Holes,
                    millingHighSpeedDrillingSequence.Polar)
                .Operation,

                MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence => new MillingPeckDeepDrillingSequence(
                    millingPeckDeepDrillingSequence.Machine,
                    millingPeckDeepDrillingSequence.Material,
                    Tool as MillingDrillingTool,
                    StepOver,
                    DrillStart,
                    DrillEnd,
                    millingPeckDeepDrillingSequence.Holes,
                    millingPeckDeepDrillingSequence.Polar)
                .Operation,

                MillingPeckDrillingSequence millingPeckDrillingSequence => new MillingPeckDrillingSequence(
                    millingPeckDrillingSequence.Machine,
                    millingPeckDrillingSequence.Material,
                    Tool as MillingDrillingTool,
                    StepOver,
                    DrillStart,
                    DrillEnd,
                    millingPeckDrillingSequence.Holes,
                    millingPeckDrillingSequence.Polar)
                .Operation,

                MillingTappingSequence millingTappingSequence => new MillingTappingSequence(
                    millingTappingSequence.Machine,
                    Tool as MillingTappingTool,
                    TappingCutSpeed,
                    DrillStart,
                    DrillEnd,
                    millingTappingSequence.Holes,
                    millingTappingSequence.Polar)
                .Operation,

                MillingCustomSequence millingCustomSequence => new MillingCustomSequence(
                    millingCustomSequence.Machine,
                    Tool,
                    CustomOperation,
                    Coolant,
                    millingCustomSequence.Polar)
                .Operation,

                // токарные
                FacingSequence facingSequence => new FacingSequence(
                    facingSequence.Machine,
                    facingSequence.Material,
                    Tool as TurningExternalTool,
                    ExternalDiameter,
                    InternalDiameter,
                    RoughStockAllow,
                    ProfStockAllow,
                    StepOver,
                    facingSequence.SeqNumbers,
                    BluntType,
                    CustomChamferAngle,
                    CustomChamferBlunt,
                    CornerBlunt)
                .Operation,

                FinishFacingCycleSequence finishFacingCycleSequence => new FinishFacingCycleSequence(Tool as TurningExternalTool, RepeatableRoughFacingSequence)
                .Operation,

                FinishFacingSequence finishFacingSequence => new FinishFacingSequence(
                    finishFacingSequence.Machine,
                    finishFacingSequence.Material,
                    Tool as TurningExternalTool,
                    ExternalDiameter,
                    InternalDiameter,
                    ProfStockAllow,
                    BluntType,
                    CustomChamferAngle,
                    CustomChamferBlunt,
                    CornerBlunt)
                .Operation,

                LimiterSequence limiterSequence => new LimiterSequence(limiterSequence.Machine, Tool, ExternalDiameter).Operation,

                RoughFacingCycleSequence roughFacingCycleSequence => new RoughFacingCycleSequence(
                    roughFacingCycleSequence.Machine,
                    roughFacingCycleSequence.Material,
                    Tool as TurningExternalTool,
                    ExternalDiameter,
                    InternalDiameter,
                    RoughStockAllow,
                    ProfStockAllow,
                    StepOver,
                    roughFacingCycleSequence.SeqNumbers,
                    BluntType,
                    CustomChamferAngle,
                    CustomChamferBlunt,
                    CornerBlunt)
                .Operation,

                RoughFacingSequence roughFacingSequence => new RoughFacingSequence(
                    roughFacingSequence.Machine,
                    roughFacingSequence.Material,
                    Tool as TurningExternalTool,
                    ExternalDiameter,
                    InternalDiameter,
                    RoughStockAllow,
                    ProfStockAllow,
                    StepOver,
                    roughFacingSequence.SeqNumbers,
                    BluntType,
                    CustomChamferAngle,
                    CustomChamferBlunt,
                    CornerBlunt)
                .Operation,

                ThreadCuttingSequence threadCuttingSequence => new ThreadCuttingSequence(
                    threadCuttingSequence.Machine,
                    Tool as ThreadingTool, ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch, ThreadStart, ThreadEnd, threadCuttingSequence.ThreadNPTPlane) // НАДО СДЕЛАТЬ
                .Operation,

                TurningCutOffSequence turningCutOffSequence => new TurningCutOffSequence(
                    turningCutOffSequence.Machine,
                    turningCutOffSequence.Material,
                    Tool as GroovingExternalTool,
                    CuttingPoint,
                    ExternalDiameter,
                    InternalDiameter,
                    CornerBlunt,
                    StepOver,
                    BluntType,
                    CustomChamferAngle,
                    CustomChamferBlunt)
                .Operation,

                TurningExternalGroovingSequence => string.Empty,

                TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence => new TurningHighSpeedDrillingSequence(
                    turningHighSpeedDrillingSequence.Machine,
                    turningHighSpeedDrillingSequence.Material,
                    Tool as TurningDrillingTool,
                    DrillStart,
                    DrillEnd)
                .Operation,

                TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence => new TurningPeckDeepDrillingSequence(
                    turningPeckDeepDrillingSequence.Machine,
                    turningPeckDeepDrillingSequence.Material,
                    Tool as TurningDrillingTool,
                    StepOver,
                    DrillStart,
                    DrillEnd)
                .Operation,

                TurningPeckDrillingSequence turningPeckDrillingSequence => new TurningPeckDrillingSequence(
                    turningPeckDrillingSequence.Machine,
                    turningPeckDrillingSequence.Material,
                    Tool as TurningDrillingTool,
                    StepOver,
                    DrillStart,
                    DrillEnd)
                .Operation,

                TurningTappingSequence turningTappingSequence => new TurningTappingSequence(
                    turningTappingSequence.Machine,
                    Tool as TurningTappingTool,
                    TappingCutSpeed,
                    DrillStart,
                    DrillEnd)
                .Operation,

                TurningCustomSequence turningCustomSequence => new TurningCustomSequence(turningCustomSequence.Machine, Tool, CustomOperation).Operation,

                _ => string.Empty,
            };
        }
    }
    #endregion

    async Task Submit()
    {
        switch (Sequence)
        {
            case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
                millingHighSpeedDrillingSequence.Tool = Tool as MillingDrillingTool;
                millingHighSpeedDrillingSequence.StartZ = DrillStart;
                millingHighSpeedDrillingSequence.EndZ = DrillEnd;
                millingHighSpeedDrillingSequence.Holes = Holes;
                millingHighSpeedDrillingSequence.Polar = Polar;
                break;
            case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
                millingPeckDeepDrillingSequence.Tool = Tool as MillingDrillingTool;
                millingPeckDeepDrillingSequence.StartZ = DrillStart;
                millingPeckDeepDrillingSequence.Depth = DrillDepth;
                millingPeckDeepDrillingSequence.EndZ = DrillEnd;
                millingPeckDeepDrillingSequence.Holes = Holes;
                millingPeckDeepDrillingSequence.Polar = Polar;
                break;
            case MillingPeckDrillingSequence millingPeckDrillingSequence:
                millingPeckDrillingSequence.Tool = Tool as MillingDrillingTool;
                millingPeckDrillingSequence.StartZ = DrillStart;
                millingPeckDrillingSequence.Depth = DrillDepth;
                millingPeckDrillingSequence.EndZ = DrillEnd;
                millingPeckDrillingSequence.Holes = Holes;
                millingPeckDrillingSequence.Polar = Polar;
                break;
            case MillingTappingSequence millingTappingSequence:
                millingTappingSequence.Tool = Tool as MillingTappingTool;
                millingTappingSequence.CutSpeed = TappingCutSpeed;
                millingTappingSequence.StartZ = DrillStart;
                millingTappingSequence.EndZ = DrillEnd;
                millingTappingSequence.Holes = Holes;
                millingTappingSequence.Polar = Polar;
                break;
            case MillingCustomSequence millingCustomSequence:
                millingCustomSequence.Tool = Tool;
                millingCustomSequence.CustomOperation = CustomOperation;
                millingCustomSequence.Coolant = Coolant;
                millingCustomSequence.Polar = Polar;
                break;

            // токарные
            case FacingSequence facingSequence:
                facingSequence.Tool = Tool as TurningExternalTool;
                facingSequence.RoughStockAllow = RoughStockAllow;
                facingSequence.ProfStockAllow = ProfStockAllow;
                facingSequence.StepOver = StepOver;
                facingSequence.BluntType = BluntType;
                facingSequence.CornerBlunt = CornerBlunt;
                facingSequence.BluntCustomAngle = CustomChamferAngle;
                facingSequence.BluntCustomRadius = CustomChamferBlunt;
                break;
            case FinishFacingCycleSequence finishFacingCycleSequence:
                finishFacingCycleSequence.Tool = Tool as TurningExternalTool;
                finishFacingCycleSequence.RoughSequence = RepeatableRoughFacingSequence;
                break;
            case FinishFacingSequence finishFacingSequence:
                finishFacingSequence.Tool = Tool as TurningExternalTool;
                finishFacingSequence.ProfStockAllow = ProfStockAllow;
                finishFacingSequence.BluntType = BluntType;
                finishFacingSequence.CornerBlunt = CornerBlunt;
                finishFacingSequence.BluntCustomAngle = CustomChamferAngle;
                finishFacingSequence.BluntCustomRadius = CustomChamferBlunt;
                break;
            case LimiterSequence limiterSequence:
                limiterSequence.Tool = Tool;
                limiterSequence.ExternalDiameter = LimiterApproachDiameter;
                break;
            case RoughFacingCycleSequence roughFacingCycleSequence:
                roughFacingCycleSequence.Tool = Tool as TurningExternalTool;
                roughFacingCycleSequence.RoughStockAllow = RoughStockAllow;
                roughFacingCycleSequence.ProfStockAllow = ProfStockAllow;
                roughFacingCycleSequence.StepOver = StepOver;
                roughFacingCycleSequence.BluntType = BluntType;
                roughFacingCycleSequence.CornerBlunt = CornerBlunt;
                roughFacingCycleSequence.BluntCustomAngle = CustomChamferAngle;
                roughFacingCycleSequence.BluntCustomRadius = CustomChamferBlunt;
                break;
            case RoughFacingSequence roughFacingSequence:
                roughFacingSequence.Tool = Tool as TurningExternalTool;
                roughFacingSequence.RoughStockAllow = RoughStockAllow;
                roughFacingSequence.ProfStockAllow = ProfStockAllow;
                roughFacingSequence.StepOver = StepOver;
                roughFacingSequence.BluntType = BluntType;
                roughFacingSequence.CornerBlunt = CornerBlunt;
                roughFacingSequence.BluntCustomAngle = CustomChamferAngle;
                roughFacingSequence.BluntCustomRadius = CustomChamferBlunt;
                break;
            case ThreadCuttingSequence threadCuttingSequence:
                threadCuttingSequence.Tool = Tool;
                threadCuttingSequence.ThreadDiameter = ThreadDiameter;
                threadCuttingSequence.ThreadPitch = ThreadPitch;
                threadCuttingSequence.StartZ = ThreadStart;
                threadCuttingSequence.EndZ = ThreadEnd;
                break;
            case TurningExternalGroovingSequence turningExternalGroovingSequence:
                turningExternalGroovingSequence.Tool = Tool as GroovingExternalTool;
                turningExternalGroovingSequence.ExternalDiameter = ExternalDiameter;
                turningExternalGroovingSequence.InternalDiameter = InternalDiameter;
                turningExternalGroovingSequence.Width = Width;
                turningExternalGroovingSequence.StepOver = StepOver;
                turningExternalGroovingSequence.CuttingPoint = CuttingPoint;
                turningExternalGroovingSequence.OuterCornerBlunt = OuterBlunt;
                turningExternalGroovingSequence.InnerCornerBlunt = InnerBlunt;
                turningExternalGroovingSequence.OuterBluntType = BluntType;
                turningExternalGroovingSequence.InnerBluntType = InnerBluntType;
                break;
            case TurningCutOffSequence turningCutOffSequence:
                turningCutOffSequence.ExternalDiameter = ExternalDiameter;
                turningCutOffSequence.InternalDiameter = InternalDiameter;
                turningCutOffSequence.StepOver = StepOver;
                turningCutOffSequence.CuttingPoint = CuttingPoint;
                turningCutOffSequence.CornerBlunt = CornerBlunt;
                turningCutOffSequence.BluntType = BluntType;
                turningCutOffSequence.BluntCustomAngle = CustomChamferAngle;
                turningCutOffSequence.BluntCustomRadius = CustomChamferBlunt;
                break;
            case TurningHighSpeedDrillingSequence highSpeedDrillingSequence:
                highSpeedDrillingSequence.Tool = Tool as TurningDrillingTool;
                highSpeedDrillingSequence.StartZ = DrillStart;
                highSpeedDrillingSequence.EndZ = DrillEnd;
                break;
            case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
                turningPeckDeepDrillingSequence.Tool = Tool as TurningDrillingTool;
                turningPeckDeepDrillingSequence.StartZ = DrillStart;
                turningPeckDeepDrillingSequence.EndZ = DrillEnd;
                turningPeckDeepDrillingSequence.Depth = DrillDepth;
                break;
            case TurningPeckDrillingSequence turningPeckDrillingSequence:
                turningPeckDrillingSequence.Tool = Tool as TurningDrillingTool;
                turningPeckDrillingSequence.StartZ = DrillStart;
                turningPeckDrillingSequence.EndZ = DrillEnd;
                turningPeckDrillingSequence.Depth = DrillDepth;
                break;
            case TurningTappingSequence turningTappingSequence:
                turningTappingSequence.Tool = Tool as TurningTappingTool;
                turningTappingSequence.CutSpeed = TappingCutSpeed;
                turningTappingSequence.StartZ = ThreadStart;
                turningTappingSequence.EndZ = ThreadEnd;
                break;
            case TurningCustomSequence turningCustomSequence:
                turningCustomSequence.Tool = Tool;
                turningCustomSequence.CustomOperation = CustomOperation;
                break;
            default:
                break;
        }
        Mode = Mode.General;
        await ModeChanged.InvokeAsync(Mode);
    }

    string BluntLabel(Blunt bluntType) => bluntType == Blunt.CustomChamfer ? "Размер фаски" : "Величина притупления";
}