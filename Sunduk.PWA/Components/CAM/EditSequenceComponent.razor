<MudGrid Class="mt-2">
    @switch (Sequence)
    {
        case LimiterSequence limiterSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is Tool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Диаметр подвода" @bind-Value="LimiterApproachDiameter" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case FacingSequence facingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case RoughFacingSequence roughFacingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case RoughFacingCycleSequence roughFacingCycleSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case FinishFacingSequence finishFacingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case FinishFacingCycleSequence finishFacingCycleSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="RepeatableRoughFacingSequence" Label="Черновая торцовка" T="Sequence">
                    @foreach (var seq in Program)
                    {
                        if (seq is RoughFacingSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                        if (seq is RoughFacingCycleSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                        if (seq is FacingSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            break;
        case TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>

            break;
        case TurningPeckDrillingSequence turningPeckDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingPeckDrillingSequence millingPeckDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case ThreadCuttingSequence threadCuttingSequence:
            if (threadCuttingSequence.Type == CuttingType.External)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                        @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            if (threadCuttingSequence.Type == CuttingType.Internal)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                        @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ThreadType" Label="Тип" T="CuttingType">
                    <MudSelectItem Value="CuttingType.External">Наружная</MudSelectItem>
                    <MudSelectItem Value="CuttingType.Internal">Внутренняя</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="ThreadStandart" Label="Тип" T="ThreadStandart">
                    <MudSelectItem Value="ThreadStandart.Metric">Метрическая 60°</MudSelectItem>
                    <MudSelectItem Value="ThreadStandart.BSPP">Трубная 55°</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Диаметр" @bind-Value="ThreadDiameter" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Шаг резьбы" @bind-Value="ThreadDiameter" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Начало" @bind-Value="ThreadStart" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6">
                <MudTextField Label="Конец" @bind-Value="ThreadEnd" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningCutOffSequence turningCutOffSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Начальный диаметр" @bind-Value="CuttingExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечный диаметр" @bind-Value="CuttingInternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечная точка" @bind-Value="CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Шаг" @bind-Value="CuttingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="@_BluntLabel" @bind-Value="CuttingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _caclCuttingChamferDiameter = true)" Converter="Util.DoubleConverter"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="CuttingBluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (CuttingBluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CuttingCustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CuttingCustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CuttingCustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _caclCuttingChamferDiameter = false)" Converter="Util.DoubleConverter"/>
                </MudItem>
            }
            break;
        default:
            break;
    }
</MudGrid>

<MudItem Class="d-flex flex-row-reverse py-0 px-0 mt-4">
    <MudButton Variant="Variant.Outlined" Size="Size.Large"
               EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary"
               OnClick="Submit">Подтвердить</MudButton>
</MudItem>

@code{
    protected override void OnInitialized()
    {
        switch (Sequence)
        {
            // упор
            case LimiterSequence limiterSequence:
                Tool = limiterSequence.Tool;
                LimiterApproachDiameter = limiterSequence.ExternalDiameter;
                break;
            // торцовка черновая + чистовая
            case FacingSequence facingSequence:
                Tool = facingSequence.Tool;
                RoughStockAllow = facingSequence.RoughStockAllow;
                ProfStockAllow = facingSequence.ProfStockAllow;
                StepOver = facingSequence.StepOver;
                break;
            // торцовка черновая
            case RoughFacingSequence roughFacingSequence:
                Tool = roughFacingSequence.Tool;
                RoughStockAllow = roughFacingSequence.RoughStockAllow;
                ProfStockAllow = roughFacingSequence.ProfStockAllow;
                StepOver = roughFacingSequence.StepOver;
                break;
            // торцовка черновая под G70
            case RoughFacingCycleSequence roughFacingCycleSequence:
                Tool = roughFacingCycleSequence.Tool;
                RoughStockAllow = roughFacingCycleSequence.RoughStockAllow;
                ProfStockAllow = roughFacingCycleSequence.ProfStockAllow;
                StepOver = roughFacingCycleSequence.StepOver;
                break;
            // чистовая торцовка
            case FinishFacingSequence finishFacingSequence:
                Tool = finishFacingSequence.Tool;
                ProfStockAllow = finishFacingSequence.ProfStockAllow;
                break;
            // чистовая торцовка G70
            case FinishFacingCycleSequence finishFacingCycleSequence:
                Tool = finishFacingCycleSequence.Tool;
                RepeatableRoughFacingSequence = finishFacingCycleSequence.RoughSequence;
                break;
            // высокоскоростное сверление
            case HighSpeedDrillingSequence highSpeedDrillingSequence:
                Tool = highSpeedDrillingSequence.Tool;
                DrillStart = highSpeedDrillingSequence.StartZ;
                DrillEnd = highSpeedDrillingSequence.EndZ;
                break;
            // прерывистое сверление
            case PeckDrillingSequence peckDrillingSequence:
                Tool = peckDrillingSequence.Tool;
                DrillStart = peckDrillingSequence.StartZ;
                DrillEnd = peckDrillingSequence.EndZ;
                DrillDepth = peckDrillingSequence.Depth;
                break;
            // сверление в полным выходом
            case PeckDeepDrillingSequence peckDeepDrillingSequence:
                Tool = peckDeepDrillingSequence.Tool;
                DrillStart = peckDeepDrillingSequence.StartZ;
                DrillEnd = peckDeepDrillingSequence.EndZ;
                DrillDepth = peckDeepDrillingSequence.Depth;
                break;
            // точение резьбы
            case ThreadCuttingSequence threadCuttingSequence:
                Tool = threadCuttingSequence.Tool;
                ThreadDiameter = threadCuttingSequence.ThreadDiameter;
                ThreadPitch = threadCuttingSequence.ThreadPitch;
                ThreadStart = threadCuttingSequence.StartZ;
                ThreadEnd = threadCuttingSequence.EndZ;
                break;
            // нарезание метчиком
            case TurningTappingSequence turningTappingSequence:
                Tool = turningTappingSequence.Tool;
                TappingCutSpeed = turningTappingSequence.CutSpeed;
                ThreadStart = turningTappingSequence.StartZ;
                ThreadEnd = turningTappingSequence.EndZ;
                break;
            // отрезка
            case TurningCutOffSequence turningCutOffSequence:
                Tool = turningCutOffSequence.Tool;
                CuttingExternalDiameter = turningCutOffSequence.ExternalDiameter;
                CuttingInternalDiameter = turningCutOffSequence.InternalDiameter;
                CuttingStepOver = turningCutOffSequence.StepOver;
                CuttingPoint = turningCutOffSequence.CuttingPoint;
                CuttingCornerBlunt = turningCutOffSequence.CornerBlunt;
                CuttingBluntType = turningCutOffSequence.BluntType;
                CuttingCustomChamferAngle = turningCutOffSequence.BluntCustomAngle;
                CuttingCustomChamferBlunt = turningCutOffSequence.BluntCustomRadius;
                break;
            default:
                break;
        }
    }

    [Parameter] public Mode Mode { get; set; }
    [Parameter] public EventCallback<Mode> ModeChanged { get; set; }
    [Parameter] public List<Tool> Tools { get; set; }
    [Parameter] public List<Sequence> Program { get; set; }
    [Parameter] public Sequence Sequence { get; set; }

    public Tool Tool { get; set; }

    public double LimiterApproachDiameter { get; set; }

    public Sequence RepeatableRoughFacingSequence { get; set; }
    public double RoughStockAllow { get; set; }
    public double ProfStockAllow { get; set; }
    public double StepOver { get; set; }

    public double DrillStart { get; set; }
    public double DrillEnd { get; set; }
    public double DrillDepth { get; set; }

    public CuttingType ThreadType { get; set; }
    public ThreadStandart ThreadStandart { get; set; }
    public double ThreadDiameter { get; set; }
    public double ThreadPitch { get; set; }
    public double ThreadStart { get; set; }
    public double ThreadEnd { get; set; }

    private bool _caclCuttingChamferDiameter = true;
    private double CuttingExternalDiameter { get; set; }
    private double CuttingInternalDiameter { get; set; }
    private double CuttingStepOver { get; set; }
    private double CuttingPoint { get; set; }
    private double _CuttingCornerBlunt { get; set; }
    private double CuttingCornerBlunt {
        get => _CuttingCornerBlunt;
        set
        {
            _CuttingCornerBlunt = value;
            if (_caclCuttingChamferDiameter)
            {
                CuttingCustomChamferDiameter = (CuttingExternalDiameter - 2 * CuttingCornerBlunt * Math.Tan(CuttingCustomChamferAngle.Radians()));
            }
        }
    }
    private Blunt CuttingBluntType { get; set; }
    private double _CuttingCustomChamferAngle { get; set; }
    private double CuttingCustomChamferAngle
    {
        get => _CuttingCustomChamferAngle;
        set
        {
            _CuttingCustomChamferAngle = value;
            if (_caclCuttingChamferDiameter)
            {
                CuttingCustomChamferDiameter = (CuttingExternalDiameter - 2 * CuttingCornerBlunt * Math.Tan(CuttingCustomChamferAngle.Radians()));
            }
            if (!_caclCuttingChamferDiameter)
            {
                CuttingCornerBlunt = ((CuttingExternalDiameter - CuttingCustomChamferDiameter) / 2 * Math.Tan((90 - CuttingCustomChamferAngle).Radians()));
            }
        }
    }
    private double CuttingCustomChamferBlunt { get; set; }
    private double _CuttingCustomChamferDiameter { get; set; }
    private double CuttingCustomChamferDiameter
    {
        get => _CuttingCustomChamferDiameter;
        set
        {
            _CuttingCustomChamferDiameter = value;
            if (!_caclCuttingChamferDiameter)
            {
                CuttingCornerBlunt = ((CuttingExternalDiameter - CuttingCustomChamferDiameter) / 2 * Math.Tan((90 - CuttingCustomChamferAngle).Radians()));
            }
        }
    }
    private string _BluntLabel { get => CuttingBluntType == Blunt.CustomChamfer ? "Размер фаски" : "Величина притупления"; }

    public double TappingCutSpeed { get; set; }

    async Task Submit()
    {
        switch (Sequence)
        {
            // упор
            case LimiterSequence limiterSequence:
                limiterSequence.Tool = Tool;
                limiterSequence.ExternalDiameter = LimiterApproachDiameter;
                break;
            // торцовка черновая + чистовая
            case FacingSequence facingSequence:
                facingSequence.Tool = Tool as TurningExternalTool;
                facingSequence.RoughStockAllow = RoughStockAllow;
                facingSequence.ProfStockAllow = ProfStockAllow;
                facingSequence.StepOver = StepOver;
                break;
            // торцовка черновая
            case RoughFacingSequence roughFacingSequence:
                roughFacingSequence.Tool = Tool as TurningExternalTool;
                roughFacingSequence.RoughStockAllow = RoughStockAllow;
                roughFacingSequence.ProfStockAllow = ProfStockAllow;
                roughFacingSequence.StepOver = StepOver;
                break;
            // торцовка черновая под G70
            case RoughFacingCycleSequence roughFacingCycleSequence:
                roughFacingCycleSequence.Tool = Tool as TurningExternalTool;
                roughFacingCycleSequence.RoughStockAllow = RoughStockAllow;
                roughFacingCycleSequence.ProfStockAllow = ProfStockAllow;
                roughFacingCycleSequence.StepOver = StepOver;
                break;
            // чистовая торцовка
            case FinishFacingSequence finishFacingSequence:
                finishFacingSequence.Tool = Tool as TurningExternalTool;
                finishFacingSequence.ProfStockAllow = ProfStockAllow;
                break;
            // чистовая торцовка G70
            case FinishFacingCycleSequence finishFacingCycleSequence:
                finishFacingCycleSequence.Tool = Tool as TurningExternalTool;
                finishFacingCycleSequence.RoughSequence = RepeatableRoughFacingSequence;
                break;
            // высокоскоростное сверление
            case TurningHighSpeedDrillingSequence highSpeedDrillingSequence:
                highSpeedDrillingSequence.Tool = Tool as TurningDrillingTool;
                highSpeedDrillingSequence.StartZ = DrillStart;
                highSpeedDrillingSequence.EndZ = DrillEnd;
                break;
            case MillingHighSpeedDrillingSequence highSpeedDrillingSequence:
                highSpeedDrillingSequence.Tool = Tool as MillingDrillingTool;
                highSpeedDrillingSequence.StartZ = DrillStart;
                highSpeedDrillingSequence.EndZ = DrillEnd;
                break;
            // прерывистое сверление
            case PeckDrillingSequence peckDrillingSequence:
                peckDrillingSequence.Tool = Tool as TurningDrillingTool;
                peckDrillingSequence.StartZ = DrillStart;
                peckDrillingSequence.EndZ = DrillEnd;
                peckDrillingSequence.Depth = DrillDepth;
                break;
            // сверление в полным выходом
            case PeckDeepDrillingSequence peckDeepDrillingSequence:
                peckDeepDrillingSequence.Tool = Tool as TurningDrillingTool;
                peckDeepDrillingSequence.StartZ = DrillStart;
                peckDeepDrillingSequence.EndZ = DrillEnd;
                peckDeepDrillingSequence.Depth = DrillDepth;
                break;
            // точение резьбы
            case ThreadCuttingSequence threadCuttingSequence:
                threadCuttingSequence.Tool = Tool;
                threadCuttingSequence.ThreadDiameter = ThreadDiameter;
                threadCuttingSequence.ThreadPitch = ThreadPitch;
                threadCuttingSequence.StartZ = ThreadStart;
                threadCuttingSequence.EndZ = ThreadEnd;
                break;
            // нарезание метчиком
            case TurningTappingSequence turningTappingSequence:
                turningTappingSequence.Tool = Tool as TurningTappingTool;
                turningTappingSequence.CutSpeed = TappingCutSpeed;
                turningTappingSequence.StartZ = ThreadStart;
                turningTappingSequence.EndZ = ThreadEnd;
                break;
            // отрезка
            case TurningCutOffSequence turningCutOffSequence:
                turningCutOffSequence.ExternalDiameter = CuttingExternalDiameter;
                turningCutOffSequence.InternalDiameter = CuttingInternalDiameter;
                turningCutOffSequence.StepOver = CuttingStepOver;
                turningCutOffSequence.CuttingPoint = CuttingPoint;
                turningCutOffSequence.CornerBlunt = CuttingCornerBlunt;
                turningCutOffSequence.BluntType = CuttingBluntType;
                turningCutOffSequence.BluntCustomAngle = CuttingCustomChamferAngle;
                turningCutOffSequence.BluntCustomRadius = CuttingCustomChamferBlunt;
                break;
            default:
                break;
        }
        Mode = Mode.General;
        await ModeChanged.InvokeAsync(Mode);
    }
}