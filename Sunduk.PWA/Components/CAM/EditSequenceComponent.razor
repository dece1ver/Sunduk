@using Sunduk.PWA.Infrastructure.Sequences.Turning.Base
<MudGrid Class="mt-2" Spacing="1">
    @switch (Sequence)
    {
        case TurningCustomSequence turningCustomSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Turning))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="CustomOperation" Label="Произвольная обработка" T="string" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Lines="@(CustomOperation is null ? 1 : CustomOperation.Count(x => x == '\n') + 2)" />
            </MudItem>
            break;
        case MillingCustomSequence millingCustomSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Milling))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип охлаждения" T="Coolant" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Coolant">
                    <MudSelectItem Value="@(Coolant.General)">Обычный</MudSelectItem>
                    <MudSelectItem Value="@(Coolant.Through)">Через шпиндель</MudSelectItem>
                    <MudSelectItem Value="@(Coolant.Blow)">Обдув</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип системы координат" T="bool" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Polar">
                    <MudSelectItem Value="false">Декартова</MudSelectItem>
                    <MudSelectItem Value="true">Полярная</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="CustomOperation" Label="Произвольная обработка" T="string" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Lines="@(CustomOperation is null ? 1 : CustomOperation.Count(x => x == '\n') + 2)" />
            </MudItem>
            break;
        case LimiterSequence limiterSequence:
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Turning))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Label="Диаметр подвода" @bind-Value="ExternalDiameter" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case FacingSequence facingSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case RoughFacingSequence roughFacingSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case RoughFacingCycleSequence roughFacingCycleSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Общий припуск" @bind-Value="RoughStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Съем" @bind-Value="StepOver" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case FinishFacingSequence finishFacingSequence:
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Чистовой припуск по Z" @bind-Value="ProfStockAllow" Immediate="true" Converter="Util.DoubleConverter" Variant="Variant.Filled" Margin="Margin.Dense" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        case FinishFacingCycleSequence finishFacingCycleSequence:
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="6">
                <MudSelect @bind-Value="RepeatableRoughFacingSequence" Label="Черновая торцовка" T="Sequence" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var seq in Program)
                    {
                        if (seq is RoughFacingSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                        if (seq is RoughFacingCycleSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                        if (seq is FacingSequence)
                        {
                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            break;
        case TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Margin="Margin.Dense" Variant="Variant.Filled">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>

            break;
        case TurningPeckDrillingSequence turningPeckDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingPeckDrillingSequence millingPeckDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
            <MudItem xs="12" sm="6">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Глубина" @bind-Value="DrillDepth" Adornment="Adornment.End" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Начальная точка" @bind-Value="DrillStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField Label="Конечная точка" @bind-Value="DrillEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case ThreadCuttingSequence threadCuttingSequence:
            if (threadCuttingSequence.Type == CuttingType.External)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Margin="Margin.Dense" Variant="Variant.Filled">
                        @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            if (threadCuttingSequence.Type == CuttingType.Internal)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                        @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            <MudItem xs="6" md="(ThreadStandard is ThreadStandard.Metric or ThreadStandard.Trapezoidal ? 6 : 4)">
                <MudSelect @bind-Value="ThreadType" Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="CuttingType.External">Наружная</MudSelectItem>
                    <MudSelectItem Value="CuttingType.Internal">Внутренняя</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="6" md="(ThreadStandard is ThreadStandard.Metric or ThreadStandard.Trapezoidal ? 6 : 4)">
                <MudSelect @bind-Value="ThreadStandard" Label="Тип" T="ThreadStandard" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="@(ThreadStandard.Metric)">Метрическая 60° (М)</MudSelectItem>
                    <MudSelectItem Value="@(ThreadStandard.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                    <MudSelectItem Value="@(ThreadStandard.Trapezoidal)">Трапецеидальная 30° (G)</MudSelectItem>
                    <MudSelectItem Value="@(ThreadStandard.NPT)">Коническая 60° (K)</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (ThreadStandard == ThreadStandard.BSPP)
                {
                <MudItem xs="6" sm="6" md="4">
                    <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                        @foreach (string item in Thread.BsppTemplates)
                        {
                            <MudSelectItem Value="@(item)">
                                <MudText>@item</MudText>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                }
                @if (ThreadStandard == ThreadStandard.NPT)
                {
                <MudItem xs="6" sm="6" md="4">
                    <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                        @foreach (string item in Thread.NptTemplates)
                        {
                            <MudSelectItem Value="@(item)">
                                <MudText>@item</MudText>
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                }
            <MudItem xs="6" md="3">
                <MudTextField Label="Диаметр" @bind-Value="ThreadDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField Label="Шаг резьбы" @bind-Value="ThreadPitch" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField Label="Начало" @bind-Value="ThreadStart" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField Label="Конец" @bind-Value="ThreadEnd" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningBurnishingSequence turningBurnishingSequence:
            <MudItem xs="6" md="3">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Margin="Margin.Dense" Variant="Variant.Filled">
                    @foreach (var tool in Tools.Where(x => x is TurningBurnishingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField Label="Диаметр" @bind-Value="ExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField Label="Начало" @bind-Value="StartPoint" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="6" md="3">
                <MudTextField Label="Конец" @bind-Value="EndPoint" Immediate="true" Variant="Variant.Filled" Margin="Margin.Dense" Converter="Util.DoubleConverter" />
            </MudItem>
            break;
        case TurningGroovingSequence turningGroovingSequence:
            <MudItem xs="12">
            @if (turningGroovingSequence is TurningExternalGroovingSequence)
            {
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                {
                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                }
                </MudSelect>
            } 
            else if (turningGroovingSequence is TurningFaceGroovingSequence)
            {
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                @foreach (var tool in Tools.Where(x => x is GroovingFaceTool))
                {
                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                }
                </MudSelect>
            }
            else if (turningGroovingSequence is TurningInternalGroovingSequence)
            {
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                @foreach (var tool in Tools.Where(x => x is GroovingInternalTool))
                {
                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                }
                </MudSelect>
            }
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Начальный диаметр" @bind-Value="ExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Конечный диаметр" @bind-Value="InternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            @if(turningGroovingSequence is TurningFaceGroovingSequence)
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField Label="Начальная точка" @bind-Value="StartPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
                </MudItem>
            }
            else
            {
                <MudItem xs="12" sm="6" md="3">
                    <MudTextField Label="Ширина" @bind-Value="Width" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
                </MudItem>
            }
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Конечная точка" @bind-Value="CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Шаг" @bind-Value="StepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Припуск" @bind-Value="ProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Величина притупления" @bind-Value="OuterBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип притупления" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    @*<MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>*@
                </MudSelect>
            </MudItem>
             <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Галтель" @bind-Value="InnerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип галтели" T="Blunt" Variant="Variant.Filled" @bind-Value="InnerBluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                </MudSelect>
            </MudItem>
            break;

        case TurningCutOffSequence turningCutOffSequence:
            <MudItem xs="12">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Начальный диаметр" @bind-Value="ExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечный диаметр" @bind-Value="InternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Конечная точка" @bind-Value="CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="Шаг" @bind-Value="StepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudTextField Label="@BluntLabel(BluntType)" @bind-Value="CornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = true)" Converter="Util.DoubleConverter" />
            </MudItem>
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="BluntType" Margin="Margin.Dense">
                    <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                    <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (BluntType == Blunt.CustomChamfer)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Угол фаски" @bind-Value="CustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Скругление на фаске" @bind-Value="CustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Конечный диаметр фаски" @bind-Value="CustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcChamferDiameter = false)" Converter="Util.DoubleConverter" />
                </MudItem>
            }
            break;
        default:
            break;
    }
    <MudItem Class="mt-4" xs="12">
        <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Style="font-family: 'Roboto Mono', monospace; font-size: medium;" Variant="Variant.Filled" Text="@("\n" + ExampleText.Trim('\n'))" Lines="@(ExampleText.Trim('\n').Count(x => x == '\n') + 3)" />
    </MudItem>
</MudGrid>

<MudItem Class="d-flex flex-row-reverse py-0 px-0 mt-4">
    <MudButton Variant="Variant.Outlined" Size="Size.Large"
               EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary"
               OnClick="Submit">Подтвердить</MudButton>
</MudItem>

@code{
    protected override void OnInitialized()
    {
        switch (Sequence)
        {
            // фрезерные
            case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
                Tool = millingHighSpeedDrillingSequence.Tool;
                DrillStart = millingHighSpeedDrillingSequence.StartZ;
                DrillEnd = millingHighSpeedDrillingSequence.EndZ;
                Holes = millingHighSpeedDrillingSequence.Holes;
                Polar = millingHighSpeedDrillingSequence.Polar;
                SpeedFinish = millingHighSpeedDrillingSequence.Speed;
                break;
            case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
                Tool = millingPeckDeepDrillingSequence.Tool;
                DrillStart = millingPeckDeepDrillingSequence.StartZ;
                DrillEnd = millingPeckDeepDrillingSequence.EndZ;
                DrillDepth = millingPeckDeepDrillingSequence.Depth;
                Holes = millingPeckDeepDrillingSequence.Holes;
                Polar = millingPeckDeepDrillingSequence.Polar;
                SpeedFinish = millingPeckDeepDrillingSequence.Speed;
                break;
            case MillingPeckDrillingSequence millingPeckDrillingSequence:
                Tool = millingPeckDrillingSequence.Tool;
                DrillStart = millingPeckDrillingSequence.StartZ;
                DrillEnd = millingPeckDrillingSequence.EndZ;
                DrillDepth = millingPeckDrillingSequence.Depth;
                Holes = millingPeckDrillingSequence.Holes;
                Polar = millingPeckDrillingSequence.Polar;
                SpeedFinish = millingPeckDrillingSequence.Speed;
                break;
            case MillingTappingSequence millingTappingSequence:
                Tool = millingTappingSequence.Tool;
                TappingCutSpeed = millingTappingSequence.CutSpeed;
                ThreadStart = millingTappingSequence.StartZ;
                ThreadEnd = millingTappingSequence.EndZ;
                Holes = millingTappingSequence.Holes;
                Polar = millingTappingSequence.Polar;
                break;
            case MillingCustomSequence millingCustomSequence:
                Tool = millingCustomSequence.Tool;
                CustomOperation = millingCustomSequence.CustomOperation;
                Coolant = millingCustomSequence.Coolant;
                Polar = millingCustomSequence.Polar;
                break;

            // токарные
            case FacingSequence facingSequence:
                Tool = facingSequence.Tool;
                ExternalDiameter = facingSequence.ExternalDiameter;
                RoughStockAllow = facingSequence.RoughStockAllow;
                ProfStockAllow = facingSequence.ProfStockAllow;
                StepOver = facingSequence.StepOver;
                CornerBlunt = facingSequence.CornerBlunt;
                CustomChamferAngle = facingSequence.BluntCustomAngle;
                BluntType = facingSequence.BluntType;
                SpeedRough = facingSequence.SpeedRough;
                SpeedFinish = facingSequence.SpeedFinish;
                FeedRough = facingSequence.FeedRough;
                FeedFinish = facingSequence.FeedFinish;
                break;
            case FinishFacingCycleSequence finishFacingCycleSequence:
                Tool = finishFacingCycleSequence.Tool;
                RepeatableRoughFacingSequence = finishFacingCycleSequence.RoughSequence;
                SpeedFinish = finishFacingCycleSequence.SpeedFinish;
                FeedFinish = finishFacingCycleSequence.FeedFinish;
                break;
            case FinishFacingSequence finishFacingSequence:
                Tool = finishFacingSequence.Tool;
                ExternalDiameter = finishFacingSequence.ExternalDiameter;
                ProfStockAllow = finishFacingSequence.ProfStockAllow;
                CornerBlunt = finishFacingSequence.CornerBlunt;
                CustomChamferAngle = finishFacingSequence.BluntCustomAngle;
                BluntType = finishFacingSequence.BluntType;
                SpeedFinish = finishFacingSequence.SpeedFinish;
                FeedFinish = finishFacingSequence.FeedFinish;
                break;
            case LimiterSequence limiterSequence:
                Tool = limiterSequence.Tool;
                ExternalDiameter = limiterSequence.ExternalDiameter;
                break;
            case RoughFacingCycleSequence roughFacingCycleSequence:
                Tool = roughFacingCycleSequence.Tool;
                ExternalDiameter = roughFacingCycleSequence.ExternalDiameter;
                RoughStockAllow = roughFacingCycleSequence.RoughStockAllow;
                ProfStockAllow = roughFacingCycleSequence.ProfStockAllow;
                StepOver = roughFacingCycleSequence.StepOver;
                CornerBlunt = roughFacingCycleSequence.CornerBlunt;
                CustomChamferAngle = roughFacingCycleSequence.BluntCustomAngle;
                BluntType = roughFacingCycleSequence.BluntType;
                SpeedRough = roughFacingCycleSequence.SpeedRough;
                FeedRough = roughFacingCycleSequence.FeedRough;
                break;
            case RoughFacingSequence roughFacingSequence:
                Tool = roughFacingSequence.Tool;
                ExternalDiameter = roughFacingSequence.ExternalDiameter;
                RoughStockAllow = roughFacingSequence.RoughStockAllow;
                ProfStockAllow = roughFacingSequence.ProfStockAllow;
                StepOver = roughFacingSequence.StepOver;
                CornerBlunt = roughFacingSequence.CornerBlunt;
                CustomChamferAngle = roughFacingSequence.BluntCustomAngle;
                BluntType = roughFacingSequence.BluntType;
                SpeedRough = roughFacingSequence.SpeedRough;
                FeedRough = roughFacingSequence.FeedRough;
                break;
            case ThreadCuttingSequence threadCuttingSequence:
                Tool = threadCuttingSequence.Tool;
                ThreadStandard = threadCuttingSequence.ThreadStandard;
                ThreadDiameter = threadCuttingSequence.ThreadDiameter;
                ThreadPitch = threadCuttingSequence.ThreadPitch;
                ThreadStart = threadCuttingSequence.StartZ;
                ThreadEnd = threadCuttingSequence.EndZ;
                ThreadNptPlane = threadCuttingSequence.ThreadNptPlane;
                SpeedFinish = threadCuttingSequence.Speed;
                break;
            case TurningExternalGroovingSequence turningExternalGroovingSequence:
                Tool = turningExternalGroovingSequence.Tool;
                ExternalDiameter = turningExternalGroovingSequence.ExternalDiameter;
                InternalDiameter = turningExternalGroovingSequence.InternalDiameter;
                Width = turningExternalGroovingSequence.Width;
                ProfStockAllow = turningExternalGroovingSequence.ProfStockAllow;
                StepOver = turningExternalGroovingSequence.StepOver;
                CuttingPoint = turningExternalGroovingSequence.CuttingPoint;
                OuterBlunt = turningExternalGroovingSequence.OuterCornerBlunt;
                InnerBlunt = turningExternalGroovingSequence.InnerCornerBlunt;
                BluntType = turningExternalGroovingSequence.OuterBluntType;
                InnerBluntType = turningExternalGroovingSequence.InnerBluntType;
                SpeedRough = turningExternalGroovingSequence.SpeedRough;
                SpeedFinish = turningExternalGroovingSequence.SpeedFinish;
                FeedRough = turningExternalGroovingSequence.FeedRough;
                FeedFinish = turningExternalGroovingSequence.FeedFinish;
                break;
            case TurningFaceGroovingSequence turningFaceGroovingSequence:
                Tool = turningFaceGroovingSequence.Tool;
                ExternalDiameter = turningFaceGroovingSequence.ExternalDiameter;
                InternalDiameter = turningFaceGroovingSequence.InternalDiameter;
                StartPoint = turningFaceGroovingSequence.Width;
                ProfStockAllow = turningFaceGroovingSequence.ProfStockAllow;
                StepOver = turningFaceGroovingSequence.StepOver;
                CuttingPoint = turningFaceGroovingSequence.CuttingPoint;
                OuterBlunt = turningFaceGroovingSequence.OuterCornerBlunt;
                InnerBlunt = turningFaceGroovingSequence.InnerCornerBlunt;
                BluntType = turningFaceGroovingSequence.OuterBluntType;
                InnerBluntType = turningFaceGroovingSequence.InnerBluntType;
                SpeedRough = turningFaceGroovingSequence.SpeedRough;
                SpeedFinish = turningFaceGroovingSequence.SpeedFinish;
                FeedRough = turningFaceGroovingSequence.FeedRough;
                FeedFinish = turningFaceGroovingSequence.FeedFinish;
                break;
            case TurningInternalGroovingSequence turningInternalGroovingSequence:
                Tool = turningInternalGroovingSequence.Tool;
                ExternalDiameter = turningInternalGroovingSequence.ExternalDiameter;
                InternalDiameter = turningInternalGroovingSequence.InternalDiameter;
                Width = turningInternalGroovingSequence.Width;
                ProfStockAllow = turningInternalGroovingSequence.ProfStockAllow;
                StepOver = turningInternalGroovingSequence.StepOver;
                CuttingPoint = turningInternalGroovingSequence.CuttingPoint;
                OuterBlunt = turningInternalGroovingSequence.OuterCornerBlunt;
                InnerBlunt = turningInternalGroovingSequence.InnerCornerBlunt;
                BluntType = turningInternalGroovingSequence.OuterBluntType;
                InnerBluntType = turningInternalGroovingSequence.InnerBluntType;
                SpeedRough = turningInternalGroovingSequence.SpeedRough;
                SpeedFinish = turningInternalGroovingSequence.SpeedFinish;
                FeedRough = turningInternalGroovingSequence.FeedRough;
                FeedFinish = turningInternalGroovingSequence.FeedFinish;
                break;
            case TurningCutOffSequence turningCutOffSequence:
                Tool = turningCutOffSequence.Tool;
                ExternalDiameter = turningCutOffSequence.ExternalDiameter;
                InternalDiameter = turningCutOffSequence.InternalDiameter;
                StepOver = turningCutOffSequence.StepOver;
                CuttingPoint = turningCutOffSequence.CuttingPoint;
                CornerBlunt = turningCutOffSequence.CornerBlunt;
                BluntType = turningCutOffSequence.BluntType;
                CustomChamferAngle = turningCutOffSequence.BluntCustomAngle;
                CustomChamferBlunt = turningCutOffSequence.BluntCustomRadius;
                SpeedRough = turningCutOffSequence.SpeedRough;
                FeedFinish = turningCutOffSequence.FeedRough;
                break;
            case TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence:
                Tool = turningHighSpeedDrillingSequence.Tool;
                DrillStart = turningHighSpeedDrillingSequence.StartZ;
                DrillEnd = turningHighSpeedDrillingSequence.EndZ;
                SpeedFinish = turningHighSpeedDrillingSequence.Speed;
                FeedFinish = turningHighSpeedDrillingSequence.Feed;
                break;
            case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
                Tool = turningPeckDeepDrillingSequence.Tool;
                DrillStart = turningPeckDeepDrillingSequence.StartZ;
                DrillEnd = turningPeckDeepDrillingSequence.EndZ;
                DrillDepth = turningPeckDeepDrillingSequence.Depth;
                SpeedFinish = turningPeckDeepDrillingSequence.Speed;
                FeedFinish = turningPeckDeepDrillingSequence.Feed;
                break;
            case TurningPeckDrillingSequence turningPeckDrillingSequence:
                Tool = turningPeckDrillingSequence.Tool;
                DrillStart = turningPeckDrillingSequence.StartZ;
                DrillEnd = turningPeckDrillingSequence.EndZ;
                DrillDepth = turningPeckDrillingSequence.Depth;
                SpeedFinish = turningPeckDrillingSequence.Speed;
                FeedFinish = turningPeckDrillingSequence.Feed;
                break;
            case TurningTappingSequence turningTappingSequence:
                Tool = turningTappingSequence.Tool;
                TappingCutSpeed = turningTappingSequence.CutSpeed;
                ThreadStart = turningTappingSequence.StartZ;
                ThreadEnd = turningTappingSequence.EndZ;
                break;
            case TurningCustomSequence turningCustomSequence:
                Tool = turningCustomSequence.Tool;
                CustomOperation = turningCustomSequence.CustomOperation;
                break;
        }
    }

    [Parameter] public Mode Mode { get; set; }
    [Parameter] public EventCallback<Mode> ModeChanged { get; set; }
    [Parameter] public List<Tool> Tools { get; set; }
    [Parameter] public List<Sequence> Program { get; set; }
    [Parameter] public Sequence Sequence { get; set; }
    [Parameter] public CoordinateSystem CoordinateSystem { get; set; }

    public Sequence CurrentSequence { get; set; }
    private string CurrentThreadTemplate { get; set; }
    private double ThreadNptPlane { get; set; }

    public Tool Tool { get; set; }
    public int SpeedRough { get; set; }
    public int SpeedFinish { get; set; }
    public double FeedRough { get; set; }
    public double FeedFinish { get; set; }
    public string CustomOperation { get; set; }
    public Coolant Coolant { get; set; }
    public bool Polar { get; set; }

    public Sequence RepeatableRoughFacingSequence { get; set; }
    bool _calcChamferDiameter = true;
    
    private double ExternalDiameter { get; set; }
    private double InternalDiameter { get; set; }

    public double StartPoint { get; set; }
    public double EndPoint { get; set; }

    private double StepOver { get; set; }

    private double Width { get; set; }

    private double RoughStockAllow { get; set; }

    private double ProfStockAllow { get; set; }

    public double OuterBlunt { get; set; }
    public double InnerBlunt { get; set; }

    private double _cornerBlunt;
    private double CornerBlunt
    {
        get => _cornerBlunt;
        set
        {
            _cornerBlunt = value;
            if (_calcChamferDiameter)
            {
                CustomChamferDiameter = (ExternalDiameter - 2 * CornerBlunt * Math.Tan(CustomChamferAngle.Radians()));
            }
        }
    }

    private Blunt BluntType { get; set; }
    private Blunt InnerBluntType { get; set; }

    private double _customChamferAngle;
    private double CustomChamferAngle
    {
        get => _customChamferAngle;
        set
        {
            _customChamferAngle = value;
            if (_calcChamferDiameter)
            {
                CustomChamferDiameter = (ExternalDiameter - 2 * CornerBlunt * Math.Tan(CustomChamferAngle.Radians()));
            }
            else
            {
                CornerBlunt = ((ExternalDiameter - CustomChamferDiameter) / 2 * Math.Tan((90 - CustomChamferAngle).Radians()));
            }
        }
    }

    private double CustomChamferBlunt { get; set; }

    private double _customChamferDiameter;
    private double CustomChamferDiameter
    {
        get => _customChamferDiameter;
        set
        {
            _customChamferDiameter = value;
            if (!_calcChamferDiameter)
            {
                CornerBlunt = ((ExternalDiameter - CustomChamferDiameter) / 2 * Math.Tan((90 - CustomChamferAngle).Radians()));
            }
        }
    }

    public double DrillStart { get; set; }
    public double DrillEnd { get; set; }
    public double DrillDepth { get; set; }

    public List<Hole> Holes { get; set; }

    public CuttingType ThreadType { get; set; }
    public ThreadStandard ThreadStandard { get; set; }
    public double ThreadDiameter { get; set; }
    public double ThreadPitch { get; set; }
    public double ThreadStart { get; set; }
    public double ThreadEnd { get; set; }

    private double CuttingPoint { get; set; }

    public double TappingCutSpeed { get; set; }


    /// <summary>
    /// Тут сразу формируется переход, текст которого выводится в пример. Уже созданный тут переход сабмитится при нажатии на кнопку.
    /// </summary>
    #region Пример
    public string ExampleText
    {
        get
        {
            switch (Sequence)
            {
                // фрезерные
                case MillingHighSpeedDrillingSequence millingHighSpeedDrillingSequence:
                    CurrentSequence = new MillingHighSpeedDrillingSequence(
                        millingHighSpeedDrillingSequence.Machine,
                        millingHighSpeedDrillingSequence.CoordinateSystem,
                        millingHighSpeedDrillingSequence.Material,
                        Tool as MillingDrillingTool,
                        DrillStart,
                        DrillEnd,
                        SpeedFinish,
                        FeedFinish,
                        millingHighSpeedDrillingSequence.Holes,
                        millingHighSpeedDrillingSequence.Polar, 
                        millingHighSpeedDrillingSequence.SafePlane);
                    return CurrentSequence.Operation;

                case MillingPeckDeepDrillingSequence millingPeckDeepDrillingSequence:
                    CurrentSequence = new MillingPeckDeepDrillingSequence (
                        millingPeckDeepDrillingSequence.Machine,
                        millingPeckDeepDrillingSequence.CoordinateSystem,
                        millingPeckDeepDrillingSequence.Material,
                        Tool as MillingDrillingTool,
                        StepOver,
                        DrillStart,
                        DrillEnd,
                        SpeedFinish,
                        FeedFinish,
                        millingPeckDeepDrillingSequence.Holes,
                        millingPeckDeepDrillingSequence.Polar, 
                        millingPeckDeepDrillingSequence.SafePlane);
                    return CurrentSequence.Operation;

                case MillingPeckDrillingSequence millingPeckDrillingSequence:
                    CurrentSequence = new MillingPeckDrillingSequence(
                        millingPeckDrillingSequence.Machine,
                        millingPeckDrillingSequence.CoordinateSystem,
                        millingPeckDrillingSequence.Material,
                        Tool as MillingDrillingTool,
                        StepOver,
                        DrillStart,
                        DrillEnd,
                        SpeedFinish,
                        FeedFinish,
                        millingPeckDrillingSequence.Holes,
                        millingPeckDrillingSequence.Polar, 
                        millingPeckDrillingSequence.SafePlane);
                    return CurrentSequence.Operation;

                case MillingTappingSequence millingTappingSequence:
                    CurrentSequence = new MillingTappingSequence(
                        millingTappingSequence.Machine,
                        millingTappingSequence.CoordinateSystem,
                        Tool as MillingTappingTool,
                        TappingCutSpeed,
                        DrillStart,
                        DrillEnd,
                        millingTappingSequence.Holes,
                        millingTappingSequence.Polar, 
                        millingTappingSequence.SafePlane);
                    return CurrentSequence.Operation;

                case MillingCustomSequence millingCustomSequence:
                    CurrentSequence = new MillingCustomSequence(
                        millingCustomSequence.Machine,
                        millingCustomSequence.CoordinateSystem,
                        Tool,
                        CustomOperation,
                        Coolant,
                        millingCustomSequence.Polar, 
                        millingCustomSequence.SafePlane);
                    return CurrentSequence.Operation;

                // токарные
                case FacingSequence facingSequence:
                    CurrentSequence = new FacingSequence(
                        facingSequence.Machine,
                        facingSequence.Material,
                        Tool as TurningExternalTool,
                        ExternalDiameter,
                        InternalDiameter,
                        RoughStockAllow,
                        ProfStockAllow,
                        StepOver,
                        facingSequence.SeqNumbers,
                        BluntType,
                        CustomChamferAngle,
                        CustomChamferBlunt,
                        CornerBlunt, 
                        SpeedRough, 
                        SpeedFinish, 
                        FeedRough, 
                        FeedFinish);
                    return CurrentSequence.Operation;

                case FinishFacingCycleSequence:
                    CurrentSequence = new FinishFacingCycleSequence(Tool as TurningExternalTool, RepeatableRoughFacingSequence, SpeedFinish, FeedFinish);
                    return CurrentSequence.Operation;

                case FinishFacingSequence finishFacingSequence:
                    CurrentSequence = new FinishFacingSequence(
                        finishFacingSequence.Machine,
                        finishFacingSequence.Material,
                        Tool as TurningExternalTool,
                        ExternalDiameter,
                        InternalDiameter,
                        ProfStockAllow,
                        BluntType,
                        CustomChamferAngle,
                        CustomChamferBlunt,
                        CornerBlunt, 
                        SpeedFinish, 
                        FeedFinish);
                    return CurrentSequence.Operation;

                case LimiterSequence limiterSequence:
                    CurrentSequence = new LimiterSequence(limiterSequence.Machine, Tool, ExternalDiameter);
                    return CurrentSequence.Operation;

                case RoughFacingCycleSequence roughFacingCycleSequence:
                    CurrentSequence = new RoughFacingCycleSequence(
                        roughFacingCycleSequence.Machine,
                        roughFacingCycleSequence.Material,
                        Tool as TurningExternalTool,
                        ExternalDiameter,
                        InternalDiameter,
                        RoughStockAllow,
                        ProfStockAllow,
                        StepOver,
                        roughFacingCycleSequence.SeqNumbers,
                        BluntType,
                        CustomChamferAngle,
                        CustomChamferBlunt,
                        CornerBlunt, 
                        SpeedRough, 
                        FeedRough);
                    return CurrentSequence.Operation;

                case RoughFacingSequence roughFacingSequence:
                    CurrentSequence = new RoughFacingSequence(
                        roughFacingSequence.Machine,
                        roughFacingSequence.Material,
                        Tool as TurningExternalTool,
                        ExternalDiameter,
                        InternalDiameter,
                        RoughStockAllow,
                        ProfStockAllow,
                        StepOver,
                        roughFacingSequence.SeqNumbers,
                        BluntType,
                        CustomChamferAngle,
                        CustomChamferBlunt,
                        CornerBlunt,
                        SpeedRough,
                        FeedRough);
                    return CurrentSequence.Operation;

                case ThreadCuttingSequence threadCuttingSequence:
                    CurrentSequence = new ThreadCuttingSequence(
                        threadCuttingSequence.Machine,
                        Tool as ThreadingTool,
                        ThreadStandard,
                        ThreadType,
                        ThreadDiameter,
                        ThreadPitch,
                        ThreadStart,
                        ThreadEnd,
                        ThreadNptPlane,
                        SpeedFinish);
                    return CurrentSequence.Operation;

                case TurningCutOffSequence turningCutOffSequence:
                    CurrentSequence = new TurningCutOffSequence(
                        turningCutOffSequence.Machine,
                        turningCutOffSequence.Material,
                        Tool as GroovingExternalTool,
                        CuttingPoint,
                        ExternalDiameter,
                        InternalDiameter,
                        CornerBlunt,
                        StepOver,
                        BluntType,
                        CustomChamferAngle,
                        CustomChamferBlunt,
                        SpeedFinish,
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningExternalGroovingSequence turningExternalGroovingSequence:
                    CurrentSequence = new TurningExternalGroovingSequence(
                        turningExternalGroovingSequence.Machine,
                        turningExternalGroovingSequence.Material,
                        Tool as GroovingExternalTool,
                        CuttingPoint,
                        ExternalDiameter,
                        InternalDiameter,
                        Width,
                        StepOver,
                        ProfStockAllow,
                        OuterBlunt,
                        InnerBlunt,
                        BluntType,
                        InnerBluntType,
                        SpeedRough,
                        SpeedFinish,
                        FeedRough,
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningFaceGroovingSequence turningFaceGroovingSequence:
                    CurrentSequence = new TurningFaceGroovingSequence(
                        turningFaceGroovingSequence.Machine,
                        turningFaceGroovingSequence.Material,
                        Tool as GroovingFaceTool,
                        CuttingPoint,
                        ExternalDiameter,
                        InternalDiameter,
                        StartPoint,
                        StepOver,
                        ProfStockAllow,
                        OuterBlunt,
                        InnerBlunt,
                        BluntType,
                        InnerBluntType,
                        SpeedRough,
                        SpeedFinish,
                        FeedRough,
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningInternalGroovingSequence turningInternalGroovingSequence:
                    CurrentSequence = new TurningInternalGroovingSequence(
                        turningInternalGroovingSequence.Machine,
                        turningInternalGroovingSequence.Material,
                        Tool as GroovingInternalTool,
                        CuttingPoint,
                        ExternalDiameter,
                        InternalDiameter,
                        Width,
                        StepOver,
                        ProfStockAllow,
                        OuterBlunt,
                        InnerBlunt,
                        BluntType,
                        InnerBluntType,
                        SpeedRough,
                        SpeedFinish,
                        FeedRough,
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningHighSpeedDrillingSequence turningHighSpeedDrillingSequence:
                    CurrentSequence = new TurningHighSpeedDrillingSequence(
                        turningHighSpeedDrillingSequence.Machine,
                        turningHighSpeedDrillingSequence.Material,
                        Tool as TurningDrillingTool,
                        DrillStart,
                        DrillEnd, 
                        SpeedFinish, 
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningPeckDeepDrillingSequence turningPeckDeepDrillingSequence:
                    CurrentSequence = new TurningPeckDeepDrillingSequence(
                        turningPeckDeepDrillingSequence.Machine,
                        turningPeckDeepDrillingSequence.Material,
                        Tool as TurningDrillingTool,
                        StepOver,
                        DrillStart,
                        DrillEnd, 
                        SpeedFinish, 
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningPeckDrillingSequence turningPeckDrillingSequence:
                    CurrentSequence = new TurningPeckDrillingSequence(
                        turningPeckDrillingSequence.Machine,
                        turningPeckDrillingSequence.Material,
                        Tool as TurningDrillingTool,
                        StepOver,
                        DrillStart,
                        DrillEnd, 
                        SpeedFinish, 
                        FeedFinish);
                    return CurrentSequence.Operation;

                case TurningTappingSequence turningTappingSequence:
                    CurrentSequence = new TurningTappingSequence(
                        turningTappingSequence.Machine,
                        Tool as TurningTappingTool,
                        TappingCutSpeed,
                        DrillStart,
                        DrillEnd);
                    return CurrentSequence.Operation;

                case TurningCustomSequence turningCustomSequence:
                    CurrentSequence = new TurningCustomSequence(turningCustomSequence.Machine, Tool, CustomOperation);
                    return CurrentSequence.Operation;

                default:
                    return string.Empty;
            }
        }
    }
    #endregion

    async Task Submit()
    {
        Program[Program.IndexOf(Sequence)] = CurrentSequence;
        Mode = Mode.General;
        await ModeChanged.InvokeAsync(Mode);
    }

    string BluntLabel(Blunt bluntType) => bluntType == Blunt.CustomChamfer ? "Размер фаски" : "Величина притупления";

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;

        switch (ThreadStandard)
        {
            case ThreadStandard.BSPP:
            {
                Thread.GetBsppValues(CurrentThreadTemplate, out string diameter, out string pitch);
                ThreadDiameter = diameter.GetDouble();
                ThreadPitch = pitch.GetDouble();
                ThreadNptPlane = 0;
                break;
            }
            case ThreadStandard.NPT:
            {
                Thread.GetNptValues(CurrentThreadTemplate, out string externalDiameter, out string internalDiameter, out string pitch, out double planeLength, out double threadLength);
                ThreadDiameter = externalDiameter.GetDouble();
                ThreadPitch = pitch.GetDouble();
                ThreadEnd = (-threadLength); // наверно тоже строку стоит возвращать
                ThreadNptPlane = planeLength;
                break;
            }
        }
    }
}