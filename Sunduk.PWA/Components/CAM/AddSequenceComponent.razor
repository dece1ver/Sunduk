@using Sunduk.PWA.Infrastructure.Tools.Turning.Base
<MudGrid Spacing=1>
    <MudItem xs="12" md="4">
        <MudSelect Label="Тип" T="SequenceType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnSequenceChanged">
            <MudSelectItem Value="@SequenceType.General">Общие</MudSelectItem>
            @if (MachineType == MachineType.Turning)
            {
                <MudSelectItem Value="@SequenceType.ExternalTurning">Наружное точение</MudSelectItem>
            }
            <MudSelectItem Value="@SequenceType.Drilling">Сверление</MudSelectItem>
            <MudSelectItem Value="@SequenceType.Threading">Нарезание резьбы</MudSelectItem>
            @if (MachineType == MachineType.Turning)
            {
                <MudSelectItem Value="@SequenceType.Grooving">Обработка канавок и отрезка</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    @switch (Type)
    {
        #region Общие
        case SequenceType.General:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="GeneralSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GeneralSequence">
                    @if (MachineType == MachineType.Turning)
                    {
                        <MudSelectItem Value="@(GeneralSequences.Limiter)">Упор</MudSelectItem>
                    }
                    <MudSelectItem Value="@(GeneralSequences.ToolCall)">Вызов инструмента</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @if (MachineType == MachineType.Turning)
                    {
                        @foreach (var tool in Tools.Where(x =>
                  x is SpecialTurningTool ||
                  x is TurningExternalTool ||
                  x is TurningInternalTool ||
                  x is GroovingExternalTool ||
                  x is GroovingInternalTool ||
                  x is ThreadingExternalTool ||
                  x is ThreadingInternalTool ||
                  x is TurningDrillingTool ||
                  x is TurningTappingTool
                  ))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                    @if (MachineType == MachineType.Milling)
                    {
                        @foreach (var tool in Tools.Where(x =>
                  x is MillingDrillingTool ||
                  x is MillingTappingTool ||
                  x is MillingTool
                  ))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            @if (GeneralSequence == GeneralSequences.ToolCall || MachineType == MachineType.Milling)
            {
                <MudItem xs="12" md="6">
                    <MudSelect Label="Тип охлаждения" T="CoolantType" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Coolant">
                        <MudSelectItem Value="@(CoolantType.General)">Обычный</MudSelectItem>
                        <MudSelectItem Value="@(CoolantType.Through)">Через шпиндель</MudSelectItem>
                        <MudSelectItem Value="@(CoolantType.Blow)">Обдув</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="Тип системы координат" T="bool" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ToolCallPolar">
                        <MudSelectItem Value="false">Декартова</MudSelectItem>
                        <MudSelectItem Value="true">Полярная</MudSelectItem>
                    </MudSelect>
                </MudItem>
            }
            break;
        #endregion

        #region Токарные
        case SequenceType.ExternalTurning:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="TurningSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="TurningSequence">
                    <MudSelectItem Value="@(TurningSequences.RoughFacing)">Черновое торцевание</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishFacing)">Чистовое торцевание</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.RoughFacingCycle)">Черновое торцевание (Под G70)</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishFacingCycle)">Чистовое торцевание (G70)</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.Facing)">Торцевание (черновое + чистовое)</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.RoughTurning)">Черновое точение (не написано)</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishTurning)">Чистовое точение (не написано)</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @if (TurningSequence == TurningSequences.RoughFacing)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.RoughFacingCycle)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.FinishFacing)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.FinishFacingCycle)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="RepeatableRoughFacingSequence" Variant="Variant.Filled" Margin="Margin.Dense" Label="Черновая торцовка" T="Sequence">
                        @foreach (var seq in Program.Where(x => x is RoughFacingSequence || x is FacingSequence || x is RoughFacingCycleSequence))
                        {
                            if (seq is RoughFacingSequence)
                            {
                                <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                            }
                            if (seq is FacingSequence)
                            {
                                <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                            }
                            if (seq is RoughFacingCycleSequence)
                            {
                                <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.Facing)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.RoughTurning)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Х" @bind-Value="_ProfStockAllowX" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            break;
        #endregion

        #region Сверлильные
        case SequenceType.Drilling:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="DrillingSequences" @bind-Value="DrillingSequence" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="@(DrillingSequences.HighSpeedDrilling)">Высокоскоростное сверление</MudSelectItem>
                    <MudSelectItem Value="@(DrillingSequences.PeckingDrilling)">Прерывистое сверление</MudSelectItem>
                    <MudSelectItem Value="@(DrillingSequences.PeckingDeepDrilling)">Глубокое сверление</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @if (MachineType == MachineType.Turning)
                    {
                        @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                    @if (MachineType == MachineType.Milling)
                    {
                        @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            @if (DrillingSequence == DrillingSequences.HighSpeedDrilling)
            {
                <MudItem xs="12" md="6">
                    <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (DrillingSequence == DrillingSequences.PeckingDrilling)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Глубина" @bind-Value="_PeckingDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (DrillingSequence == DrillingSequences.PeckingDeepDrilling)
            {
                <MudItem xs="4">
                    <MudTextField Label="Глубина" @bind-Value="_PeckingDeepDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (MachineType == MachineType.Milling)
            {
                <MudItem xs="6">
                    <MudNumericField Label="Количество отверстий" T="int" Min="1" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.HolesConverter" ValueChanged="OnHolesCountChanged" />
                </MudItem>
                <MudItem xs="6">
                    <MudSelect Label="Расположение" T="HolesSetterType" @bind-Value="HolesSetter" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudSelectItem Value="@(HolesSetterType.Manual)">Вручную</MudSelectItem>
                        <MudSelectItem Value="@(HolesSetterType.Cylinder)">На цилиндре</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @if (HolesSetter == HolesSetterType.Cylinder)
                {
                    <MudItem xs="6">
                        <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="Начальный угол" @bind-Value="StartAngle" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                    </MudItem>
                }
                @if (HolesSetter == HolesSetterType.Manual)
                {
                    @foreach (var hole in Holes)
                    {
                        <MudItem xs="6" sm="4" md="3" lg="2">
                            <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                <MudGrid>
                                    <MudItem xs=6>
                                        <MudTextField Label="X" @bind-Value="Holes[Holes.IndexOf(hole)].X" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                    </MudItem>
                                    <MudItem xs=6>
                                        <MudTextField Label="Y" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                    </MudItem>
                                </MudGrid>
                            </MudField>
                        </MudItem>
                        
                    }

                }
            }
            break;
        #endregion

        #region Резьбонарезные
        case SequenceType.Threading:
            <MudItem xs="4">
                <MudSelect Label="Переход" T="ThreadingSequences" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadingSequenceChanged">
                    <MudSelectItem Value="@(ThreadingSequences.ThreadCutting)">Точение резьбы</MudSelectItem>
                    <MudSelectItem Value="@(ThreadingSequences.Tapping)">Нарезание метчиком</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (ThreadingSequence == ThreadingSequences.ThreadCutting)
            {
                if (ThreadType == CuttingType.External)
                {
                    <MudItem xs="4">
                        <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                if (ThreadType == CuttingType.Internal)
                {
                    <MudItem xs="4">
                        <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                @if (ThreadStandart == ThreadStandart.Metric)
                {
                    <MudItem xs="6">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                }
                @if (ThreadStandart == ThreadStandart.BSPP)
                {
                    <MudItem xs="4">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                            @foreach (string item in Thread.bsppTemplates)
                            {
                                <MudSelectItem Value="@(item)">
                                    <MudText>@item</MudText>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                }
                @if (ThreadStandart == ThreadStandart.Trapeziodal)
                {
                    <MudItem xs="6">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                }
                @if (ThreadStandart == ThreadStandart.NPT)
                {
                    <MudItem xs="4">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                            @foreach (string item in Thread.nptTemplates)
                            {
                                <MudSelectItem Value="@(item)">
                                    <MudText>@item</MudText>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                <MudItem xs="6">
                    <MudTextField Label="Диаметр резьбы" @bind-Value="_ThreadDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Шаг резьбы" @bind-Value="_ThreadPitch" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Начальная точка" @bind-Value="_ThreadStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Конечная точка" @bind-Value="_ThreadEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (ThreadingSequence == ThreadingSequences.Tapping)
            {
                <MudItem xs="4">
                    <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                        @foreach (var tool in Tools.Where(x => x is TurningTappingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Скорость резания" @bind-Value="_TapCutSpeed" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Начальная точка" @bind-Value="_TapStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Конечная точка" @bind-Value="_TapEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            break;
        #endregion

        #region Канавочные
        case SequenceType.Grooving:
            <MudItem xs="4">
                <MudSelect Label="Переход" T="GroovingSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GroovingSequence">
                    <MudSelectItem Value="@(GroovingSequences.Grooving)">Канавка</MudSelectItem>
                    <MudSelectItem Value="@(GroovingSequences.Cutting)">Отрезка</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="4">
                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            break;
        #endregion

        default:
            break;
    }
</MudGrid>
<MudItem Class="mt-4" xs="12" sm="12" md="12">
    <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Style="font-family: 'Roboto Mono', monospace; font-size: medium;" Variant="Variant.Filled" Text="@("\n" + ExampleText.Trim('\n'))" Lines="@(ExampleText.Trim('\n').Count(x => x == '\n') + 3)" />
</MudItem>
<MudItem Class="d-flex flex-row-reverse py-0 px-0 mt-4">
    <MudButton Variant="Variant.Outlined" Size="Size.Large" 
    EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary" 
    OnClick="Submit" Disabled="@(string.IsNullOrEmpty(ExampleText))">Добавить</MudButton>
</MudItem>


@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter]
    public List<Sequence> Program { get; set; }

    [Parameter]
    public Mode Mode { get; set; }

    [Parameter]
    public Material WorkpieceMaterial { get; set; }

    [Parameter]
    public Machine Machine { get; set; }

    [Parameter]
    public MachineType MachineType { get; set; }

    [Parameter]
    public double WorkpieceLength { get; set; }

    [Parameter]
    public double WorkpieceExternalDiameter { get; set; }

    [Parameter]
    public double WorkpieceInternalDiameter { get; set; }

    [Parameter]
    public double WorkpieceCurrentInternalDiameter { get; set; }

    [Parameter]
    public int CyclesCount { get; set; }

    [Parameter]
    public EventCallback<Mode> ModeChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Holes.Count == 0) Holes.Add(new Hole());
        HolesCount = 1;
        GeneralSequence = MachineType == MachineType.Turning ? GeneralSequences.Limiter : GeneralSequences.ToolCall;
    }

    #region Всякие OnChanged

    private void OnSequenceChanged(SequenceType value)
    {
        Type = value;
        Tool = null;
    }

    private void OnThreadingSequenceChanged(ThreadingSequences value)
    {
        ThreadingSequence = value;
        Tool = null;
    }

    private void OnCuttingTypeChanged(CuttingType value)
    {
        ThreadType = value;
        Tool = null;
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        if (ThreadStandart == ThreadStandart.Metric)
        {
            Thread.GetMetricValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.BSPP)
        {
            Thread.GetBSPPValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.Trapeziodal)
        {
            Thread.GetTrapezoidalValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.NPT)
        {
            Thread.GetNPTValues(CurrentThreadTemplate, out string externalDiameter, out string internalDiameter, out string pitch, out double planeLength, out double threadLength);
            _ThreadDiameter = externalDiameter;
            _ThreadPitch = pitch;
            _ThreadEnd = (-threadLength).ToPrettyString(); // наверно тоже строку стоит возвращать
            ThreadNPTPlane = planeLength;
        }
    }

    private void OnHolesCountChanged(int value)
    {
        if (value < 1) value = 1;
        HolesCount = value;
        while (Holes.Count < HolesCount)
        {
            Holes.Add(new Hole());
        }
        while (Holes.Count > HolesCount)
        {
            Holes.Remove(Holes[^1]);
        }
    }
    #endregion


    #region Типы переходов
    public SequenceType Type { get; set; } 

    public enum GeneralSequences
    {
        Limiter,
        ToolCall
    }

    public GeneralSequences GeneralSequence { get; set; }

    public enum TurningSequences
    {
        RoughFacing,
        FinishFacing,
        RoughFacingCycle,
        FinishFacingCycle,
        Facing,
        RoughTurning,
        FinishTurning
    }

    public TurningSequences TurningSequence { get; set; }

    public enum DrillingSequences
    {
        HighSpeedDrilling,
        PeckingDrilling,
        PeckingDeepDrilling
    }

    public DrillingSequences DrillingSequence { get; set; }

    public enum ThreadingSequences
    {
        ThreadCutting, Tapping
    }

    public ThreadingSequences ThreadingSequence { get; set; }

    public enum GroovingSequences
    {
        Grooving,
        Cutting
    }

    public GroovingSequences GroovingSequence { get; set; }
    #endregion

    public Tool Tool { get; set; }

    public CoolantType Coolant { get; set; }
    public bool ToolCallPolar { get; set; }

    public Sequence RepeatableRoughFacingSequence { get; set; }

    public string CurrentThreadTemplate { get; set; }

    #region Точение резьбы
    public ThreadStandart ThreadStandart { get; set; }
    public CuttingType ThreadType { get; set; }

    public string _ThreadDiameter { get; set; }
    public double ThreadDiameter { get => Util.GetDouble(_ThreadDiameter, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadPitch { get; set; }
    public double ThreadPitch { get => Util.GetDouble(_ThreadPitch, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadStart { get; set; }
    public double ThreadStart { get => Util.GetDouble(_ThreadStart, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadEnd { get; set; } = "-";
    public double ThreadEnd { get => Util.GetDouble(_ThreadEnd, numberOption: Util.GetNumberOption.Any) - Math.Round(ThreadPitch, 1); }

    public double ThreadNPTPlane { get; set; }

    #endregion

    #region Резьбонарезание
    public string _TapCutSpeed { get; set; }
    public double TapCutSpeed { get => Util.GetDouble(_TapCutSpeed, numberOption: Util.GetNumberOption.Any); }

    public string _TapStart { get; set; }
    public double TapStart { get => Util.GetDouble(_TapStart, numberOption: Util.GetNumberOption.Any); }

    public string _TapEnd { get; set; } = "-";
    public double TapEnd { get => Util.GetDouble(_TapEnd, numberOption: Util.GetNumberOption.Any); }
    #endregion

    #region Токарка

    public string _StepOver { get; set; }
    public double StepOver { get => Util.GetDouble(_StepOver); }

    public string _RoughStockAllow { get; set; }
    public double RoughStockAllow { get => Util.GetDouble(_RoughStockAllow); }

    public string _ProfStockAllowX { get; set; }
    public double ProfStockAllowX { get => Util.GetDouble(_ProfStockAllowX); }

    public string _ProfStockAllowZ { get; set; }
    public double ProfStockAllowZ { get => Util.GetDouble(_ProfStockAllowZ); }

    #endregion

    #region Сверловка

    public string _DrillStart { get; set; }
    public double DrillStart { get => Util.GetDouble(_DrillStart, numberOption: Util.GetNumberOption.Any); }

    public string _DrillEnd { get; set; } = "-";
    public double DrillEnd { get => Util.GetDouble(_DrillEnd, numberOption: Util.GetNumberOption.Any); }

    public string _PeckingDepth { get; set; } = "0.25";
    public double PeckingDepth { get => Util.GetDouble(_PeckingDepth); }

    public string _PeckingDeepDepth { get; set; } = "2";
    public double PeckingDeepDepth { get => Util.GetDouble(_PeckingDeepDepth); }

    private List<Hole> Holes { get; set; } = new();
    private int HolesCount { get; set; } = 1;

    private double HolesRadius { get; set; }
    private double StartAngle { get; set; } = 0;

    private enum HolesSetterType { Manual, Cylinder}
    private HolesSetterType HolesSetter { get; set; }


    #endregion


    #region Примеры

    public string ExampleText
    {
        get
        {
            if (Type == SequenceType.General && GeneralSequence == GeneralSequences.Limiter)
            {
                return Operation.Limiter(Machine, Tool, WorkpieceExternalDiameter);
            }
            if (Type == SequenceType.General && GeneralSequence == GeneralSequences.ToolCall)
            {
                return Operation.ToolCall(Machine, Tool, Coolant, ToolCallPolar);
            }

            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.Facing)
            {
                return Operation.Facing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), RoughStockAllow, ProfStockAllowZ, StepOver, CyclesCount.GetCycleRange());
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.RoughFacing)
            {
                return Operation.RoughFacing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), RoughStockAllow, ProfStockAllowZ, StepOver, CyclesCount.GetCycleRange());
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.RoughFacingCycle)
            {
                return Operation.RoughFacingCycle(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), RoughStockAllow, ProfStockAllowZ, StepOver, CyclesCount.GetCycleRange());
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.FinishFacingCycle)
            {
                return RepeatableRoughFacingSequence switch
                {
                    RoughFacingSequence => Operation.FinishFacingCycleFromRoughFacing(Tool as TurningExternalTool, RepeatableRoughFacingSequence as RoughFacingSequence),
                    RoughFacingCycleSequence => Operation.FinishFacingCycleFromRoughCycleFacing(Tool as TurningExternalTool, RepeatableRoughFacingSequence as RoughFacingCycleSequence),
                    FacingSequence => Operation.FinishFacingCycleFromFacing(Tool as TurningExternalTool, RepeatableRoughFacingSequence as FacingSequence),
                    _ => string.Empty
                };
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.FinishFacing)
            {
                return Operation.FinishFacing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), ProfStockAllowZ);
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.HighSpeedDrilling)
            {
                return MachineType switch
                {
                    MachineType.Turning => Operation.TurningHighSpeedDrilling(Machine, WorkpieceMaterial, Tool as TurningDrillingTool, DrillStart, DrillEnd),
                    MachineType.Milling => Operation.MillingHighSpeedDrilling(
                        Machine,
                        WorkpieceMaterial,
                        Tool as MillingDrillingTool,
                        DrillStart,
                        DrillEnd,
                        HolesSetter == HolesSetterType.Cylinder ? PolarHoles(HolesCount, HolesRadius, StartAngle) : Holes,
                        HolesSetter == HolesSetterType.Cylinder ? true : false),
                    _ => string.Empty
                };
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDrilling)
            {
                return Operation.PeckDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, PeckingDepth, DrillStart, DrillEnd);
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDeepDrilling)
            {
                return Operation.PeckDeepDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, PeckingDeepDepth, DrillStart, DrillEnd);
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting && ThreadType == CuttingType.External)
            {
                return Operation.ThreadCutting(Machine, Tool as ThreadingExternalTool, ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch, ThreadStart, ThreadEnd, ThreadNPTPlane);
            }
            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting && ThreadType == CuttingType.Internal)
            {
                return Operation.ThreadCutting(Machine, Tool as ThreadingInternalTool, ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch, ThreadStart, ThreadEnd, ThreadNPTPlane);
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.Tapping)
            {
                return Operation.Tapping(Machine, Tool as TurningTappingTool, TapCutSpeed, TapStart, TapEnd);
            }
            return string.Empty;
        }
    }
    #endregion

    async Task Submit()
    {
        Sequence sequence = new();
        switch (Type)
        {
            case SequenceType.General:
                switch (GeneralSequence)
                {
                    case GeneralSequences.Limiter:
                        sequence = new LimiterSequence(Machine, Tool, WorkpieceExternalDiameter)
                        { Name = $"Упор" };
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.ExternalTurning:
                switch (TurningSequence)
                {
                    case TurningSequences.Facing:
                        sequence = new FacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver,
                            CyclesCount.GetCycleRange())
                        { Name = $"Торцовка" };
                        break;
                    case TurningSequences.RoughFacing:
                        sequence = new RoughFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceCurrentInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver,
                            CyclesCount.GetCycleRange())
                        { Name = $"Черновая торцовка" };
                        break;
                    case TurningSequences.RoughFacingCycle:
                        sequence = new RoughFacingCycleSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceCurrentInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver,
                            CyclesCount.GetCycleRange())
                        { Name = $"Черновая торцовка (Под G70)" };
                        break;
                    case TurningSequences.FinishFacing:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceCurrentInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"Чистовая торцовка" };
                        break;
                    case TurningSequences.FinishFacingCycle:
                        switch (RepeatableRoughFacingSequence)
                        {
                            case RoughFacingSequence:
                                sequence = new FinishFacingCycleSequence(
                                    Tool as TurningExternalTool,
                                    RepeatableRoughFacingSequence as RoughFacingSequence)
                                { Name = "Чистовая торцовка (G70)" };
                                break;
                            case RoughFacingCycleSequence:
                                sequence = new FinishFacingCycleSequence(
                                    Tool as TurningExternalTool,
                                    RepeatableRoughFacingSequence as RoughFacingCycleSequence)
                                { Name = "Чистовая торцовка (G70)" };
                                break;
                            case FacingSequence:
                                sequence = new FinishFacingCycleSequence(
                                    Tool as TurningExternalTool,
                                    RepeatableRoughFacingSequence as FacingSequence)
                                { Name = "Чистовая торцовка (G70)" };
                                break;
                            default:
                                break;
                        }
                        break;
                    case TurningSequences.RoughTurning:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"Чистовая торцовка" };
                        break;
                    case TurningSequences.FinishTurning:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"Чистовая торцовка" };
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.InternalTurning:
                break;
            case SequenceType.Drilling:
                switch (DrillingSequence)
                {
                    case DrillingSequences.HighSpeedDrilling:
                        if (MachineType == MachineType.Turning)
                        {
                            sequence = new TurningHighSpeedDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as TurningDrillingTool,
                                DrillStart,
                                DrillEnd)
                            { Name = "Сверление" };
                        }
                        if (MachineType == MachineType.Milling)
                        {
                            sequence = new MillingHighSpeedDrillingSequence(
                                Machine,
                        WorkpieceMaterial,
                        Tool as MillingDrillingTool,
                        DrillStart,
                        DrillEnd,
                        HolesSetter == HolesSetterType.Cylinder ? PolarHoles(HolesCount, HolesRadius, StartAngle) : Holes,
                        HolesSetter == HolesSetterType.Cylinder ? true : false)
                            { Name = "Сверление" };
                        }
                        break;
                    case DrillingSequences.PeckingDrilling:
                        if (MachineType == MachineType.Turning)
                        {
                            sequence = new TurningPeckDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as TurningDrillingTool,
                                PeckingDepth,
                                DrillStart,
                                DrillEnd)
                            { Name = "Сверление с выходом" };
                        }
                        if (MachineType == MachineType.Milling)
                        {
                            sequence = new MillingPeckDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as MillingDrillingTool,
                                PeckingDepth,
                                DrillStart,
                                DrillEnd,
                                Holes)
                            { Name = "Сверление с выходом" };
                        }
                        break;
                    case DrillingSequences.PeckingDeepDrilling:
                        if (MachineType == MachineType.Turning)
                        {
                            sequence = new TurningPeckDeepDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as TurningDrillingTool,
                                PeckingDeepDepth,
                                DrillStart,
                                DrillEnd)
                            { Name = "Глубокое сверление" };
                        }
                        if (MachineType == MachineType.Milling)
                        {
                            sequence = new MillingPeckDeepDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as MillingDrillingTool,
                                PeckingDeepDepth,
                                DrillStart,
                                DrillEnd,
                                Holes)
                            { Name = "Глубокое сверление" };
                        }
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.Threading:
                switch (ThreadingSequence)
                {
                    case ThreadingSequences.ThreadCutting:
                        sequence = new ThreadCuttingSequence(
                            Machine,
                            Tool as ThreadingTool,
                            ThreadStandart,
                            ThreadType,
                            ThreadDiameter,
                            ThreadPitch,
                            ThreadStart,
                            ThreadEnd,
                            ThreadNPTPlane)
                        { Name = "Точение резьбы" };
                        break;
                    case ThreadingSequences.Tapping:
                        sequence = new TurningTappingSequence(
                    Machine,
                    Tool as TurningTappingTool,
                    TapCutSpeed,
                    TapStart,
                    TapEnd)
                        { Name = "Нарезание резьбы" };
                        break;
                    default:
                        break;
                }
                break;

            case SequenceType.Grooving:
                break;
            default:
                break;
        }
        Program.Add(sequence);
        Mode = Mode.General;
        await ModeChanged.InvokeAsync(Mode);
    }

    private List<Hole> PolarHoles(int holesCount, double radius, double startAngle)
    {
        List<Hole> result = new();
        double angleStep = 360 / holesCount;
        while (startAngle >= 360) startAngle -= 360; 
        while (startAngle <= -360) startAngle += 360; 
        for (int i = 0; i < holesCount; i++)
        {
            result.Add(new Hole(radius, angleStep * i + startAngle));
        }
        return result;
    }
}
