<MudGrid Spacing="1">
    <MudItem xs="12" md="4">
        <MudSelect Label="Тип" T="SequenceType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnSequenceChanged">
            <MudSelectItem Value="@SequenceType.General">Общие</MudSelectItem>
            @if (MachineType == MachineType.Turning)
            {
                <MudSelectItem Value="@SequenceType.Facing">Обработка торца</MudSelectItem>
                <MudSelectItem Value="@SequenceType.ExternalTurning">Наружное точение</MudSelectItem>
                <MudSelectItem Value="@SequenceType.Grooving">Обработка канавок и отрезка</MudSelectItem>
                <MudSelectItem Value="@SequenceType.Burnishing">Накатка</MudSelectItem>
            }
            <MudSelectItem Value="@SequenceType.Drilling">Сверление</MudSelectItem>
            <MudSelectItem Value="@SequenceType.Threading">Нарезание резьбы</MudSelectItem>
        </MudSelect>
    </MudItem>

    @switch (Type)
    {
        // Общие
        case SequenceType.General:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="GeneralSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GeneralSequence">
                    @if (MachineType == MachineType.Turning)
                    {
                        <MudSelectItem Value="@(GeneralSequences.Limiter)">Упор</MudSelectItem>
                    }
                    <MudSelectItem Value="@(GeneralSequences.CustomOperation)">Произвольная операция</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect T="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool" ValueChanged="OnToolChanged">
                    @if (MachineType == MachineType.Turning)
                    {
                        @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Turning))
                        {
                            <MudSelectItem Value="@tool" Style="font-family: 'Roboto Mono', monospace;">@tool.Description()</MudSelectItem>
                        }
                    }
                    @if (MachineType == MachineType.Milling)
                    {
                        @foreach (var tool in Tools.Where(x => x.MachineType is MachineType.Milling))
                        {
                            <MudSelectItem Value="@tool" Style="font-family: 'Roboto Mono', monospace;">@tool.Description()</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            @if (GeneralSequence == GeneralSequences.CustomOperation && MachineType == MachineType.Milling)
            {
                <MudItem xs="12" md="6">
                    <MudSelect Label="Тип охлаждения" T="Coolant" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Coolant">
                        <MudSelectItem Value="@(Coolant.General)">Обычный</MudSelectItem>
                        <MudSelectItem Value="@(Coolant.Through)">Через шпиндель</MudSelectItem>
                        <MudSelectItem Value="@(Coolant.Full)">Вся подача СОЖ</MudSelectItem>
                        <MudSelectItem Value="@(Coolant.Blow)">Обдув</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="Тип системы координат" T="bool" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ToolCallPolar">
                        <MudSelectItem Value="false">Декартова</MudSelectItem>
                        <MudSelectItem Value="true">Полярная</MudSelectItem>
                    </MudSelect>
                </MudItem>
            }
            @if (GeneralSequence == GeneralSequences.CustomOperation)
            {
                <MudItem xs="12">
                    <MudTextField @bind-Value="CustomOperation" Label="Произвольная обработка" T="string" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Lines="@(CustomOperation is null ? 1 : CustomOperation.Count(x => x == '\n') + 2)" />
                </MudItem>
            }
            break;


        // Обработка торца
        case SequenceType.Facing:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="TurningSequences" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTurningSequenceChanged">
                    <MudSelectItem Value="@(TurningSequences.RoughFacing)">@("Черновое торцевание")</MudSelectItem>
                        <MudSelectItem Value="@(TurningSequences.FinishFacing)">@("Чистовое торцевание")</MudSelectItem>
                        <MudSelectItem Value="@(TurningSequences.RoughFacingCycle)">@("Черновое торцевание (Под G70)")</MudSelectItem>
                        <MudSelectItem Value="@(TurningSequences.FinishFacingCycle)">@("Чистовое торцевание (G70)")</MudSelectItem>
                        <MudSelectItem Value="@(TurningSequences.Facing)">@("Торцевание (черновое + чистовое)")</MudSelectItem>
                    </MudSelect>
                </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @switch (TurningSequence)
            {
                case TurningSequences.RoughFacing:
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Общий припуск" @bind-Value="_FacingRoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case TurningSequences.RoughFacingCycle:
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Общий припуск" @bind-Value="_FacingRoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case TurningSequences.FinishFacing:
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case TurningSequences.FinishFacingCycle:
                    <MudItem xs="12">
                        <MudSelect @bind-Value="RepeatableRoughFacingSequence" Variant="Variant.Filled" Margin="Margin.Dense" Label="Черновая торцовка" T="Sequence">
                            @foreach (var seq in Program.Where(x => x is RoughFacingSequence || x is FacingSequence || x is RoughFacingCycleSequence))
                            {
                                switch (seq)
                                {
                                    case RoughFacingSequence:
                                    case FacingSequence:
                                    case RoughFacingCycleSequence:
                                        <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                                        break;
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    break;
                case TurningSequences.Facing:
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Общий припуск" @bind-Value="_FacingRoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case TurningSequences.RoughTurning:
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Чистовой припуск по Х" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case TurningSequences.FinishTurning:
                    <MudItem xs="12">
                        <ContourComponent></ContourComponent>
                    </MudItem>
                    break;
            }
            @if (TurningSequence is not TurningSequences.FinishFacingCycle)
            {
                <MudItem xs="12" md="@(_MediumBluntFieldSize)">
                    <MudTextField Label="@BluntLabel(FacingBluntType)" @bind-Value="_FacingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true"
                    @onfocusin="@(() => _calcFacingChamferDiameter = true)" />
                </MudItem>
                <MudItem xs="12" md="@(_MediumBluntFieldSize)">
                    <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="FacingBluntType" Margin="Margin.Dense">
                        <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @if (FacingBluntType == Blunt.CustomChamfer)
                {
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Угол фаски" @bind-Value="_FacingCustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Конечный диаметр фаски" @bind-Value="_FacingCustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true"
                        @onfocusin="@(() => _calcFacingChamferDiameter = false)" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Скругление на фаске" @bind-Value="_FacingCustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                }
            }
            if (TurningSequence is TurningSequences.RoughFacing or TurningSequences.RoughFacingCycle or TurningSequences.RoughTurning)
            {
                <MudItem xs="6" md="6">
                    <MudTextField Label="Черновая Vc" @bind-Value="SpeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6" md="6">
                    <MudTextField Label="Черновая F" @bind-Value="_FeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            else if (TurningSequence is TurningSequences.FinishFacingCycle or TurningSequences.FinishFacing or TurningSequences.FinishTurning)
            {
                <MudItem xs="6" md="6">
                    <MudTextField Label="Чистовая Vc" @bind-Value="SpeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6" md="6">
                    <MudTextField Label="Чистовая F" @bind-Value="_FeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            else
            {
                <MudItem xs="6" md="3">
                    <MudTextField Label="Черновая Vc" @bind-Value="SpeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudTextField Label="Черновая F" @bind-Value="_FeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudTextField Label="Чистовая Vc" @bind-Value="SpeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6" md="3">
                    <MudTextField Label="Чистовая F" @bind-Value="_FeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            break;


        // Точение наружное
        case SequenceType.ExternalTurning:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="TurningSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="TurningSequence">
                    <MudSelectItem Value="@(TurningSequences.RoughTurning)">Черновое точение (не написано)</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishTurning)">Чистовое точение (не написано)</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool && (x as TurningExternalTool).Type == TurningExternalTool.Types.Bar))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12">
                <ContourComponent></ContourComponent>
            </MudItem>
            break;


        //Сверлильные
        case SequenceType.Drilling:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="DrillingSequences" @bind-Value="DrillingSequence" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="@(DrillingSequences.HighSpeedDrilling)">Высокоскоростное сверление</MudSelectItem>
                    <MudSelectItem Value="@(DrillingSequences.PeckingDrilling)">Прерывистое сверление</MudSelectItem>
                    <MudSelectItem Value="@(DrillingSequences.PeckingDeepDrilling)">Глубокое сверление</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect ValueChanged="OnToolChanged" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @if (MachineType == MachineType.Turning)
                    {
                        @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                    @if (MachineType == MachineType.Milling)
                    {
                        @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            switch (DrillingSequence)
            {
                case DrillingSequences.HighSpeedDrilling:
                    <MudItem xs="12" sm="6" md="6">
                        <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="6">
                        <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case DrillingSequences.PeckingDrilling:
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Глубина" @bind-Value="_PeckingDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case DrillingSequences.PeckingDeepDrilling:
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Глубина" @bind-Value="_PeckingDeepDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;

            }
            @if (MachineType == MachineType.Milling)
            {
                <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                    <MudNumericField Label="Количество отверстий" T="int" Min="1" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.HolesConverter" ValueChanged="OnHolesCountChanged" />
                </MudItem>
                <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                    <MudSelect Label="Расположение" T="HolesSetterType" @bind-Value="HolesSetter" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudSelectItem Value="@(HolesSetterType.Manual)">Вручную</MudSelectItem>
                        <MudSelectItem Value="@(HolesSetterType.Cylinder)">На цилиндре</MudSelectItem>
                        <MudSelectItem Value="@(HolesSetterType.EvenlyCylinder)">Равномерно на цилиндре</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @switch (HolesSetter)
                {
                    case HolesSetterType.EvenlyCylinder:
                        <MudItem xs="6">
                            <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Начальный угол" @bind-Value="StartAngle" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                        </MudItem>
                        break;
                    case HolesSetterType.Cylinder:
                        <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                            <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                        </MudItem>
                        @foreach (var hole in Holes)
                        {
                            <MudItem xs="6" sm="4" md="3" lg="2">
                                @* ReSharper disable once UnknownCssClass *@
                                <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                    <MudGrid>
                                        <MudItem xs=12>
                                            <MudTextField Label="Угол" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                        </MudItem>
                                    </MudGrid>
                                </MudField>
                            </MudItem>
                        }
                        break;
                    case HolesSetterType.Manual:
                        @foreach (var hole in Holes)
                        {
                            <MudItem xs="6" sm="4" md="3" lg="2">
                                @* ReSharper disable once UnknownCssClass *@
                                <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                    <MudGrid>
                                        <MudItem xs=6>
                                            <MudTextField Label="X" @bind-Value="Holes[Holes.IndexOf(hole)].X" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                        </MudItem>
                                        <MudItem xs=6>
                                            <MudTextField Label="Y" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                        </MudItem>
                                    </MudGrid>
                                </MudField>
                            </MudItem>
                        }
                        break;
                }
            }
            <MudItem xs="6" md="6">
                <MudTextField Label="Скорость резания" @bind-Value="SpeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
            </MudItem>
            <MudItem xs="6" md="6">
                <MudTextField Label="Подача" @bind-Value="_FeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
            </MudItem>
            break;


        //Резьбонарезные
        case SequenceType.Threading:
            <MudItem xs="12" sm="6" md="4">
                <MudSelect Label="Переход" T="ThreadingSequences" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadingSequenceChanged">
                    @if (MachineType == MachineType.Turning)
                    {
                        <MudSelectItem Value="@(ThreadingSequences.ThreadCutting)">Точение резьбы</MudSelectItem>
                    }
                    <MudSelectItem Value="@(ThreadingSequences.Tapping)">Нарезание метчиком</MudSelectItem>
                    @if (MachineType == MachineType.Milling)
                    {
                        <MudSelectItem Value="@(ThreadingSequences.ThreadMilling)">Резьбофрезерование</MudSelectItem>
                        <MudSelectItem Value="@(ThreadingSequences.CustomThreadMilling)">Резьбофрезерование (G165)</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            switch (ThreadingSequence)
            {
                case ThreadingSequences.ThreadCutting:
                    switch (ThreadType)
                    {
                        case CuttingType.External:
                            <MudItem xs="12" sm="6" md="4">
                                <MudSelect ValueChanged="OnToolChanged" Variant="@Variant.Filled" Margin="@Margin.Dense" Label="Инструмент" T="Tool">
                                    @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                                    {
                                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            break;
                        case CuttingType.Internal:
                            <MudItem xs="12" sm="6" md="4">
                                <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                    @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                                    {
                                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            break;
                    }
                    <MudItem xs="6" sm="6" md="ThreadStandard is ThreadStandard.Metric or ThreadStandard.Trapezoidal ? 6 : 4">
                        <MudSelect Label="Стандарт" T="ThreadStandard" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandard">
                            <MudSelectItem Value="@(ThreadStandard.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandard.BSPP)">Трубная цилиндрическая 55° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandard.Trapezoidal)">Трапецеидальная 30° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandard.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="ThreadStandard is ThreadStandard.Metric or ThreadStandard.Trapezoidal ? 6 : 4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    switch (ThreadStandard)
                    {
                        case ThreadStandard.BSPP:
                            <MudItem xs="6" sm="6" md="4">
                                <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                                    @foreach (var item in Thread.BsppTemplates)
                                    {
                                        <MudSelectItem Value="@(item)">
                                            <MudText>@item</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            break;
                        case ThreadStandard.NPT:
                            <MudItem xs="6" sm="6" md="4">
                                <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                                    @foreach (var item in Thread.NptTemplates)
                                    {
                                        <MudSelectItem Value="@(item)">
                                            <MudText>@item</MudText>
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            break;
                    }
                    <MudItem xs="6" md="4">
                        <MudTextField Label="Диаметр резьбы" @bind-Value="_ThreadDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="6" md="4">
                        <MudTextField Label="Шаг резьбы" @bind-Value="_ThreadPitch" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Скорость резания" @bind-Value="SpeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="6" md="3">
                        <MudTextField Label="Начальная точка" @bind-Value="_ThreadStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="6" md="3">
                        <MudTextField Label="Конечная точка" @bind-Value="_ThreadEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
                case ThreadingSequences.Tapping:
                    <MudItem xs="4">
                        <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @if (MachineType == MachineType.Turning)
                            {
                                @foreach (var tool in Tools.Where(x => x is TurningTappingTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            }
                            @if (MachineType == MachineType.Milling)
                            {
                                @foreach (var tool in Tools.Where(x => x is MillingTappingTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Скорость резания" @bind-Value="_TapCutSpeed" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Начальная точка" @bind-Value="_TapStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Конечная точка" @bind-Value="_TapEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    @if (MachineType == MachineType.Milling)
                    {
                        <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                            <MudNumericField Label="Количество отверстий" T="int" Min="1" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.HolesConverter" ValueChanged="OnHolesCountChanged" />
                        </MudItem>
                        <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                            <MudSelect Label="Расположение" T="HolesSetterType" @bind-Value="HolesSetter" Variant="Variant.Filled" Margin="Margin.Dense">
                                <MudSelectItem Value="@(HolesSetterType.Manual)">Вручную</MudSelectItem>
                                <MudSelectItem Value="@(HolesSetterType.Cylinder)">На цилиндре</MudSelectItem>
                                <MudSelectItem Value="@(HolesSetterType.EvenlyCylinder)">Равномерно на цилиндре</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        switch (HolesSetter)
                        {
                            case HolesSetterType.Manual:
                                @foreach (var hole in Holes)
                                {
                                    <MudItem xs="6" sm="4" md="3" lg="2">
                                        <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                            <MudGrid>
                                                <MudItem xs=6>
                                                    <MudTextField Label="X" @bind-Value="Holes[Holes.IndexOf(hole)].X" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                                </MudItem>
                                                <MudItem xs=6>
                                                    <MudTextField Label="Y" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudField>
                                    </MudItem>
                                }
                                break;
                            case HolesSetterType.Cylinder:
                                <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                                    <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                                </MudItem>
                                @foreach (var hole in Holes)
                                {
                                    <MudItem xs="6" sm="4" md="3" lg="2">
                                        <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                            <MudGrid>
                                                <MudItem xs=12>
                                                    <MudTextField Label="Угол" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudField>
                                    </MudItem>
                                }
                                break;
                            case HolesSetterType.EvenlyCylinder:
                                <MudItem xs="6">
                                    <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Начальный угол" @bind-Value="StartAngle" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                                </MudItem>
                                break;
                        }
                    }
                    break;
                case ThreadingSequences.CustomThreadMilling or ThreadingSequences.ThreadMilling:
                    <MudItem xs="4">
                        <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @if (MachineType == MachineType.Milling)
                            {
                                @foreach (var tool in Tools.Where(x => x is MillingThreadCuttingTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Скорость резания" @bind-Value="_TapCutSpeed" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Начальная точка" @bind-Value="_TapStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Label="Конечная точка" @bind-Value="_TapEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    @if (MachineType == MachineType.Milling)
                    {
                        <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                            <MudNumericField Label="Количество отверстий" T="int" Min="1" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.HolesConverter" ValueChanged="OnHolesCountChanged" />
                        </MudItem>
                        <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                            <MudSelect Label="Расположение" T="HolesSetterType" @bind-Value="HolesSetter" Variant="Variant.Filled" Margin="Margin.Dense">
                                <MudSelectItem Value="@(HolesSetterType.Manual)">Вручную</MudSelectItem>
                                <MudSelectItem Value="@(HolesSetterType.Cylinder)">На цилиндре</MudSelectItem>
                                <MudSelectItem Value="@(HolesSetterType.EvenlyCylinder)">Равномерно на цилиндре</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        switch (HolesSetter)
                        {
                            case HolesSetterType.Manual:
                                @foreach (var hole in Holes)
                                {
                                    <MudItem xs="6" sm="4" md="3" lg="2">
                                        <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                            <MudGrid>
                                                <MudItem xs=6>
                                                    <MudTextField Label="X" @bind-Value="Holes[Holes.IndexOf(hole)].X" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                                </MudItem>
                                                <MudItem xs=6>
                                                    <MudTextField Label="Y" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudField>
                                    </MudItem>
                                }
                                break;
                            case HolesSetterType.Cylinder:
                                <MudItem xs="@(HolesSetter is HolesSetterType.Cylinder ? 4 : 6)">
                                    <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                                </MudItem>
                                @foreach (var hole in Holes)
                                {
                                    <MudItem xs="6" sm="4" md="3" lg="2">
                                        <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                            <MudGrid>
                                                <MudItem xs=12>
                                                    <MudTextField Label="Угол" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                                </MudItem>
                                            </MudGrid>
                                        </MudField>
                                    </MudItem>
                                }
                                break;
                            case HolesSetterType.EvenlyCylinder:
                                <MudItem xs="6">
                                    <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                                </MudItem>
                                <MudItem xs="6">
                                    <MudTextField Label="Начальный угол" @bind-Value="StartAngle" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                                </MudItem>
                                break;
                        }
                    }
                    break;
            }
            break;

        //Канавочные
        case SequenceType.Grooving:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="TurningGroovingSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GroovingSequence">
                    <MudSelectItem Value="@(TurningGroovingSequences.Cutting)">Отрезка</MudSelectItem>
                    <MudSelectItem Value="@(TurningGroovingSequences.RoughGrooving)">Канавка черновая</MudSelectItem>
                    <MudSelectItem Value="@(TurningGroovingSequences.Grooving)">Канавка</MudSelectItem>
                </MudSelect>
            </MudItem>
            @switch (GroovingSequence)
            {
                case TurningGroovingSequences.Grooving or TurningGroovingSequences.RoughGrooving when GrooveType is CuttingType.Radial:
                    <MudItem xs="12" md="4">
                        <MudSelect @bind-Value="@Tool" Variant="@Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is GroovingExternalTool or GroovingInternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    break;
                case TurningGroovingSequences.Cutting when GrooveType is CuttingType.Radial:
                    <MudItem xs="12" md="4">
                        <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    break;
            }
            @if (GrooveType is CuttingType.Face)
            {
                <MudItem xs="12" md="4">
                    <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                        @foreach (var tool in Tools.Where(x => x is GroovingFaceTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            switch (GroovingSequence)
            {
                case TurningGroovingSequences.Grooving or TurningGroovingSequences.RoughGrooving:
                    <MudItem xs="12" md="4">
                        <MudSelect Label="Тип" T="CuttingType" Value="GrooveType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnGrooveCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.Radial)">Радиальная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Face)">Торцевая</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Начальный диаметр" @bind-Value="_GroovingExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Конечный диаметр" @bind-Value="_GroovingInternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    @if (GrooveType is CuttingType.Face)
                    {
                        <MudItem xs="12" md="3">
                            <MudTextField Label="Начальная точка" @bind-Value="_GroovingStartPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                        </MudItem>
                    }
                    else
                    {
                        <MudItem xs="12" md="3">
                            <MudTextField Label="Ширина" @bind-Value="_GroovingWidth" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                        </MudItem>
                    }
                    <MudItem xs="12" md="3">
                        <MudTextField Label="Конечная точка" @bind-Value="_GroovingCuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudTextField Label="Шаг" @bind-Value="_GroovingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudTextField Label="Припуск" @bind-Value="_GroovingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudTextField Label="Притупление" @bind-Value="_OuterGroovingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudSelect Label="Тип притупления" T="Blunt" Variant="Variant.Filled" @bind-Value="OuterGroovingBluntType" Margin="Margin.Dense">
                            <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                            <MudSelectItem Value="@(Blunt.SimpleChamfer)">Фаска</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudTextField Label="Галтель" @bind-Value="_InnerGroovingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="3">
                        <MudSelect Label="Тип галтели" T="Blunt" Variant="Variant.Filled" @bind-Value="InnerGroovingBluntType" Margin="Margin.Dense">
                            <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                            <MudSelectItem Value="@(Blunt.SimpleChamfer)">Фаска</MudSelectItem>
                            @*написать настриваемую фаску как на отрезке*@
                        </MudSelect>
                    </MudItem>
                    @if (GroovingSequence is TurningGroovingSequences.RoughGrooving)
                    {
                        <MudItem xs="6" md="6">
                            <MudTextField Label="Скорость резания" @bind-Value="SpeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6" md="6">
                            <MudTextField Label="Подача" @bind-Value="_FeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                        </MudItem>
                    }
                    else if (GroovingSequence is TurningGroovingSequences.Grooving)
                    {
                        <MudItem xs="6" md="3">
                            <MudTextField Label="Черновая Vc" @bind-Value="SpeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6" md="3">
                            <MudTextField Label="Черновая F" @bind-Value="_FeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6" md="3">
                            <MudTextField Label="Чистовая Vc" @bind-Value="SpeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6" md="3">
                            <MudTextField Label="Чистовая F" @bind-Value="_FeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                        </MudItem>
                    }
                    break;
                case TurningGroovingSequences.Cutting:
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Начальный диаметр" @bind-Value="_CuttingExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Конечный диаметр" @bind-Value="_CuttingInternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Конечная точка" @bind-Value="_CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Шаг" @bind-Value="_CuttingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="@BluntLabel(CuttingBluntType)" @bind-Value="_CuttingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcCuttingChamferDiameter = true)" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="CuttingBluntType" Margin="Margin.Dense">
                            <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                            <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                            <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    @if (CuttingBluntType == Blunt.CustomChamfer)
                    {
                        <MudItem xs="12" md="4">
                            <MudTextField Label="Угол фаски" @bind-Value="_CuttingCustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudTextField Label="Конечный диаметр фаски" @bind-Value="_CuttingCustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _calcCuttingChamferDiameter = false)" />
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudTextField Label="Скругление на фаске" @bind-Value="_CuttingCustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                        </MudItem>
                    }
                    <MudItem xs="6" md="6">
                        <MudTextField Label="Скорость резания" @bind-Value="SpeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    <MudItem xs="6" md="6">
                        <MudTextField Label="Подача" @bind-Value="_FeedRough" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                    </MudItem>
                    break;
            }
            break;

        // накатка
        case SequenceType.Burnishing:
            <MudItem xs="12" md="4">
                <MudSelect ValueChanged="OnToolChanged" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningBurnishingTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudTextField Label="Диаметр" @bind-Value="_BurnishingDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Label="Начальная точка" @bind-Value="_BurnishingStart" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField Label="Конечная точка" @bind-Value="_BurnishingEnd" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
            </MudItem>
            <MudItem xs="6" md="6">
                <MudTextField Label="Скорость резания" @bind-Value="SpeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
            </MudItem>
            <MudItem xs="6" md="6">
                <MudTextField Label="Подача" @bind-Value="_FeedFinish" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
            </MudItem>
            break;
    }
</MudGrid>
<MudItem Class="mt-4" xs="12" sm="12" md="12">
    <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Style="font-family: 'Roboto Mono', monospace; font-size: medium;"
                  ReadOnly="true" Variant="Variant.Filled" Text="@("\n" + ExampleText.Trim('\n'))" Lines="@(ExampleText.Trim('\n').Count(x => x == '\n') + 3)" />
</MudItem>
<MudItem Class="d-flex flex-row-reverse py-0 px-0 mt-4">
    <MudButton Variant="Variant.Outlined" Size="Size.Large"
               EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary"
               OnClick="Submit" Disabled="@(string.IsNullOrEmpty(ExampleText))">
        Добавить
    </MudButton>
</MudItem>


@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter]
    public List<Sequence> Program { get; set; }

    [Parameter]
    public Mode Mode { get; set; }

    [Parameter]
    public Material WorkpieceMaterial { get; set; }

    [Parameter]
    public Machine Machine { get; set; }

    [Parameter]
    public CoordinateSystem CoordinateSystem { get; set; }

    [Parameter]
    public MachineType MachineType { get; set; }

    [Parameter]
    public double WorkpieceLength { get; set; }

    [Parameter]
    public double WorkpieceExternalDiameter { get; set; }

    [Parameter]
    public double WorkpieceInternalDiameter { get; set; }

    [Parameter]
    public double WorkpieceCurrentInternalDiameter { get; set; }

    [Parameter]
    public int CyclesCount { get; set; }

    [Parameter]
    public double SafePlane { get; set; }

    [Parameter]
    public EventCallback<Mode> ModeChanged { get; set; }

    public Sequence CurrentSequence { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Holes.Count == 0) Holes.Add(new Hole());
        HolesCount = 1;
        GeneralSequence = MachineType == MachineType.Turning ? GeneralSequences.Limiter : GeneralSequences.CustomOperation;
        ThreadingSequence = MachineType == MachineType.Turning ? ThreadingSequences.ThreadCutting : ThreadingSequences.Tapping;
        GroovingSequence = TurningGroovingSequences.Cutting;
        _CuttingExternalDiameter = WorkpieceExternalDiameter.ToPrettyString();
        _CuttingInternalDiameter = "2.5";
        _CuttingCustomChamferAngle = "45";
        _FacingCustomChamferAngle = "45";
        _GroovingExternalDiameter = WorkpieceExternalDiameter.ToPrettyString();
        _GroovingInternalDiameter = (GroovingExternalDiameter - 2).ToPrettyString();
        GrooveType = CuttingType.Radial;
        OuterGroovingBluntType = Blunt.Radius;
        InnerGroovingBluntType = Blunt.Radius;
    }

    //Всякие OnChanged

    private void OnToolChanged(Tool value)
    {
        Tool = value;
        switch (value)
        {
            case TurningTool turningTool:
                _FeedRough = Operation.FeedRough(turningTool.Radius).ToPrettyString();
                _FeedFinish = Operation.FeedFinish(turningTool.Radius).ToPrettyString();
                break;
            case DrillingTool drillingTool:
                //SpeedFinish = Operation.DrillCuttingSpeed(WorkpieceMaterial, drillingTool);
                _FeedFinish = Operation.DrillFeed(Machine, WorkpieceMaterial, drillingTool).ToPrettyString();
                break;
            case TurningGroovingTool groovingTool:
                _FeedRough = Operation.GroovingFeedRough().ToPrettyString();
                _FeedFinish = Operation.GroovingFeedFinish().ToPrettyString();
                break;
        }

    }

    private void OnSequenceChanged(SequenceType value)
    {
        Type = value;
        Tool = null;
        SpeedFinish = Operation.CuttingSpeedFinish(WorkpieceMaterial);
        SpeedRough = Operation.CuttingSpeedRough(WorkpieceMaterial);
        ThreadingSequence = MachineType is MachineType.Turning ? ThreadingSequences.ThreadCutting : ThreadingSequences.Tapping;
        _FeedRough = string.Empty;
    }

    private void OnTurningSequenceChanged(TurningSequences value)
    {
        TurningSequence = value;
        switch (TurningSequence)
        {
            case TurningSequences.Facing:
                break;
            case TurningSequences.FinishFacing:
                _FacingProfStockAllow = string.Empty;
                break;
            case TurningSequences.FinishFacingCycle:
                break;
            case TurningSequences.FinishTurning:
                break;
            case TurningSequences.RoughFacing:
                break;
            case TurningSequences.RoughFacingCycle:
                break;
            case TurningSequences.RoughTurning:
                _FacingProfStockAllow = "0.05";
                break;
        }
    }

    private void OnThreadingSequenceChanged(ThreadingSequences value)
    {
        ThreadingSequence = value;
        Tool = null;
        switch (value)
        {
            case ThreadingSequences.ThreadCutting:
                SpeedRough = 120;
                break;
            case ThreadingSequences.Tapping:
                SpeedRough = 5;
                break;
        }
    }

    private void OnThreadCuttingTypeChanged(CuttingType value)
    {
        ThreadType = value;
        Tool = null;
    }

    private void OnGrooveCuttingTypeChanged(CuttingType value)
    {
        GrooveType = value;
        SpeedRough = Operation.GroovingSpeedRough(WorkpieceMaterial);
        SpeedFinish = Operation.GroovingSpeedFinish(WorkpieceMaterial);
        switch (GrooveType)
        {
            case CuttingType.Radial when Tool is not (GroovingExternalTool or GroovingInternalTool):
            case CuttingType.Face when Tool is not GroovingFaceTool:
                Tool = null;
                break;
        }
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        switch (ThreadStandard)
        {
            case ThreadStandard.Metric:
                {
                    Thread.GetMetricValues(CurrentThreadTemplate, out var diameter, out var pitch);
                    _ThreadDiameter = diameter;
                    _ThreadPitch = pitch;
                    ThreadNPTPlane = 0;
                    break;
                }
            case ThreadStandard.BSPP:
                {
                    Thread.GetBsppValues(CurrentThreadTemplate, out var diameter, out var pitch);
                    _ThreadDiameter = diameter;
                    _ThreadPitch = pitch;
                    ThreadNPTPlane = 0;
                    break;
                }
            case ThreadStandard.Trapezoidal:
                {
                    Thread.GetTrapezoidalValues(CurrentThreadTemplate, out var diameter, out var pitch);
                    _ThreadDiameter = diameter;
                    _ThreadPitch = pitch;
                    ThreadNPTPlane = 0;
                    break;
                }
            case ThreadStandard.NPT:
                {
                    Thread.GetNptValues(CurrentThreadTemplate, out var externalDiameter, out var internalDiameter, out var pitch, out var planeLength, out var threadLength);
                    _ThreadDiameter = externalDiameter;
                    _ThreadPitch = pitch;
                    _ThreadEnd = (-threadLength).ToPrettyString(); // наверно тоже строку стоит возвращать
                    ThreadNPTPlane = planeLength;
                    break;
                }
        }
    }

    private void OnHolesCountChanged(int value)
    {
        if (value < 1) value = 1;
        HolesCount = value;
        while (Holes.Count < HolesCount)
        {
            Holes.Add(new Hole());
        }
        while (Holes.Count > HolesCount)
        {
            Holes.Remove(Holes[^1]);
        }
    }


    //Типы переходов
    private SequenceType Type { get; set; }

    private GeneralSequences GeneralSequence { get; set; }

    private TurningSequences TurningSequence { get; set; }

    private DrillingSequences DrillingSequence { get; set; }

    private ThreadingSequences ThreadingSequence { get; set; }

    private TurningGroovingSequences GroovingSequence { get; set; }


    private Tool Tool { get; set; }
    private string CustomOperation { get; set; } = string.Empty;

    private Coolant Coolant { get; set; }
    private bool ToolCallPolar { get; set; }

    public int SpeedRough { get; set; }
    public int SpeedFinish { get; set; }

    private string _FeedRough { get; set; } = "";
    private double FeedRough => _FeedRough.GetDouble();

    private string _FeedFinish { get; set; } = "";
    private double FeedFinish => _FeedFinish.GetDouble();

    private Sequence RepeatableRoughFacingSequence { get; set; }

    private string CurrentThreadTemplate { get; set; }

    //Точение резьбы
    private ThreadStandard ThreadStandard { get; set; }
    private CuttingType ThreadType { get; set; }

    private string _ThreadDiameter { get; set; }
    private double ThreadDiameter => _ThreadDiameter.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _ThreadPitch { get; set; }
    private double ThreadPitch => _ThreadPitch.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _ThreadStart { get; set; }
    private double ThreadStart => _ThreadStart.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _ThreadEnd { get; set; } = "-";
    private double ThreadEnd => _ThreadEnd.GetDouble(numberOption: Util.GetNumberOption.Any) - Math.Round(ThreadPitch, 1);

    public int ThreadSpeed { get; set; }

    private double ThreadNPTPlane { get; set; }


    //Резьбонарезание
    private string _TapCutSpeed { get; set; }
    private double TapCutSpeed => _TapCutSpeed.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _TapStart { get; set; }
    private double TapStart => _TapStart.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _TapEnd { get; set; } = "-";
    private double TapEnd => _TapEnd.GetDouble(numberOption: Util.GetNumberOption.Any);

    //Резьбофрезерование
    private string _ThreadMillingCutSpeed { get; set; }
    private double ThreadMillingCutSpeed => _ThreadMillingCutSpeed.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _ThreadMillingStart { get; set; }
    private double ThreadMillingStart => _ThreadMillingStart.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _ThreadMillingEnd { get; set; } = "-";
    private double ThreadMillingEnd => _ThreadMillingEnd.GetDouble(numberOption: Util.GetNumberOption.Any);

    //Торцовка
    bool _calcFacingChamferDiameter = true;
    int _MediumBluntFieldSize => TurningSequence == TurningSequences.FinishFacing ? 4 : 6;

    private double FacingExternalDiameter => WorkpieceExternalDiameter;

    private string _FacingStepOver { get; set; } = "1";
    private double FacingStepOver => _FacingStepOver.GetDouble();

    private string _FacingRoughStockAllow { get; set; } = "2";
    private double FacingRoughStockAllow => _FacingRoughStockAllow.GetDouble();

    private string _FacingProfStockAllow { get; set; } = "0.2";
    private double FacingProfStockAllow => _FacingProfStockAllow.GetDouble();

    private string _facingCornerBlunt;

    private string _FacingCornerBlunt
    {
        get => _facingCornerBlunt;
        set
        {
            _facingCornerBlunt = value;
            if (_calcFacingChamferDiameter)
            {
                _FacingCustomChamferDiameter = (FacingExternalDiameter - 2 * FacingCornerBlunt * Math.Tan(FacingCustomChamferAngle.Radians())).ToPrettyString();
            }
        }
    }

    private double FacingCornerBlunt => _FacingCornerBlunt.GetDouble();

    private Blunt FacingBluntType { get; set; }

    private string _facingCustomChamferAngle;

    private string _FacingCustomChamferAngle
    {
        get => _facingCustomChamferAngle;
        set
        {
            _facingCustomChamferAngle = value;
            if (_calcFacingChamferDiameter)
            {
                _FacingCustomChamferDiameter = (FacingExternalDiameter - 2 * FacingCornerBlunt * Math.Tan(FacingCustomChamferAngle.Radians())).ToPrettyString();
            }
            else
            {
                _FacingCornerBlunt = ((FacingExternalDiameter - FacingCustomChamferDiameter) / 2 * Math.Tan((90 - FacingCustomChamferAngle).Radians())).ToPrettyString();
            }
        }
    }

    private double FacingCustomChamferAngle => _FacingCustomChamferAngle.GetDouble();

    private string _FacingCustomChamferBlunt { get; set; }
    private double FacingCustomChamferBlunt => _FacingCustomChamferBlunt.GetDouble();

    private string _facingCustomChamferDiameter;

    private string _FacingCustomChamferDiameter
    {
        get => _facingCustomChamferDiameter;
        set
        {
            _facingCustomChamferDiameter = value;
            if (_calcFacingChamferDiameter) return;
            var result = ((FacingExternalDiameter - FacingCustomChamferDiameter) / 2 * Math.Tan((90 - FacingCustomChamferAngle).Radians())).ToPrettyString();
            _FacingCornerBlunt = result;
        }
    }

    private double FacingCustomChamferDiameter => _FacingCustomChamferDiameter.GetDouble();


    //Сверловка

    private string _DrillStart { get; set; } = "2";
    private double DrillStart => _DrillStart.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _DrillEnd { get; set; } = "-";
    private double DrillEnd => _DrillEnd.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _PeckingDepth { get; set; } = "0.25";
    private double PeckingDepth => _PeckingDepth.GetDouble();

    private string _PeckingDeepDepth { get; set; } = "2";
    private double PeckingDeepDepth => _PeckingDeepDepth.GetDouble();

    private List<Hole> Holes { get; set; } = new();
    private int HolesCount { get; set; } = 1;

    private double HolesRadius { get; set; }
    private double StartAngle { get; set; } = 0;

    private enum HolesSetterType
    {
        Manual,
        Cylinder,
        EvenlyCylinder
    }

    private HolesSetterType HolesSetter { get; set; }


    //Отрезка

    private bool _calcCuttingChamferDiameter = true;
    private string _CuttingExternalDiameter { get; set; }
    private double CuttingExternalDiameter => _CuttingExternalDiameter.GetDouble();

    private string _CuttingInternalDiameter { get; set; }
    private double CuttingInternalDiameter => _CuttingInternalDiameter.GetDouble();

    private string _CuttingStepOver { get; set; }
    private double CuttingStepOver => _CuttingStepOver.GetDouble();

    private string _CuttingPoint { get; set; } = "-";
    private double CuttingPoint => _CuttingPoint.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _cuttingCornerBlunt;

    private string _CuttingCornerBlunt
    {
        get => _cuttingCornerBlunt;
        set
        {
            _cuttingCornerBlunt = value;
            if (_calcCuttingChamferDiameter)
            {
                _CuttingCustomChamferDiameter = (CuttingExternalDiameter - 2 * CuttingCornerBlunt * Math.Tan(CuttingCustomChamferAngle.Radians())).ToPrettyString();
            }
        }
    }

    private double CuttingCornerBlunt => _CuttingCornerBlunt.GetDouble();

    private Blunt CuttingBluntType { get; set; } = Blunt.SimpleChamfer;

    private string _cuttingCustomChamferAngle;

    private string _CuttingCustomChamferAngle
    {
        get => _cuttingCustomChamferAngle;
        set
        {
            _cuttingCustomChamferAngle = value;
            if (_calcCuttingChamferDiameter)
            {
                _CuttingCustomChamferDiameter = (CuttingExternalDiameter - 2 * CuttingCornerBlunt * Math.Tan(CuttingCustomChamferAngle.Radians())).ToPrettyString();
            }
            else
            {
                _CuttingCornerBlunt = ((CuttingExternalDiameter - CuttingCustomChamferDiameter) / 2 * Math.Tan((90 - CuttingCustomChamferAngle).Radians())).ToPrettyString();
            }
        }
    }

    private double CuttingCustomChamferAngle => _CuttingCustomChamferAngle.GetDouble();

    private string _CuttingCustomChamferBlunt { get; set; }
    private double CuttingCustomChamferBlunt => _CuttingCustomChamferBlunt.GetDouble();

    private string _cuttingCustomChamferDiameter;

    private string _CuttingCustomChamferDiameter
    {
        get => _cuttingCustomChamferDiameter;
        set
        {
            _cuttingCustomChamferDiameter = value;
            if (!_calcCuttingChamferDiameter)
            {
                _CuttingCornerBlunt = ((CuttingExternalDiameter - CuttingCustomChamferDiameter) / 2 * Math.Tan((90 - CuttingCustomChamferAngle).Radians())).ToPrettyString();
            }
        }
    }

    private double CuttingCustomChamferDiameter => _CuttingCustomChamferDiameter.GetDouble();


    //Канавки

    private string _GroovingExternalDiameter { get; set; }
    private double GroovingExternalDiameter => _GroovingExternalDiameter.GetDouble();

    private string _GroovingInternalDiameter { get; set; }
    private double GroovingInternalDiameter => _GroovingInternalDiameter.GetDouble();

    private string _GroovingStepOver { get; set; }
    private double GroovingStepOver => _GroovingStepOver.GetDouble();

    private string _GroovingWidth { get; set; }
    private double GroovingWidth => _GroovingWidth.GetDouble();

    private string _GroovingStartPoint { get; set; }
    private double GroovingStartPoint => _GroovingStartPoint.GetDouble();

    private string _GroovingCuttingPoint { get; set; } = "-";
    private double GroovingCuttingPoint => _GroovingCuttingPoint.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _GroovingProfStockAllow { get; set; }
    private double GroovingProfStockAllow => _GroovingProfStockAllow.GetDouble();

    private string _OuterGroovingCornerBlunt { get; set; }
    private double OuterGroovingCornerBlunt => _OuterGroovingCornerBlunt.GetDouble();

    private string _InnerGroovingCornerBlunt { get; set; }
    private double InnerGroovingCornerBlunt => _InnerGroovingCornerBlunt.GetDouble();

    private Blunt OuterGroovingBluntType { get; set; }
    private Blunt InnerGroovingBluntType { get; set; }

    private GrooveSide GrooveSide { get; set; }

    private CuttingType GrooveType { get; set; }

    private bool ExternalGrooving => GroovingExternalDiameter > GroovingInternalDiameter;


    // накатка
    private CuttingType BurnishingType { get; set; }

    private string _BurnishingDiameter { get; set; }
    private double BurnishingDiameter => _BurnishingDiameter.GetDouble();

    private string _BurnishingStart { get; set; }
    private double BurnishingStart => _BurnishingStart.GetDouble(numberOption: Util.GetNumberOption.Any);

    private string _BurnishingEnd { get; set; }
    private double BurnishingEnd => _BurnishingEnd.GetDouble(numberOption: Util.GetNumberOption.Any);

    /// <summary>
    ///     Тут сразу формируется переход, текст которого выводится в пример. Уже созданный тут переход сабмитится при нажатии
    ///     на кнопку.
    /// </summary>
    //Пример
    public string ExampleText
    {
        get
        {
            switch (Type)
            {
                case SequenceType.General when GeneralSequence is GeneralSequences.Limiter:
                    CurrentSequence = new LimiterSequence(Machine, Tool, CuttingExternalDiameter);
                    return CurrentSequence.Operation;
                case SequenceType.General when GeneralSequence is GeneralSequences.CustomOperation:
                    switch (MachineType)
                    {
                        case MachineType.Turning:
                            CurrentSequence = new TurningCustomSequence(Machine, Tool, CustomOperation);
                            return CurrentSequence.Operation;
                        case MachineType.Milling:
                            CurrentSequence = new MillingCustomSequence(Machine, CoordinateSystem, Tool, CustomOperation, Coolant, ToolCallPolar, SafePlane);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Facing when TurningSequence is TurningSequences.Facing:
                    if (SpeedRough <= 0 || FeedRough <= 0 || (FacingRoughStockAllow > 0 && SpeedFinish <= 0 || FeedFinish <= 0)) return string.Empty;
                    CurrentSequence = new FacingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as TurningExternalTool,
                        WorkpieceExternalDiameter,
                        WorkpieceInternalDiameter,
                        FacingRoughStockAllow,
                        FacingProfStockAllow,
                        FacingStepOver,
                        CyclesCount.GetCycleRange(),
                        FacingBluntType,
                        FacingCustomChamferAngle,
                        FacingCustomChamferBlunt,
                        FacingCornerBlunt,
                        SpeedRough,
                        SpeedFinish,
                        FeedRough,
                        FeedFinish);
                    return CurrentSequence.Operation;
                case SequenceType.Facing when TurningSequence is TurningSequences.RoughFacingCycle:
                    if (SpeedRough <= 0 || FeedRough <= 0) return string.Empty;
                    CurrentSequence = new RoughFacingCycleSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as TurningExternalTool,
                        WorkpieceExternalDiameter,
                        WorkpieceCurrentInternalDiameter,
                        FacingRoughStockAllow,
                        FacingProfStockAllow,
                        FacingStepOver,
                        CyclesCount.GetCycleRange(),
                        FacingBluntType,
                        FacingCustomChamferAngle,
                        FacingCustomChamferBlunt,
                        FacingCornerBlunt,
                        SpeedRough,
                        FeedRough);
                    return CurrentSequence.Operation;
                case SequenceType.Facing when TurningSequence is TurningSequences.RoughFacing:
                    if (SpeedRough <= 0 || FeedRough <= 0) return string.Empty;
                    CurrentSequence = new RoughFacingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as TurningExternalTool,
                        WorkpieceExternalDiameter,
                        WorkpieceCurrentInternalDiameter,
                        FacingRoughStockAllow,
                        FacingProfStockAllow,
                        FacingStepOver,
                        CyclesCount.GetCycleRange(),
                        FacingBluntType,
                        FacingCustomChamferAngle,
                        FacingCustomChamferBlunt,
                        FacingCornerBlunt,
                        SpeedRough,
                        FeedRough);
                    return CurrentSequence.Operation;
                case SequenceType.Facing when TurningSequence is TurningSequences.FinishFacingCycle:
                    if (SpeedFinish <= 0 || FeedFinish <= 0) return string.Empty;
                    CurrentSequence = new FinishFacingCycleSequence(Tool as TurningExternalTool, RepeatableRoughFacingSequence, SpeedFinish, FeedFinish);
                    return CurrentSequence.Operation;
                case SequenceType.Facing when TurningSequence is TurningSequences.FinishFacing:
                    if (SpeedFinish <= 0 || FeedFinish <= 0) return string.Empty;
                    CurrentSequence = new FinishFacingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as TurningExternalTool,
                        WorkpieceExternalDiameter,
                        WorkpieceCurrentInternalDiameter,
                        FacingProfStockAllow,
                        FacingBluntType,
                        FacingCustomChamferAngle,
                        FacingCustomChamferBlunt,
                        FacingCornerBlunt,
                        SpeedFinish,
                        FeedFinish);
                    return CurrentSequence.Operation;
                case SequenceType.Drilling when DrillingSequence is DrillingSequences.HighSpeedDrilling:
                    if (SpeedFinish <= 0 || FeedFinish <= 0) return string.Empty;
                    switch (MachineType)
                    {
                        case MachineType.Turning:
                            CurrentSequence = new TurningHighSpeedDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as TurningDrillingTool,
                                DrillStart,
                                DrillEnd,
                                SpeedFinish,
                                FeedFinish);
                            return CurrentSequence.Operation;
                        case MachineType.Milling:
                            CurrentSequence = new MillingHighSpeedDrillingSequence(
                                Machine,
                                CoordinateSystem,
                                WorkpieceMaterial,
                                Tool as MillingDrillingTool,
                                DrillStart,
                                DrillEnd,
                                SpeedFinish,
                                FeedFinish,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder ?
                                    PolarHoles(HolesCount, HolesRadius, StartAngle, HolesSetter is HolesSetterType.EvenlyCylinder) : Holes,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder,
                                SafePlane);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Drilling when DrillingSequence is DrillingSequences.PeckingDrilling:
                    if (SpeedFinish <= 0 || FeedFinish <= 0) return string.Empty;
                    switch (MachineType)
                    {
                        case MachineType.Turning:
                            CurrentSequence = new TurningPeckDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as TurningDrillingTool,
                                PeckingDepth,
                                DrillStart,
                                DrillEnd,
                                SpeedFinish,
                                FeedFinish);
                            return CurrentSequence.Operation;
                        case MachineType.Milling:
                            CurrentSequence = new MillingPeckDrillingSequence(
                                Machine,
                                CoordinateSystem,
                                WorkpieceMaterial,
                                Tool as MillingDrillingTool,
                                PeckingDepth,
                                DrillStart,
                                DrillEnd,
                                SpeedFinish,
                                FeedFinish,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder ?
                                    PolarHoles(HolesCount, HolesRadius, StartAngle, HolesSetter is HolesSetterType.EvenlyCylinder) : Holes,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder,
                                SafePlane);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Drilling when DrillingSequence is DrillingSequences.PeckingDeepDrilling:
                    if (SpeedFinish <= 0 || FeedFinish <= 0) return string.Empty;
                    switch (MachineType)
                    {
                        case MachineType.Turning:
                            CurrentSequence = new TurningPeckDeepDrillingSequence(
                                Machine,
                                WorkpieceMaterial,
                                Tool as TurningDrillingTool,
                                PeckingDeepDepth,
                                DrillStart,
                                DrillEnd,
                                SpeedFinish,
                                FeedFinish);
                            return CurrentSequence.Operation;
                        case MachineType.Milling:
                            CurrentSequence = new MillingPeckDeepDrillingSequence(
                                Machine,
                                CoordinateSystem,
                                WorkpieceMaterial,
                                Tool as MillingDrillingTool,
                                PeckingDeepDepth,
                                DrillStart,
                                DrillEnd,
                                SpeedFinish,
                                FeedFinish,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder ?
                                    PolarHoles(HolesCount, HolesRadius, StartAngle, HolesSetter is HolesSetterType.EvenlyCylinder) : Holes,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder,
                                SafePlane);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Threading when ThreadingSequence is ThreadingSequences.ThreadCutting && ThreadType is CuttingType.External:
                    if (SpeedFinish <= 0) return string.Empty;
                    CurrentSequence = new ThreadCuttingSequence(
                        Machine,
                        Tool as ThreadingExternalTool,
                        ThreadStandard,
                        ThreadType,
                        ThreadDiameter,
                        ThreadPitch,
                        ThreadStart,
                        ThreadEnd,
                        ThreadNPTPlane,
                        SpeedFinish);
                    return CurrentSequence.Operation;
                case SequenceType.Threading when ThreadingSequence is ThreadingSequences.ThreadCutting && ThreadType is CuttingType.Internal:
                    if (SpeedFinish <= 0) return string.Empty;
                    CurrentSequence = new ThreadCuttingSequence(
                        Machine,
                        Tool as ThreadingInternalTool,
                        ThreadStandard,
                        ThreadType,
                        ThreadDiameter,
                        ThreadPitch,
                        ThreadStart,
                        ThreadEnd,
                        ThreadNPTPlane,
                        SpeedFinish);
                    return CurrentSequence.Operation;
                case SequenceType.Threading when ThreadingSequence is ThreadingSequences.Tapping:
                    if (TapCutSpeed <= 0) return string.Empty;
                    switch (MachineType)
                    {
                        case MachineType.Turning:
                            CurrentSequence = new TurningTappingSequence(Machine, Tool as TurningTappingTool, TapCutSpeed, TapStart, TapEnd);
                            return CurrentSequence.Operation;
                        case MachineType.Milling:
                            CurrentSequence = new MillingTappingSequence(
                                Machine,
                                CoordinateSystem,
                                Tool as MillingTappingTool,
                                TapCutSpeed,
                                TapStart,
                                TapEnd,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder ?
                                    PolarHoles(HolesCount, HolesRadius, StartAngle, HolesSetter is HolesSetterType.EvenlyCylinder) : Holes,
                                HolesSetter is HolesSetterType.Cylinder or HolesSetterType.EvenlyCylinder,
                                SafePlane);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Grooving when GroovingSequence == TurningGroovingSequences.Cutting:
                    if (SpeedRough <= 0 || FeedRough <= 0) return string.Empty;
                    CurrentSequence = new TurningCutOffSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as GroovingExternalTool,
                        CuttingPoint,
                        CuttingExternalDiameter,
                        CuttingInternalDiameter,
                        CuttingCornerBlunt,
                        CuttingStepOver,
                        CuttingBluntType,
                        CuttingCustomChamferAngle,
                        CuttingCustomChamferBlunt,
                        SpeedRough,
                        FeedRough);
                    return CurrentSequence.Operation;
                case SequenceType.Grooving when GroovingSequence == TurningGroovingSequences.Grooving:
                    if (SpeedRough <= 0 || FeedRough <= 0 || (GroovingProfStockAllow > 0 && SpeedFinish <= 0 || FeedFinish <= 0)) return string.Empty;
                    switch (Tool)
                    {
                        case GroovingExternalTool groovingExternalTool:
                            CurrentSequence = new TurningExternalGroovingSequence(
                                Machine,
                                WorkpieceMaterial,
                                groovingExternalTool,
                                GroovingCuttingPoint,
                                GroovingExternalDiameter,
                                GroovingInternalDiameter,
                                GroovingWidth,
                                GroovingStepOver,
                                GroovingProfStockAllow,
                                OuterGroovingCornerBlunt,
                                InnerGroovingCornerBlunt,
                                OuterGroovingBluntType,
                                InnerGroovingBluntType,
                                SpeedRough,
                                SpeedFinish,
                                FeedRough,
                                FeedFinish);
                            return CurrentSequence.Operation;
                        case GroovingInternalTool groovingInternalTool:
                            CurrentSequence = new TurningInternalGroovingSequence(
                                Machine,
                                WorkpieceMaterial,
                                groovingInternalTool,
                                GroovingCuttingPoint,
                                GroovingExternalDiameter,
                                GroovingInternalDiameter,
                                GroovingWidth,
                                GroovingStepOver,
                                GroovingProfStockAllow,
                                OuterGroovingCornerBlunt,
                                InnerGroovingCornerBlunt,
                                OuterGroovingBluntType,
                                InnerGroovingBluntType,
                                SpeedRough,
                                SpeedFinish,
                                FeedRough,
                                FeedFinish);
                            return CurrentSequence.Operation;
                        case GroovingFaceTool groovingFaceTool:
                            CurrentSequence = new TurningFaceGroovingSequence(
                                Machine,
                                WorkpieceMaterial,
                                groovingFaceTool,
                                GroovingCuttingPoint,
                                GroovingExternalDiameter,
                                GroovingInternalDiameter,
                                GroovingStartPoint,
                                GroovingStepOver,
                                GroovingProfStockAllow,
                                OuterGroovingCornerBlunt,
                                InnerGroovingCornerBlunt,
                                OuterGroovingBluntType,
                                InnerGroovingBluntType,
                                SpeedRough,
                                SpeedFinish,
                                FeedRough,
                                FeedFinish);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Grooving when GroovingSequence is TurningGroovingSequences.RoughGrooving:
                    if (SpeedRough <= 0 || FeedRough <= 0) return string.Empty;
                    switch (Tool)
                    {
                        case GroovingExternalTool groovingExternalTool:
                            CurrentSequence = new TurningExternalRoughGroovingSequence(
                                Machine,
                                WorkpieceMaterial,
                                groovingExternalTool,
                                GroovingCuttingPoint,
                                GroovingExternalDiameter,
                                GroovingInternalDiameter,
                                GroovingWidth,
                                GroovingStepOver,
                                GroovingProfStockAllow,
                                OuterGroovingCornerBlunt,
                                InnerGroovingCornerBlunt,
                                OuterGroovingBluntType,
                                InnerGroovingBluntType,
                                SpeedRough,
                                FeedRough);
                            return CurrentSequence.Operation;
                        case GroovingInternalTool groovingInternalTool:
                            CurrentSequence = new TurningInternalGroovingSequence(
                                Machine,
                                WorkpieceMaterial,
                                groovingInternalTool,
                                GroovingCuttingPoint,
                                GroovingExternalDiameter,
                                GroovingInternalDiameter,
                                GroovingWidth,
                                GroovingStepOver,
                                GroovingProfStockAllow,
                                OuterGroovingCornerBlunt,
                                InnerGroovingCornerBlunt,
                                OuterGroovingBluntType,
                                InnerGroovingBluntType,
                                SpeedRough,
                                SpeedFinish,
                                FeedRough,
                                FeedFinish);
                            return CurrentSequence.Operation;
                        case GroovingFaceTool groovingFaceTool:
                            CurrentSequence = new TurningFaceRoughGroovingSequence(
                                Machine,
                                WorkpieceMaterial,
                                groovingFaceTool,
                                GroovingCuttingPoint,
                                GroovingExternalDiameter,
                                GroovingInternalDiameter,
                                GroovingStartPoint,
                                GroovingStepOver,
                                GroovingProfStockAllow,
                                OuterGroovingCornerBlunt,
                                InnerGroovingCornerBlunt,
                                OuterGroovingBluntType,
                                InnerGroovingBluntType,
                                SpeedRough,
                                FeedRough);
                            return CurrentSequence.Operation;
                    }
                    break;
                case SequenceType.Burnishing:
                    if (SpeedFinish <= 0 || FeedFinish <= 0) return string.Empty;
                    CurrentSequence = new TurningBurnishingSequence(
                        Machine,
                        Tool as TurningBurnishingTool,
                        BurnishingDiameter,
                        BurnishingStart,
                        BurnishingEnd,
                        SpeedFinish,
                        FeedFinish);
                    return CurrentSequence.Operation;
            }
            return string.Empty;
        }
    }


    // добавление перехода
    async Task Submit()
    {
        Program.Add(CurrentSequence);
        Mode = Mode.General;
        await ModeChanged.InvokeAsync(Mode);
    }

    private List<Hole> PolarHoles(int holesCount, double radius, double startAngle, bool evenly)
    {
        List<Hole> result = new();
        var angleStep = 360.0 / holesCount;
        while (startAngle >= 360) startAngle -= 360;
        while (startAngle <= -360) startAngle += 360;
        for (var i = 0; i < holesCount; i++)
        {
            result.Add(evenly ? new Hole(radius, angleStep * i + startAngle) : new Hole(radius, Holes[i].Y));
        }
        return result;
    }

    string BluntLabel(Blunt bluntType)
    {
        return bluntType == Blunt.CustomChamfer ? "Размер фаски" : "Величина притупления";
    }

}