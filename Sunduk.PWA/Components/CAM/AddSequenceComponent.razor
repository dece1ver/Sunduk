@using Sunduk.PWA.Infrastructure.Tools.Turning.Base
<MudGrid Spacing=1>
    <MudItem xs="12" md="4">
        <MudSelect Label="Тип" T="SequenceType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnSequenceChanged">
            <MudSelectItem Value="@SequenceType.General">Общие</MudSelectItem>
            @if (MachineType == MachineType.Turning)
            {
                <MudSelectItem Value="@SequenceType.Facing">Обработка торца</MudSelectItem>
                <MudSelectItem Value="@SequenceType.ExternalTurning">Наружное точение</MudSelectItem>
                <MudSelectItem Value="@SequenceType.Grooving">Обработка канавок и отрезка</MudSelectItem>
            }
            <MudSelectItem Value="@SequenceType.Drilling">Сверление</MudSelectItem>
            <MudSelectItem Value="@SequenceType.Threading">Нарезание резьбы</MudSelectItem>
        </MudSelect>
    </MudItem>

    @switch (Type)
    {
        #region Общие
        case SequenceType.General:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="GeneralSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GeneralSequence">
                    @if (MachineType == MachineType.Turning)
                    {
                        <MudSelectItem Value="@(GeneralSequences.Limiter)">Упор</MudSelectItem>
                    }
                    <MudSelectItem Value="@(GeneralSequences.CustomOperation)">Произвольная операция</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @if (MachineType == MachineType.Turning)
                    {
                        @foreach (var tool in Tools.Where(x =>
                                                    x is SpecialTurningTool ||
                                                    x is TurningExternalTool ||
                                                    x is TurningInternalTool ||
                                                    x is GroovingExternalTool ||
                                                    x is GroovingInternalTool ||
                                                    x is ThreadingExternalTool ||
                                                    x is ThreadingInternalTool ||
                                                    x is TurningDrillingTool ||
                                                    x is TurningTappingTool
                                                    ))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                    @if (MachineType == MachineType.Milling)
                    {
                        @foreach (var tool in Tools.Where(x =>
                                                    x is MillingDrillingTool ||
                                                    x is MillingTappingTool ||
                                                    x is MillingTool
                                                    ))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            @if (GeneralSequence == GeneralSequences.CustomOperation && MachineType == MachineType.Milling)
            {
                <MudItem xs="12" md="6">
                    <MudSelect Label="Тип охлаждения" T="Coolant" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="Coolant">
                        <MudSelectItem Value="@(Coolant.General)">Обычный</MudSelectItem>
                        <MudSelectItem Value="@(Coolant.Through)">Через шпиндель</MudSelectItem>
                        <MudSelectItem Value="@(Coolant.Blow)">Обдув</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect Label="Тип системы координат" T="bool" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ToolCallPolar">
                        <MudSelectItem Value="false">Декартова</MudSelectItem>
                        <MudSelectItem Value="true">Полярная</MudSelectItem>
                    </MudSelect>
                </MudItem>
            }
            @if (GeneralSequence == GeneralSequences.CustomOperation)
            {
                <MudItem xs="12">
                    <MudTextField @bind-Value="CustomOperation" Label="Произвольная обработка" T="string" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Lines="@(CustomOperation is null ? 1 : CustomOperation.Count(x => x == '\n') + 2)" />
                </MudItem>
            }
            break;
        #endregion

        #region Обработка торца
        case SequenceType.Facing:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="TurningSequences" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTurningSequenceChanged">
                    <MudSelectItem Value="@(TurningSequences.RoughFacing)">@("Черновое торцевание")</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishFacing)">@("Чистовое торцевание")</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.RoughFacingCycle)">@("Черновое торцевание (Под G70)")</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishFacingCycle)">@("Чистовое торцевание (G70)")</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.Facing)">@("Торцевание (черновое + чистовое)")</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            @if (TurningSequence == TurningSequences.RoughFacing)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Общий припуск" @bind-Value="_FacingRoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.RoughFacingCycle)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Общий припуск" @bind-Value="_FacingRoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.FinishFacing)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.FinishFacingCycle)
            {
                <MudItem xs="12">
                    <MudSelect @bind-Value="RepeatableRoughFacingSequence" Variant="Variant.Filled" Margin="Margin.Dense" Label="Черновая торцовка" T="Sequence">
                        @foreach (var seq in Program.Where(x => x is RoughFacingSequence || x is FacingSequence || x is RoughFacingCycleSequence))
                        {
                            if (seq is RoughFacingSequence)
                            {
                                <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                            }
                            if (seq is FacingSequence)
                            {
                                <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                            }
                            if (seq is RoughFacingCycleSequence)
                            {
                                <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.Facing)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Общий припуск" @bind-Value="_FacingRoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence == TurningSequences.RoughTurning)
            {
                <MudItem xs="12" md="4">
                    <MudTextField Label="Съем" @bind-Value="_FacingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Х" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" md="4">
                    <MudTextField Label="Чистовой припуск по Z" @bind-Value="_FacingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (TurningSequence != TurningSequences.FinishFacingCycle)
            {
                <MudItem xs="12" md="@(_MediumBluntFieldSize)">
                    <MudTextField Label="@BluntLabel(FacingBluntType)" @bind-Value="_FacingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true"
                                  @onfocusin="@(() => _caclFacingChamferDiameter = true)" />
                </MudItem>
                <MudItem xs="12" md="@(_MediumBluntFieldSize)">
                    <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="FacingBluntType" Margin="Margin.Dense">
                        <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @if (FacingBluntType == Blunt.CustomChamfer)
                {
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Угол фаски" @bind-Value="_FacingCustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Конечный диаметр фаски" @bind-Value="_FacingCustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true"
                                      @onfocusin="@(() => _caclFacingChamferDiameter = false)" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Скругление на фаске" @bind-Value="_FacingCustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>
                }
            }

            break;
        #endregion

        #region Токарные
        case SequenceType.ExternalTurning:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="TurningSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="TurningSequence">
                    <MudSelectItem Value="@(TurningSequences.RoughTurning)">Черновое точение (не написано)</MudSelectItem>
                    <MudSelectItem Value="@(TurningSequences.FinishTurning)">Чистовое точение (не написано)</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                    @foreach (var tool in Tools.Where(x => x is TurningExternalTool && (x as TurningExternalTool).Type == TurningExternalTool.Types.Bar))
                    {
                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            break;
        #endregion

        #region Сверлильные
        case SequenceType.Drilling:
            <MudItem xs="12" md="4">
                <MudSelect Label="Переход" T="DrillingSequences" @bind-Value="DrillingSequence" Variant="Variant.Filled" Margin="Margin.Dense">
                    <MudSelectItem Value="@(DrillingSequences.HighSpeedDrilling)">Высокоскоростное сверление</MudSelectItem>
                    <MudSelectItem Value="@(DrillingSequences.PeckingDrilling)">Прерывистое сверление</MudSelectItem>
                    <MudSelectItem Value="@(DrillingSequences.PeckingDeepDrilling)">Глубокое сверление</MudSelectItem>
                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="4">
                <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                    @if (MachineType == MachineType.Turning)
                    {
                        @foreach (var tool in Tools.Where(x => x is TurningDrillingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                    @if (MachineType == MachineType.Milling)
                    {
                        @foreach (var tool in Tools.Where(x => x is MillingDrillingTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudItem>
            @if (DrillingSequence == DrillingSequences.HighSpeedDrilling)
            {
                <MudItem xs="12" sm="6" md="6">
                    <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="6">
                    <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (DrillingSequence == DrillingSequences.PeckingDrilling)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Глубина" @bind-Value="_PeckingDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (DrillingSequence == DrillingSequences.PeckingDeepDrilling)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Глубина" @bind-Value="_PeckingDeepDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Начальный Z" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField Label="Конечный Z" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (MachineType == MachineType.Milling)
            {
                <MudItem xs="6">
                    <MudNumericField Label="Количество отверстий" T="int" Min="1" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.HolesConverter" ValueChanged="OnHolesCountChanged" />
                </MudItem>
                <MudItem xs="6">
                    <MudSelect Label="Расположение" T="HolesSetterType" @bind-Value="HolesSetter" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudSelectItem Value="@(HolesSetterType.Manual)">Вручную</MudSelectItem>
                        <MudSelectItem Value="@(HolesSetterType.Cylinder)">На цилиндре</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @if (HolesSetter == HolesSetterType.Cylinder)
                {
                    <MudItem xs="6">
                        <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField Label="Начальный угол" @bind-Value="StartAngle" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                    </MudItem>
                }
                @if (HolesSetter == HolesSetterType.Manual)
                {
                    @foreach (var hole in Holes)
                    {
                        <MudItem xs="6" sm="4" md="3" lg="2">
                            <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                <MudGrid>
                                    <MudItem xs=6>
                                        <MudTextField Label="X" @bind-Value="Holes[Holes.IndexOf(hole)].X" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                    </MudItem>
                                    <MudItem xs=6>
                                        <MudTextField Label="Y" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                    </MudItem>
                                </MudGrid>
                            </MudField>
                        </MudItem>

                    }
                }
            }
            break;
        #endregion

        #region Резьбонарезные
        case SequenceType.Threading:
            <MudItem xs="6">
                <MudSelect Label="Переход" T="ThreadingSequences" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadingSequenceChanged">
                    @if (MachineType == MachineType.Turning)
                    {
                        <MudSelectItem Value="@(ThreadingSequences.ThreadCutting)">Точение резьбы</MudSelectItem>
                    }
                    <MudSelectItem Value="@(ThreadingSequences.Tapping)">Нарезание метчиком</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (ThreadingSequence == ThreadingSequences.ThreadCutting)
            {
                if (ThreadType == CuttingType.External)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                if (ThreadType == CuttingType.Internal)
                {
                    <MudItem xs="12" sm="6" md="4">
                        <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                @if (ThreadStandart == ThreadStandart.Metric)
                {
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                }
                @if (ThreadStandart == ThreadStandart.BSPP)
                {
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                            @foreach (string item in Thread.bsppTemplates)
                            {
                                <MudSelectItem Value="@(item)">
                                    <MudText>@item</MudText>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                }
                @if (ThreadStandart == ThreadStandart.Trapeziodal)
                {
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                }
                @if (ThreadStandart == ThreadStandart.NPT)
                {
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                            <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                            <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadCuttingTypeChanged">
                            <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                            <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="6" sm="6" md="4">
                        <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                            @foreach (string item in Thread.nptTemplates)
                            {
                                <MudSelectItem Value="@(item)">
                                    <MudText>@item</MudText>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }
                <MudItem xs="6">
                    <MudTextField Label="Диаметр резьбы" @bind-Value="_ThreadDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Шаг резьбы" @bind-Value="_ThreadPitch" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Начальная точка" @bind-Value="_ThreadStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField Label="Конечная точка" @bind-Value="_ThreadEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
            }
            @if (ThreadingSequence == ThreadingSequences.Tapping)
            {
                <MudItem xs="4">
                    <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                        @if (MachineType == MachineType.Turning)
                        {
                            @foreach (var tool in Tools.Where(x => x is TurningTappingTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        }
                        @if (MachineType == MachineType.Milling)
                        {
                            @foreach (var tool in Tools.Where(x => x is MillingTappingTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Скорость резания" @bind-Value="_TapCutSpeed" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Начальная точка" @bind-Value="_TapStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Конечная точка" @bind-Value="_TapEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                </MudItem>
                @if (MachineType == MachineType.Milling)
                {
                    <MudItem xs="6">
                        <MudNumericField Label="Количество отверстий" T="int" Min="1" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" Converter="Util.HolesConverter" ValueChanged="OnHolesCountChanged" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudSelect Label="Расположение" T="HolesSetterType" @bind-Value="HolesSetter" Variant="Variant.Filled" Margin="Margin.Dense">
                            <MudSelectItem Value="@(HolesSetterType.Manual)">Вручную</MudSelectItem>
                            <MudSelectItem Value="@(HolesSetterType.Cylinder)">На цилиндре</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    @if (HolesSetter == HolesSetterType.Cylinder)
                    {
                        <MudItem xs="6">
                            <MudTextField Label="Радиус" @bind-Value="HolesRadius" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" Converter="Util.DoubleConverter" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Начальный угол" @bind-Value="StartAngle" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="°" Immediate="true" Converter="Util.DoubleConverter" />
                        </MudItem>
                    }
                    @if (HolesSetter == HolesSetterType.Manual)
                    {
                        @foreach (var hole in Holes)
                        {
                            <MudItem xs="6" sm="4" md="3" lg="2">
                                <MudField Label="@($"Отверстие {Holes.IndexOf(hole) + 1}")" Variant="Variant.Filled" DisableUnderLine="true" Class="mt-1">
                                    <MudGrid>
                                        <MudItem xs=6>
                                            <MudTextField Label="X" @bind-Value="Holes[Holes.IndexOf(hole)].X" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                        </MudItem>
                                        <MudItem xs=6>
                                            <MudTextField Label="Y" @bind-Value="Holes[Holes.IndexOf(hole)].Y" Variant="Variant.Text" Margin="Margin.Dense" Immediate="true" Converter="Util.DoubleConverter" />
                                        </MudItem>
                                    </MudGrid>
                                </MudField>
                            </MudItem>

                        }
                    }
                }
            }
            break;
        #endregion

        #region Канавочные
        case SequenceType.Grooving:
            <MudItem xs="4">
                <MudSelect Label="Переход" T="TurningGroovingSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GroovingSequence">
                    <MudSelectItem Value="@(TurningGroovingSequences.Cutting)">Отрезка</MudSelectItem>
                    <MudSelectItem Value="@(TurningGroovingSequences.RoughGrooving)">Канавка черновая</MudSelectItem>
                    <MudSelectItem Value="@(TurningGroovingSequences.Grooving)">Канавка</MudSelectItem>
                </MudSelect>
            </MudItem>
            @if (ExternalGrooving)
            {
                <MudItem xs="4">
                    <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                        @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            @if (!ExternalGrooving)
            {
                <MudItem xs="4">
                    <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                        @foreach (var tool in Tools.Where(x => x is GroovingInternalTool))
                        {
                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            }
            @if (GroovingSequence is TurningGroovingSequences.Grooving or TurningGroovingSequences.RoughGrooving)
            {
                <MudItem xs="4">
                    <MudSelect Label="Тип" T="CuttingType" Value="@CuttingType.Radial" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnGrooveCuttingTypeChanged">
                        <MudSelectItem Value="@(CuttingType.Radial)">Радиальная</MudSelectItem>
                        <MudSelectItem Value="@(CuttingType.Face)">Торцевая</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Начальный диаметр" @bind-Value="_GroovingExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Конечный диаметр" @bind-Value="_GroovingInternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Label="Ширина" @bind-Value="_GroovingWidth" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Label="Конечная точка" @bind-Value="_GroovingCuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Label="Шаг" @bind-Value="_GroovingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Label="Припуск" @bind-Value="_GroovingProfStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Label="Притупление" @bind-Value="_OuterGroovingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect Label="Тип притупления" T="Blunt" Variant="Variant.Filled" @bind-Value="OuterGroovingBluntType" Margin="Margin.Dense">
                        <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.SimpleChamfer)">Фаска</MudSelectItem>
                    </MudSelect>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField Label="Галтель" @bind-Value="_InnerGroovingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="3">
                    <MudSelect Label="Тип галтели" T="Blunt" Variant="Variant.Filled" @bind-Value="InnerGroovingBluntType" Margin="Margin.Dense">
                        <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.SimpleChamfer)">Фаска</MudSelectItem>
                        @*написать настриваемую фаску как на отрезке*@
                    </MudSelect>
                </MudItem>
            }
            @if (GroovingSequence == TurningGroovingSequences.Cutting)
            {
                <MudItem xs="4">
                    <MudTextField Label="Начальный диаметр" @bind-Value="_CuttingExternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Конечный диаметр" @bind-Value="_CuttingInternalDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Конечная точка" @bind-Value="_CuttingPoint" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="Шаг" @bind-Value="_CuttingStepOver" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField Label="@BluntLabel(CuttingBluntType)" @bind-Value="_CuttingCornerBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _caclCuttingChamferDiameter = true)" />
                </MudItem>
                <MudItem xs="4">
                    <MudSelect Label="Тип" T="Blunt" Variant="Variant.Filled" @bind-Value="CuttingBluntType" Margin="Margin.Dense">
                        <MudSelectItem Value="@(Blunt.SimpleChamfer)">Простая фаска</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.Radius)">Радиус</MudSelectItem>
                        <MudSelectItem Value="@(Blunt.CustomChamfer)">Настраиваемая фаска</MudSelectItem>
                    </MudSelect>
                </MudItem>
                @if (CuttingBluntType == Blunt.CustomChamfer)
                {
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Угол фаски" @bind-Value="_CuttingCustomChamferAngle" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="°" Immediate="true" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Конечный диаметр фаски" @bind-Value="_CuttingCustomChamferDiameter" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" @onfocusin="@(() => _caclCuttingChamferDiameter = false)" />
                    </MudItem>
                    <MudItem xs="12" md="4">
                        <MudTextField Label="Скругление на фаске" @bind-Value="_CuttingCustomChamferBlunt" Variant="Variant.Filled" Margin="Margin.Dense" AdornmentText="мм" Immediate="true" />
                    </MudItem>

                }
            }
            break;
        #endregion

        default:
            break;
    }
</MudGrid>
<MudItem Class="mt-4" xs="12" sm="12" md="12">
    <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Style="font-family: 'Roboto Mono', monospace; font-size: medium;" 
                  ReadOnly="true" Variant="Variant.Filled" Text="@("\n" + ExampleText.Trim('\n'))" Lines="@(ExampleText.Trim('\n').Count(x => x == '\n') + 3)" />
</MudItem>
<MudItem Class="d-flex flex-row-reverse py-0 px-0 mt-4">
    <MudButton Variant="Variant.Outlined" Size="Size.Large" 
    EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary" 
    OnClick="Submit" Disabled="@(string.IsNullOrEmpty(ExampleText))">Добавить</MudButton>
</MudItem>


@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter]
    public List<Sequence> Program { get; set; }

    [Parameter]
    public Mode Mode { get; set; }

    [Parameter]
    public Material WorkpieceMaterial { get; set; }

    [Parameter]
    public Machine Machine { get; set; }

    [Parameter]
    public MachineType MachineType { get; set; }

    [Parameter]
    public double WorkpieceLength { get; set; }

    [Parameter]
    public double WorkpieceExternalDiameter { get; set; }

    [Parameter]
    public double WorkpieceInternalDiameter { get; set; }

    [Parameter]
    public double WorkpieceCurrentInternalDiameter { get; set; }

    [Parameter]
    public int CyclesCount { get; set; }

    [Parameter]
    public EventCallback<Mode> ModeChanged { get; set; }

    public Sequence CurrentSequence { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Holes.Count == 0) Holes.Add(new Hole());
        HolesCount = 1;
        GeneralSequence = MachineType == MachineType.Turning ? GeneralSequences.Limiter : GeneralSequences.CustomOperation;
        ThreadingSequence = MachineType == MachineType.Turning ? ThreadingSequences.ThreadCutting : ThreadingSequences.Tapping;
        GroovingSequence = TurningGroovingSequences.Cutting;
        _CuttingExternalDiameter = WorkpieceExternalDiameter.ToPrettyString();
        _CuttingInternalDiameter = "2.5";
        _CuttingCustomChamferAngle = "45";
        _FacingCustomChamferAngle = "45";
        _GroovingExternalDiameter = WorkpieceExternalDiameter.ToPrettyString();
        _GroovingInternalDiameter = (GroovingExternalDiameter - 2).ToPrettyString();
        GrooveType = CuttingType.Radial;
        OuterGroovingBluntType = Blunt.Radius;
        InnerGroovingBluntType = Blunt.Radius;
    }

    #region Всякие OnChanged

    private void OnSequenceChanged(SequenceType value)
    {
        Type = value;
        Tool = null;
    }

    private void OnTurningSequenceChanged(TurningSequences value)
    {
        TurningSequence = value;
        switch (TurningSequence)
        {
            case TurningSequences.Facing:

                break;
            case TurningSequences.FinishFacing:
                _FacingProfStockAllow = string.Empty;
                break;
            case TurningSequences.FinishFacingCycle:
                break;
            case TurningSequences.FinishTurning:
                break;
            case TurningSequences.RoughFacing:
                break;
            case TurningSequences.RoughFacingCycle:
                break;
            case TurningSequences.RoughTurning:
                _FacingProfStockAllow = "0.05";
                break;
        }
    }

    private void OnThreadingSequenceChanged(ThreadingSequences value)
    {
        ThreadingSequence = value;
        Tool = null;
    }

    private void OnThreadCuttingTypeChanged(CuttingType value)
    {
        ThreadType = value;
        Tool = null;
    }

    private void OnGrooveCuttingTypeChanged(CuttingType value)
    {
        GrooveType = value;
        if (GrooveType is CuttingType.Radial && !(Tool is GroovingExternalTool || Tool is GroovingInternalTool)) Tool = null;
        if (GrooveType is CuttingType.Face && (Tool is GroovingExternalTool || Tool is GroovingInternalTool)) Tool = null;
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        if (ThreadStandart == ThreadStandart.Metric)
        {
            Thread.GetMetricValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.BSPP)
        {
            Thread.GetBSPPValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.Trapeziodal)
        {
            Thread.GetTrapezoidalValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.NPT)
        {
            Thread.GetNPTValues(CurrentThreadTemplate, out string externalDiameter, out string internalDiameter, out string pitch, out double planeLength, out double threadLength);
            _ThreadDiameter = externalDiameter;
            _ThreadPitch = pitch;
            _ThreadEnd = (-threadLength).ToPrettyString(); // наверно тоже строку стоит возвращать
            ThreadNPTPlane = planeLength;
        }
    }

    private void OnHolesCountChanged(int value)
    {
        if (value < 1) value = 1;
        HolesCount = value;
        while (Holes.Count < HolesCount)
        {
            Holes.Add(new Hole());
        }
        while (Holes.Count > HolesCount)
        {
            Holes.Remove(Holes[^1]);
        }
    }
    #endregion


    #region Типы переходов
    private SequenceType Type { get; set; }

    private GeneralSequences GeneralSequence { get; set; }

    private TurningSequences TurningSequence { get; set; }

    private DrillingSequences DrillingSequence { get; set; }

    private ThreadingSequences ThreadingSequence { get; set; }

    private TurningGroovingSequences GroovingSequence { get; set; }
    #endregion

    private Tool Tool { get; set; }
    private string CustomOperation { get; set; } = string.Empty;

    private Coolant Coolant { get; set; }
    private bool ToolCallPolar { get; set; }

    private Sequence RepeatableRoughFacingSequence { get; set; }

    private string CurrentThreadTemplate { get; set; }

    #region Точение резьбы
    private ThreadStandart ThreadStandart { get; set; }
    private CuttingType ThreadType { get; set; }

    private string _ThreadDiameter { get; set; }
    private double ThreadDiameter { get => Util.GetDouble(_ThreadDiameter, numberOption: Util.GetNumberOption.Any); }

    private string _ThreadPitch { get; set; }
    private double ThreadPitch { get => Util.GetDouble(_ThreadPitch, numberOption: Util.GetNumberOption.Any); }

    private string _ThreadStart { get; set; }
    private double ThreadStart { get => Util.GetDouble(_ThreadStart, numberOption: Util.GetNumberOption.Any); }

    private string _ThreadEnd { get; set; } = "-";
    private double ThreadEnd { get => Util.GetDouble(_ThreadEnd, numberOption: Util.GetNumberOption.Any) - Math.Round(ThreadPitch, 1); }

    private double ThreadNPTPlane { get; set; }
    #endregion

    #region Резьбонарезание
    private string _TapCutSpeed { get; set; }
    private double TapCutSpeed { get => Util.GetDouble(_TapCutSpeed, numberOption: Util.GetNumberOption.Any); }

    private string _TapStart { get; set; }
    private double TapStart { get => Util.GetDouble(_TapStart, numberOption: Util.GetNumberOption.Any); }

    private string _TapEnd { get; set; } = "-";
    private double TapEnd { get => Util.GetDouble(_TapEnd, numberOption: Util.GetNumberOption.Any); }
    #endregion

    #region Торцовка
    bool _caclFacingChamferDiameter = true;
    int _MediumBluntFieldSize { get => TurningSequence == TurningSequences.FinishFacing ? 4 : 6; }

    private double FacingExternalDiameter { get => WorkpieceExternalDiameter; }

    private string _FacingStepOver { get; set; } = "1";
    private double FacingStepOver { get => Util.GetDouble(_FacingStepOver); }

    private string _FacingRoughStockAllow { get; set; } = "2";
    private double FacingRoughStockAllow { get => Util.GetDouble(_FacingRoughStockAllow); }

    private string _FacingProfStockAllow { get; set; } = "0.2";
    private double FacingProfStockAllow { get => Util.GetDouble(_FacingProfStockAllow); }

    private string _facingCornerBlunt;
    private string _FacingCornerBlunt
    {
        get => _facingCornerBlunt;
        set
        {
            _facingCornerBlunt = value;
            if (_caclFacingChamferDiameter)
            {
                _FacingCustomChamferDiameter = (FacingExternalDiameter - 2 * FacingCornerBlunt * Math.Tan(FacingCustomChamferAngle.Radians())).ToPrettyString();
            }
        }
    }
    private double FacingCornerBlunt { get => Util.GetDouble(_FacingCornerBlunt); }

    private Blunt FacingBluntType { get; set; }

    private string _facingCustomChamferAngle;
    private string _FacingCustomChamferAngle
    {
        get => _facingCustomChamferAngle;
        set
        {
            _facingCustomChamferAngle = value;
            if (_caclFacingChamferDiameter)
            {
                _FacingCustomChamferDiameter = (FacingExternalDiameter - 2 * FacingCornerBlunt * Math.Tan(FacingCustomChamferAngle.Radians())).ToPrettyString();
            }
            else
            {
                _FacingCornerBlunt = ((FacingExternalDiameter - FacingCustomChamferDiameter) / 2 * Math.Tan((90 - FacingCustomChamferAngle).Radians())).ToPrettyString();
            }
        }
    }
    private double FacingCustomChamferAngle { get => Util.GetDouble(_FacingCustomChamferAngle); }

    private string _FacingCustomChamferBlunt { get; set; }
    private double FacingCustomChamferBlunt { get => Util.GetDouble(_FacingCustomChamferBlunt); }

    private string _facingCustumChamferDiameter;
    private string _FacingCustomChamferDiameter
    {
        get => _facingCustumChamferDiameter;
        set
        {
            _facingCustumChamferDiameter = value;
            if (!_caclFacingChamferDiameter)
            {
                var result = ((FacingExternalDiameter - FacingCustomChamferDiameter) / 2 * Math.Tan((90 - FacingCustomChamferAngle).Radians())).ToPrettyString();
                _FacingCornerBlunt = result;
            }
        }
    }
    private double FacingCustomChamferDiameter { get => Util.GetDouble(_FacingCustomChamferDiameter); }

    #endregion

    #region Сверловка

    private string _DrillStart { get; set; } = "2";
    private double DrillStart { get => Util.GetDouble(_DrillStart, numberOption: Util.GetNumberOption.Any); }

    private string _DrillEnd { get; set; } = "-";
    private double DrillEnd { get => Util.GetDouble(_DrillEnd, numberOption: Util.GetNumberOption.Any); }

    private string _PeckingDepth { get; set; } = "0.25";
    private double PeckingDepth { get => Util.GetDouble(_PeckingDepth); }

    private string _PeckingDeepDepth { get; set; } = "2";
    private double PeckingDeepDepth { get => Util.GetDouble(_PeckingDeepDepth); }

    private List<Hole> Holes { get; set; } = new();
    private int HolesCount { get; set; } = 1;

    private double HolesRadius { get; set; }
    private double StartAngle { get; set; } = 0;

    private enum HolesSetterType { Manual, Cylinder}
    private HolesSetterType HolesSetter { get; set; }

    #endregion

    #region Отрезка

    private bool _caclCuttingChamferDiameter = true;
    private string _CuttingExternalDiameter { get; set; }
    private double CuttingExternalDiameter { get => Util.GetDouble(_CuttingExternalDiameter); }

    private string _CuttingInternalDiameter { get; set; }
    private double CuttingInternalDiameter { get => Util.GetDouble(_CuttingInternalDiameter); }

    private string _CuttingStepOver { get; set; }
    private double CuttingStepOver { get => Util.GetDouble(_CuttingStepOver); }

    private string _CuttingPoint { get; set; } = "-";
    private double CuttingPoint { get => Util.GetDouble(_CuttingPoint, numberOption: Util.GetNumberOption.Any); }

    private string _cuttingCornerBlunt;
    private string _CuttingCornerBlunt
    {
        get => _cuttingCornerBlunt;
        set
        {
            _cuttingCornerBlunt = value;
            if (_caclCuttingChamferDiameter)
            {
                _CuttingCustomChamferDiameter = (CuttingExternalDiameter - 2 * CuttingCornerBlunt * Math.Tan(CuttingCustomChamferAngle.Radians())).ToPrettyString();
            }
        }
    }
    private double CuttingCornerBlunt { get => Util.GetDouble(_CuttingCornerBlunt); }

    private Blunt CuttingBluntType { get; set; } = Blunt.SimpleChamfer;

    private string _cuttingCustomChamferAngle;
    private string _CuttingCustomChamferAngle
    {
        get => _cuttingCustomChamferAngle;
        set
        {
            _cuttingCustomChamferAngle = value;
            if (_caclCuttingChamferDiameter)
            {
                _CuttingCustomChamferDiameter = (CuttingExternalDiameter - 2 * CuttingCornerBlunt * Math.Tan(CuttingCustomChamferAngle.Radians())).ToPrettyString();
            }
            else
            {
                _CuttingCornerBlunt = ((CuttingExternalDiameter - CuttingCustomChamferDiameter) / 2 * Math.Tan((90 - CuttingCustomChamferAngle).Radians())).ToPrettyString();
            }
        }
    }
    private double CuttingCustomChamferAngle { get => Util.GetDouble(_CuttingCustomChamferAngle); }

    private string _CuttingCustomChamferBlunt { get; set; }
    private double CuttingCustomChamferBlunt { get => Util.GetDouble(_CuttingCustomChamferBlunt); }

    private string _cuttingCustumChamferDiameter;
    private string _CuttingCustomChamferDiameter {
        get => _cuttingCustumChamferDiameter;
        set
        {
            _cuttingCustumChamferDiameter = value;
            if (!_caclCuttingChamferDiameter)
            {
                _CuttingCornerBlunt = ((CuttingExternalDiameter - CuttingCustomChamferDiameter) / 2 * Math.Tan((90 - CuttingCustomChamferAngle).Radians())).ToPrettyString();
            }
        }
    }
    private double CuttingCustomChamferDiameter { get => Util.GetDouble(_CuttingCustomChamferDiameter); }



    #endregion

    #region Канавки

    private string _GroovingExternalDiameter { get; set; }
    private double GroovingExternalDiameter { get => Util.GetDouble(_GroovingExternalDiameter); }

    private string _GroovingInternalDiameter { get; set; }
    private double GroovingInternalDiameter { get => Util.GetDouble(_GroovingInternalDiameter); }

    private string _GroovingStepOver { get; set; }
    private double GroovingStepOver { get => Util.GetDouble(_GroovingStepOver); }

    private string _GroovingWidth { get; set; }
    private double GroovingWidth { get => Util.GetDouble(_GroovingWidth); }

    private string _GroovingCuttingPoint { get; set; } = "-";
    private double GroovingCuttingPoint { get => Util.GetDouble(_GroovingCuttingPoint, numberOption: Util.GetNumberOption.Any); }

    private string _GroovingProfStockAllow { get; set; }
    private double GroovingProfStockAllow { get => Util.GetDouble(_GroovingProfStockAllow); }

    private string _OuterGroovingCornerBlunt { get; set; }
    private double OuterGroovingCornerBlunt { get => Util.GetDouble(_OuterGroovingCornerBlunt); }

    private string _InnerGroovingCornerBlunt { get; set; }
    private double InnerGroovingCornerBlunt { get => Util.GetDouble(_InnerGroovingCornerBlunt); }

    private Blunt OuterGroovingBluntType { get; set; }
    private Blunt InnerGroovingBluntType { get; set; }

    private GrooveSide GrooveSide { get; set; }

    private CuttingType GrooveType { get; set; }

    private bool ExternalGrooving => GroovingExternalDiameter > GroovingInternalDiameter;

    #endregion

    #region Примеры

    public string ExampleText
    {
        get
        {
            if (Type == SequenceType.General && GeneralSequence == GeneralSequences.Limiter)
            {
                CurrentSequence = new LimiterSequence(Machine, Tool, CuttingExternalDiameter);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.General && GeneralSequence == GeneralSequences.CustomOperation)
            {
                switch (MachineType) 
                {
                    case MachineType.Turning:
                        CurrentSequence = new TurningCustomSequence(Machine, Tool, CustomOperation);
                        return CurrentSequence.Operation;
                    case MachineType.Milling:
                        CurrentSequence = new MillingCustomSequence(Machine, Tool, CustomOperation, Coolant, ToolCallPolar);
                        return CurrentSequence.Operation;
                }
            }

            if (Type == SequenceType.Facing && TurningSequence == TurningSequences.Facing)
            {
                CurrentSequence = new FacingSequence(
                    Machine,
                    WorkpieceMaterial,
                    Tool as TurningExternalTool,
                    WorkpieceExternalDiameter,
                    WorkpieceInternalDiameter,
                    FacingRoughStockAllow,
                    FacingProfStockAllow,
                    FacingStepOver,
                    CyclesCount.GetCycleRange(),
                    FacingBluntType,
                    FacingCustomChamferAngle,
                    FacingCustomChamferBlunt,
                    FacingCornerBlunt);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.Facing && TurningSequence == TurningSequences.RoughFacing)
            {
                CurrentSequence = new RoughFacingSequence(
                    Machine,
                    WorkpieceMaterial,
                    Tool as TurningExternalTool,
                    WorkpieceExternalDiameter,
                    WorkpieceCurrentInternalDiameter,
                    FacingRoughStockAllow,
                    FacingProfStockAllow,
                    FacingStepOver,
                    CyclesCount.GetCycleRange(),
                    FacingBluntType,
                    FacingCustomChamferAngle,
                    FacingCustomChamferBlunt,
                    FacingCornerBlunt);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.Facing && TurningSequence == TurningSequences.RoughFacingCycle)
            {
                CurrentSequence = new RoughFacingCycleSequence(
                    Machine,
                    WorkpieceMaterial,
                    Tool as TurningExternalTool,
                    WorkpieceExternalDiameter,
                    WorkpieceCurrentInternalDiameter,
                    FacingRoughStockAllow,
                    FacingProfStockAllow,
                    FacingStepOver,
                    CyclesCount.GetCycleRange(),
                    FacingBluntType,
                    FacingCustomChamferAngle,
                    FacingCustomChamferBlunt,
                    FacingCornerBlunt);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.Facing && TurningSequence == TurningSequences.FinishFacingCycle)
            {
                CurrentSequence = new FinishFacingCycleSequence(Tool as TurningExternalTool, RepeatableRoughFacingSequence);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.Facing && TurningSequence == TurningSequences.FinishFacing)
            {
                CurrentSequence = new FinishFacingSequence(
                    Machine,
                    WorkpieceMaterial,
                    Tool as TurningExternalTool,
                    WorkpieceExternalDiameter,
                    WorkpieceCurrentInternalDiameter,
                    FacingProfStockAllow,
                    FacingBluntType,
                    FacingCustomChamferAngle,
                    FacingCustomChamferBlunt,
                    FacingCornerBlunt);
                return CurrentSequence.Operation;
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.HighSpeedDrilling)
            {
                switch (MachineType)
                {
                    case MachineType.Turning:
                        CurrentSequence = new TurningHighSpeedDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningDrillingTool,
                            DrillStart,
                            DrillEnd);
                        return CurrentSequence.Operation;
                    case MachineType.Milling:
                        CurrentSequence = new MillingHighSpeedDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as MillingDrillingTool,
                            DrillStart,
                            DrillEnd,
                            HolesSetter == HolesSetterType.Cylinder ? PolarHoles(HolesCount, HolesRadius, StartAngle) : Holes,
                            HolesSetter == HolesSetterType.Cylinder ? true : false);
                        return CurrentSequence.Operation;
                }
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDrilling)
            {
                switch (MachineType)
                {
                    case MachineType.Turning:
                        CurrentSequence = new TurningPeckDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningDrillingTool,
                            PeckingDepth,
                            DrillStart,
                            DrillEnd);
                        return CurrentSequence.Operation;
                    case MachineType.Milling:
                        CurrentSequence = new MillingPeckDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as MillingDrillingTool,
                            PeckingDepth,
                            DrillStart,
                            DrillEnd,
                            HolesSetter == HolesSetterType.Cylinder ? PolarHoles(HolesCount, HolesRadius, StartAngle) : Holes,
                            HolesSetter == HolesSetterType.Cylinder ? true : false);
                        return CurrentSequence.Operation;
                }
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDeepDrilling)
            {
                switch (MachineType)
                {
                    case MachineType.Turning:
                        CurrentSequence = new TurningPeckDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningDrillingTool,
                            PeckingDeepDepth,
                            DrillStart,
                            DrillEnd);
                        return CurrentSequence.Operation;
                    case MachineType.Milling:
                        CurrentSequence = new MillingPeckDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as MillingDrillingTool,
                            PeckingDeepDepth,
                            DrillStart,
                            DrillEnd,
                            HolesSetter == HolesSetterType.Cylinder ? PolarHoles(HolesCount, HolesRadius, StartAngle) : Holes,
                            HolesSetter == HolesSetterType.Cylinder ? true : false);
                        return CurrentSequence.Operation;
                }
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting && ThreadType == CuttingType.External)
            {
                CurrentSequence = new ThreadCuttingSequence(
                    Machine,
                    Tool as ThreadingExternalTool,
                    ThreadStandart,
                    ThreadType,
                    ThreadDiameter,
                    ThreadPitch,
                    ThreadStart,
                    ThreadEnd,
                    ThreadNPTPlane);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting && ThreadType == CuttingType.Internal)
            {
                CurrentSequence = new ThreadCuttingSequence(
                    Machine,
                    Tool as ThreadingInternalTool,
                    ThreadStandart,
                    ThreadType,
                    ThreadDiameter,
                    ThreadPitch,
                    ThreadStart,
                    ThreadEnd,
                    ThreadNPTPlane);
                return CurrentSequence.Operation;
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.Tapping)
            {
                switch (MachineType)
                {
                    case MachineType.Turning:
                        CurrentSequence = new TurningTappingSequence(Machine, Tool as TurningTappingTool, TapCutSpeed, TapStart, TapEnd);
                        return CurrentSequence.Operation;
                    case MachineType.Milling:
                        CurrentSequence = new MillingTappingSequence(
                        Machine,
                        Tool as MillingTappingTool,
                        TapCutSpeed,
                        TapStart,
                        TapEnd,
                        HolesSetter == HolesSetterType.Cylinder ? PolarHoles(HolesCount, HolesRadius, StartAngle) : Holes,
                        HolesSetter == HolesSetterType.Cylinder ? true : false);
                        return CurrentSequence.Operation;

                }
            }
            if (Type == SequenceType.Grooving && GroovingSequence == TurningGroovingSequences.Cutting)
            {
                CurrentSequence = new TurningCutOffSequence(
                    Machine,
                    WorkpieceMaterial,
                    Tool as GroovingExternalTool,
                    CuttingPoint,
                    CuttingExternalDiameter,
                    CuttingInternalDiameter,
                    CuttingCornerBlunt,
                    CuttingStepOver,
                    CuttingBluntType,
                    CuttingCustomChamferAngle,
                    CuttingCustomChamferBlunt);
                return CurrentSequence.Operation;
            }
            if (Type == SequenceType.Grooving && GroovingSequence == TurningGroovingSequences.Grooving)
            {
                if (Tool is GroovingExternalTool)
                {
                    CurrentSequence = new TurningExternalGroovingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as GroovingExternalTool,
                        GroovingCuttingPoint,
                        GroovingExternalDiameter,
                        GroovingInternalDiameter,
                        GroovingWidth,
                        GroovingStepOver,
                        GroovingProfStockAllow,
                        OuterGroovingCornerBlunt,
                        InnerGroovingCornerBlunt,
                        OuterGroovingBluntType,
                        InnerGroovingBluntType);
                    return CurrentSequence.Operation;
                }
                else if (Tool is GroovingInternalTool)
                {
                    CurrentSequence = new TurningInternalGroovingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as GroovingInternalTool,
                        GroovingCuttingPoint,
                        GroovingExternalDiameter,
                        GroovingInternalDiameter,
                        GroovingWidth,
                        GroovingStepOver,
                        GroovingProfStockAllow,
                        OuterGroovingCornerBlunt,
                        InnerGroovingCornerBlunt,
                        OuterGroovingBluntType,
                        InnerGroovingBluntType);
                    return CurrentSequence.Operation;
                }
            }
            if (Type == SequenceType.Grooving && GroovingSequence == TurningGroovingSequences.RoughGrooving)
            {
                if (Tool is GroovingExternalTool)
                {
                    CurrentSequence = new TurningExternalRoughGroovingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as GroovingExternalTool,
                        GroovingCuttingPoint,
                        GroovingExternalDiameter,
                        GroovingInternalDiameter,
                        GroovingWidth,
                        GroovingStepOver,
                        GroovingProfStockAllow,
                        OuterGroovingCornerBlunt,
                        InnerGroovingCornerBlunt,
                        OuterGroovingBluntType,
                        InnerGroovingBluntType);
                    return CurrentSequence.Operation;
                }
                else if (Tool is GroovingInternalTool)
                {
                    CurrentSequence = new TurningInternalGroovingSequence(
                        Machine,
                        WorkpieceMaterial,
                        Tool as GroovingInternalTool,
                        GroovingCuttingPoint,
                        GroovingExternalDiameter,
                        GroovingInternalDiameter,
                        GroovingWidth,
                        GroovingStepOver,
                        GroovingProfStockAllow,
                        OuterGroovingCornerBlunt,
                        InnerGroovingCornerBlunt,
                        OuterGroovingBluntType,
                        InnerGroovingBluntType);
                    return CurrentSequence.Operation;
                }
            }
            return string.Empty;
        }
    }
    #endregion

    // добавлеие перехода
    async Task Submit()
    {
        Program.Add(CurrentSequence);
        Mode = Mode.General;
        await ModeChanged.InvokeAsync(Mode);
    }

    private List<Hole> PolarHoles(int holesCount, double radius, double startAngle)
    {
        List<Hole> result = new();
        double angleStep = 360 / holesCount;
        while (startAngle >= 360) startAngle -= 360;
        while (startAngle <= -360) startAngle += 360;
        for (int i = 0; i < holesCount; i++)
        {
            result.Add(new Hole(radius, angleStep * i + startAngle));
        }
        return result;
    }

    string BluntLabel(Blunt bluntType) => bluntType == Blunt.CustomChamfer ? "Размер фаски" : "Величина притупления";
}
