@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="MillingChamferTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <ColGroup>
        <col />
        <col />
        <col />
        <col />
        <col />
        <col style="width: 50px;"/>
    </ColGroup>
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Угол</MudTh>
        <MudTh>Компенсация кончика</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh Style="text-align:center"/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">@context.Position</MudTd>
        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
        <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
        <MudTd DataLabel="Компенсация кончика">@context.TipCompensation.ToPrettyString()</MudTd>
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd DataLabel="" Style="text-align:right">
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline"
            OnClick="(() => RemoveMillingChamferTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField Class="my-n2" @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
        </MudTd>
        <MudTd DataLabel="Диаметр" Class="my-n2">
            <MudTextField Class="my-n2" @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Угол" Class="my-n2">
            @*<MudAutocomplete T="double" Label="Угол" @bind-Value="@context.Angle" SearchFunc="@SearchAsync" CoerceText="true" CoerceValue="true" 
                Converter="Util.DoubleConverter" Required Variant="Variant.Outlined" Margin="Margin.Dense" />*@
            <MudTextField Class="my-n2" @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.HalfAngleDoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Компенсация кончика" Class="my-n2">
            <MudTextField Class="my-n2" @bind-Value="@context.TipCompensation" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Исполнение" Class="my-n2">
            <MudSelect Class="my-n2" T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddMillingChamferTool" />

@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    [Parameter]
    public List<MillingChamferTool> MillingChamferTools { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddMillingChamferTool()
    {
        Tools.Add(new MillingChamferTool(1, 6, 45));
        await LocalStorage.SetItemAsync(nameof(MillingChamferTools), MillingChamferTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveMillingChamferTool(MillingChamferTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingChamferTools), MillingChamferTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
