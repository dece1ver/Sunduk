@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="MillingThreadCuttingTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Стандарт</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Шаг</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">@context.Position</MudTd>
        @switch (@context.ThreadStandart)
        {
            case ThreadStandart.Metric:
                <MudTd DataLabel="Стандарт">Метрическая 60° (М)</MudTd>
                break;
            case ThreadStandart.BSPP:
                <MudTd DataLabel="Стандарт">Трубная цилиндрическая 55° (G)</MudTd>
                break;
            case ThreadStandart.Trapezoidal:
                <MudTd DataLabel="Стандарт">Трапецеидальная 30° (Tr)</MudTd>
                break;
            case ThreadStandart.NPT:
                <MudTd DataLabel="Стандарт">Коническая 60° (K)</MudTd>
                break;
        }
        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingThreadCuttingTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
        </MudTd>
        <MudTd DataLabel="Стандарт">
            <MudSelect T="ThreadStandart" @bind-Value="@context.ThreadStandart" Variant="Variant.Outlined" Required>
                <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (G)</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandart.Trapezoidal)">Трапецеидальная 30° (Tr)</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Диаметр">
            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Шаг">
            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddMillingThreadCuttingTool" />

@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    [Parameter]
    public List<MillingThreadCuttingTool> MillingThreadCuttingTools { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddMillingThreadCuttingTool()
    {
        Tools.Add(new MillingThreadCuttingTool(1, 9.5, ThreadStandart.NPT, 1.411));
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveMillingThreadCuttingTool(MillingThreadCuttingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
