@using _Imports = MudBlazor._Imports
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="MillingThreadCuttingTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Стандарт</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Шаг</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">T@(context.Position)</MudTd>
        @switch (@context.ThreadStandard)
        {
            case ThreadStandard.Metric:
                <MudTd DataLabel="Стандарт">Метрическая 60° (М)</MudTd>
                break;
            case ThreadStandard.BSPP:
                <MudTd DataLabel="Стандарт">Трубная цилиндрическая 55° (G)</MudTd>
                break;
            case ThreadStandard.Trapezoidal:
                <MudTd DataLabel="Стандарт">Трапецеидальная 30° (Tr)</MudTd>
                break;
            case ThreadStandard.NPT:
                <MudTd DataLabel="Стандарт">Коническая 60° (K)</MudTd>
                break;
        }
        <MudTd DataLabel="Диаметр">Ø@(context.Diameter.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))</MudTd>
        <MudTd DataLabel="Шаг">@(context.Pitch.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))мм</MudTd>
        
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingThreadCuttingTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Adornment="Adornment.Start" AdornmentText="T" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
        </MudTd>
        <MudTd DataLabel="Стандарт">
            <MudSelect T="ThreadStandard" @bind-Value="@context.ThreadStandard" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" Required>
                <MudSelectItem Value="@(ThreadStandard.Metric)">Метрическая 60° (М)</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandard.BSPP)">Трубная цилиндрическая 55° (G)</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandard.Trapezoidal)">Трапецеидальная 30° (Tr)</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandard.NPT)">Коническая 60° (K)</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Диаметр">
            <MudTextField @bind-Value="@context.Diameter" Adornment="Adornment.Start" AdornmentText="Ø" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Шаг">
            @switch (context.ThreadStandard)
            {
                case ThreadStandard.Metric:
                    <MudTextField @bind-Value="@context.Pitch" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                    break;
                case ThreadStandard.BSPP:
                    <MudSelect Value="context.StandardTemplate" T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" 
                               ValueChanged="s => OnThreadBsppTemplateChanged(s, context)" Required>
                        @foreach (var template in Thread.BsppTemplates)
                        {
                            <MudSelectItem Value="template"/>
                        }
                    </MudSelect>
                    break;
                case ThreadStandard.Trapezoidal:
                    <MudTextField @bind-Value="@context.Pitch" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                    break;
                case ThreadStandard.NPT:
                    <MudSelect Value="context.StandardTemplate" T="string" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" 
                               ValueChanged="s => OnThreadNptTemplateChanged(s, context)" Required>
                        @foreach (var template in Thread.NptTemplates)
                        {
                            <MudSelectItem Value="template"/>
                        }
                    </MudSelect>
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddMillingThreadCuttingTool" />

@code {

    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<MillingThreadCuttingTool> MillingThreadCuttingTools
    {
        get => Tools.OfType<MillingThreadCuttingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingThreadCuttingTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddMillingThreadCuttingTool()
    {
        Tools.Add(new MillingThreadCuttingTool(1, 9.5, ThreadStandard.Metric, 1.5));
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveMillingThreadCuttingTool(MillingThreadCuttingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingThreadCuttingTools), MillingThreadCuttingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }

    private void OnThreadBsppTemplateChanged(string value, MillingThreadCuttingTool tool)
    {
        Thread.GetBsppValues(value, out _, out var pitch);
        tool.Pitch = pitch.GetDouble();
        tool.StandardTemplate = value;
    }

    private void OnThreadNptTemplateChanged(string value, MillingThreadCuttingTool tool)
    {
        Thread.GetNptValues(value, out _, out _, out var pitch, out double _, out double _);
        tool.Pitch = pitch.GetDouble();
        tool.StandardTemplate = value;
    }
}
