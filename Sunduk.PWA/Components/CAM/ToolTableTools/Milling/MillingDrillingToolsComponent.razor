@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="MillingDrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Угол</MudTh>
        <MudTh>Тип</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">T@(context.Position)</MudTd>
        <MudTd DataLabel="Диаметр">Ø@(context.Diameter.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))</MudTd>
        <MudTd DataLabel="Угол">@(context.Angle.ToPrettyString())°</MudTd>
        @if (context.Type == DrillingTool.Types.Solid)
            {
            <MudTd DataLabel="Тип">Твердосплавное</MudTd>
            }
        @if (context.Type == DrillingTool.Types.Insert)
            {
            <MudTd DataLabel="Тип">С пластинами</MudTd>
            }
        @if (context.Type == DrillingTool.Types.Tip)
            {
            <MudTd DataLabel="Тип">С головкой</MudTd>
            }
        @if (context.Type == DrillingTool.Types.Rapid)
            {
            <MudTd DataLabel="Тип">Быстрорез</MudTd>
            }
        @if (context.Type == DrillingTool.Types.Center)
            {
            <MudTd DataLabel="Тип">Центровочное</MudTd>
            }
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingDrillingTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Adornment="Adornment.Start" AdornmentText="T" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
        </MudTd>
        <MudTd DataLabel="Диаметр">
            <MudTextField @bind-Value="@context.Diameter" Adornment="Adornment.Start" AdornmentText="Ø" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Угол">
            <MudTextField @bind-Value="@context.Angle" Adornment="Adornment.End" AdornmentText="°" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Тип">
            <MudSelect T="DrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@DrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                <MudSelectItem Value="@DrillingTool.Types.Insert">С пластинами</MudSelectItem>
                <MudSelectItem Value="@DrillingTool.Types.Tip">С головкой</MudSelectItem>
                <MudSelectItem Value="@DrillingTool.Types.Rapid">Быстрорез</MudSelectItem>
                <MudSelectItem Value="@DrillingTool.Types.Center">Центровочное</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddMillingDrillingTool" />

@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<MillingDrillingTool> MillingDrillingTools
    {
        get => Tools.OfType<MillingDrillingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingDrillingTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddMillingDrillingTool()
    {
        Tools.Add(new MillingDrillingTool(1, DrillingTool.Types.Solid, 10, 140));
        await LocalStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveMillingDrillingTool(MillingDrillingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingDrillingTools), MillingDrillingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
