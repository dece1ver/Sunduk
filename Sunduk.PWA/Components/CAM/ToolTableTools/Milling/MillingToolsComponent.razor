@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="MillingTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Зубья</MudTh>
        <MudTh>Тип</MudTh>
        <MudTh>Рабочая глубина</MudTh>
        <MudTh>Радиус при вершине</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">T@(context.Position.ToString("N2"))</MudTd>
        <MudTd DataLabel="Диаметр">Ø@(context.Diameter.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))</MudTd>
        <MudTd DataLabel="Зубья">@context.Edges</MudTd>
        @if (context.Type == MillingTool.Types.Solid)
            {
            <MudTd DataLabel="Тип">Твердосплавная</MudTd>
            }
        @if (context.Type == MillingTool.Types.Insert)
            {
            <MudTd DataLabel="Тип">С пластинами</MudTd>
            }
        <MudTd DataLabel="Рабочая глубина">L@(context.CuttingLength > 0 ? context.CuttingLength.ToPrettyString() : "-")</MudTd>
        <MudTd DataLabel="Радиус при вершине">R@(context.CornerRadius > 0 ? context.CornerRadius.ToPrettyString() : "-")</MudTd>
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Adornment="Adornment.Start" AdornmentText="T" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
        </MudTd>
        <MudTd DataLabel="Диаметр">
            <MudTextField @bind-Value="@context.Diameter" Adornment="Adornment.Start" AdornmentText="Ø" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Зубья">
            <MudTextField @bind-Value="@context.Edges" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.EdgesConverter" Required />
        </MudTd>
        <MudTd DataLabel="Тип">
            <MudSelect T="MillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@MillingTool.Types.Solid">Твердосплавная</MudSelectItem>
                <MudSelectItem Value="@MillingTool.Types.Insert">С пластинами</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Рабочая глубина">
            <MudTextField @bind-Value="@context.CuttingLength" Adornment="Adornment.Start" AdornmentText="L" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Радиус при вершине">
            <MudTextField @bind-Value="@context.CornerRadius" Adornment="Adornment.Start" AdornmentText="R" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddMillingTool" />

@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<MillingTool> MillingTools
    {
        get => Tools.OfType<MillingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddMillingTool()
    {
        Tools.Add(new MillingTool(1, MillingTool.Types.Solid, 12));
        await LocalStorage.SetItemAsync(nameof(MillingTools), MillingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveMillingTool(MillingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingTools), MillingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
