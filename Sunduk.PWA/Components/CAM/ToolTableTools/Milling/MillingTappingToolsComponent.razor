@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="MillingTappingTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Шаг</MudTh>
        <MudTh>Тип</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate> 
        <MudTd DataLabel="Позиция">T@(context.Position)</MudTd>
        <MudTd DataLabel="Диаметр">М@(context.Diameter.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))</MudTd>
        <MudTd DataLabel="Шаг">@(context.Pitch.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))мм</MudTd>
        @if (context.Type == TappingTool.Types.Cutting)
        {
            <MudTd DataLabel="Тип">Нарезной</MudTd>
        }
        @if (context.Type == TappingTool.Types.Forming)
        {
            <MudTd DataLabel="Тип">Раскатник</MudTd>
        }
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveMillingTappingTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Adornment="Adornment.Start" AdornmentText="T" Variant="Variant.Outlined" Margin="Margin.Dense" Required />
        </MudTd>
        <MudTd DataLabel="Диаметр">
            <MudTextField @bind-Value="@context.Diameter" Adornment="Adornment.Start" AdornmentText="Ø" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Шаг">
            <MudTextField @bind-Value="@context.Pitch" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Тип">
            <MudSelect T="TappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@TappingTool.Types.Cutting">Нарезной</MudSelectItem>
                <MudSelectItem Value="@TappingTool.Types.Forming">Раскатник</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddMillingTappingTool" />

@code {
    /// <summary>
    /// TODO сделать шаблоны и обозначения под разные стандарты резьб
    /// </summary>
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<MillingTappingTool> MillingTappingTools
    {
        get => Tools.OfType<MillingTappingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is MillingTappingTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddMillingTappingTool()
    {
        Tools.Add(new MillingTappingTool(1, TappingTool.Types.Cutting, 8, 1.25));
        await LocalStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveMillingTappingTool(MillingTappingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(MillingTappingTools), MillingTappingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }

}
