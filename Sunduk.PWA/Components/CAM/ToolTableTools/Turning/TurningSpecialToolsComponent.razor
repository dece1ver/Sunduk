@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="TurningSpecialTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Описание</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">T@(context.Position.ToolNumber())</MudTd>
        <MudTd DataLabel="Описание">@context.Name</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveTurningSpecialTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Adornment="Adornment.Start" AdornmentText="T" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
        </MudTd>
        <MudTd DataLabel="Описание">
            <MudTextField @bind-Value="@context.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddTurningSpecialTool" />
@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<TurningSpecialTool> TurningSpecialTools
    {
        get => Tools.OfType<TurningSpecialTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningSpecialTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddTurningSpecialTool()
    {
        Tools.Add(new TurningSpecialTool(0101, string.Empty));
        await LocalStorage.SetItemAsync(nameof(TurningSpecialTools), TurningSpecialTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveTurningSpecialTool(TurningSpecialTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningSpecialTools), TurningSpecialTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
