@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="GroovingFaceTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Ширина</MudTh>
        <MudTh>Радиус</MudTh>
        <MudTh>Привязка</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
        <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
        <MudTd DataLabel="Радиус">@context.CornerRadius.ToPrettyString()</MudTd>
        <MudTd DataLabel="Привязка">@(context.ZeroPoint == TurningGroovingTool.Point.Bottom ? "Как проходной" : "Как расточной")</MudTd>
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveGroovingFaceTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
        </MudTd>
        <MudTd DataLabel="Ширина">
            <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Ширина">
            <MudTextField @bind-Value="@context.CornerRadius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Привязка">
            <MudSelect T="TurningGroovingTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@TurningGroovingTool.Point.Bottom">Как проходной</MudSelectItem>
                <MudSelectItem Value="@TurningGroovingTool.Point.Top">Как расточной</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddGroovingFaceTool" />

@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<GroovingFaceTool> GroovingFaceTools
    {
        get => Tools.OfType<GroovingFaceTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is GroovingFaceTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddGroovingFaceTool()
    {
        Tools.Add(new GroovingFaceTool(0101, 3, TurningGroovingTool.Point.Top));
        await LocalStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveGroovingFaceTool(GroovingFaceTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(GroovingFaceTools), GroovingFaceTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
