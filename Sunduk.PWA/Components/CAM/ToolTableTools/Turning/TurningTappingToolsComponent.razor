@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="TurningTappingTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Диаметр</MudTh>
        <MudTh>Шаг</MudTh>
        <MudTh>Тип</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
        <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
        @if (context.Type == TappingTool.Types.Cutting)
            {
            <MudTd DataLabel="Тип">Нарезной</MudTd>
            }
        @if (context.Type == TappingTool.Types.Forming)
            {
            <MudTd DataLabel="Тип">Раскатник</MudTd>
            }
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveTurningTappingTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
        </MudTd>
        <MudTd DataLabel="Диаметр">
            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Шаг">
            <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Тип">
            <MudSelect T="TappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@TappingTool.Types.Cutting">Нарезной</MudSelectItem>
                <MudSelectItem Value="@TappingTool.Types.Forming">Раскатник</MudSelectItem>
            </MudSelect>
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddTurningTappingTool" />
@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<TurningTappingTool> TurningTappingTools
    {
        get => Tools.OfType<TurningTappingTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is TurningTappingTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddTurningTappingTool()
    {
        Tools.Add(new TurningTappingTool(0101, TappingTool.Types.Cutting, 8, 1.25));
        await LocalStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveTurningTappingTool(TurningTappingTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(TurningTappingTools), TurningTappingTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
