@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<MudTable Items="ThreadingExternalTools" ReadOnly="ReadOnly" Hover="true" CanCancelEdit="false" Elevation="0">
    <HeaderContent>
        <MudTh>Позиция</MudTh>
        <MudTh>Шаг</MudTh>
        <MudTh>Угол опорной пластины</MudTh>
        <MudTh>Исполнение</MudTh>
        <MudTh/>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Позиция">T@(context.Position.ToolNumber())</MudTd>
        <MudTd DataLabel="Шаг">@(context.Pitch.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs))мм</MudTd>
        <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString(stringOption: Util.PrettyStringOption.AsIs)°</MudTd>
        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Right ? "Правое" : "Левое")</MudTd>
        <MudTd>
            <MudIconButton Class="ma-n3" Variant="Variant.Text" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="(() => RemoveThreadingExternalTool(context))" />
        </MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="Позиция">
            <MudTextField @bind-Value="@context.Position" Adornment="Adornment.Start" AdornmentText="T" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
        </MudTd>
        <MudTd DataLabel="Шаг">
            <MudTextField @bind-Value="@context.Pitch" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Угол опорной пластины">
            <MudTextField @bind-Value="@context.Angle" Adornment="Adornment.End" AdornmentText="°" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
        </MudTd>
        <MudTd DataLabel="Исполнение">
            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                <MudSelectItem Value="@Tool.ToolHand.Right">Правое</MudSelectItem>
                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
            </MudSelect>
        </MudTd>
    </RowEditingTemplate>
</MudTable>
<AddToolButton OnClick="AddThreadingExternalTool" />

@code {
    [Parameter]
    public List<Tool> Tools { get; set; }

    [Parameter] 
    public EventCallback<List<Tool>> ToolsChanged { get; set; }

    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get => Tools.OfType<ThreadingExternalTool>().ToList();
        set
        {
            Tools.RemoveAll(x => x is ThreadingExternalTool);
            Tools.AddRange(value);
        }
    }

    [Parameter]
    public bool ReadOnly { get; set; }

    private async Task AddThreadingExternalTool()
    {
        Tools.Add(new ThreadingExternalTool(0101, 1.5, 1));
        await LocalStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
    private async Task RemoveThreadingExternalTool(ThreadingExternalTool tool)
    {
        Tools.Remove(tool);
        await LocalStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        await ToolsChanged.InvokeAsync(Tools);
    }
}
