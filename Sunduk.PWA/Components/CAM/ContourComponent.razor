@inject ISnackbar Snackbar

<MudField Label="Контур" Variant="Variant.Filled" Margin="Margin.Dense" DisableUnderLine="true">
    <MudGrid Spacing="1">
        <MudItem xs="12" lg="6">
            <MudList DisableGutters="true" Dense="true">
                @foreach (var element in Contour)
                {
                    <MudListItem Dense="true">
                        <MudPaper Outlined="true" Class="py-n2 my-n2">
                            <MudFocusTrap DefaultFocus="DefaultFocus.Element">
                                <MudGrid Justify="Justify.FlexStart" Spacing=1>
                                @switch (element)
                                {
                                    case Point point:
                                    <MudItem>
                                        <MudSelect T="ElementType" Value="ElementType.Point" Variant="FieldsVariant" Immediate="true" ReadOnly="true" OpenIcon="null"
                                        Label="Тип" Margin="Margin.Dense" Style="width: 137px; margin-left: 2px" DisableUnderLine="!FirstFieldsUnderline">
                                            <MudSelectItem T="ElementType" Value="ElementType.Point">Старт</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="point.X" Variant="FieldsVariant" Immediate="true" Label="X" DisableUnderLine="!FieldsUnderline"
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.NullableDoubleConverterWithZero"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="point.Z" Variant="FieldsVariant" Immediate="true" Label="Z" DisableUnderLine="!FieldsUnderline"
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.NullableDoubleConverterWithZero"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="point.Blunt" Variant="FieldsVariant" Immediate="true" Label="R" DisableUnderLine="!FieldsUnderline"
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.DoubleConverter"/>
                                    </MudItem>
                                        break;
                                    case Line line:
                                    <MudItem>
                                        <MudSelect T="ElementType" Value="ElementType.Line" Variant="FieldsVariant" Immediate="true" ValueChanged="((type) => SetArc(Contour.IndexOf(line), type))"
                                        Label="Тип" Margin="Margin.Dense" Style="width: 137px; margin-left: 2px" DisableUnderLine="!FirstFieldsUnderline">
                                            <MudSelectItem T="ElementType" Value="ElementType.Line">Линия</MudSelectItem>
                                            <MudSelectItem T="ElementType" Value="ElementType.Arc">Дуга</MudSelectItem>
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="line.X" Variant="FieldsVariant" Immediate="true" Label="X" DisableUnderLine="!FieldsUnderline" 
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.NullableDoubleConverterWithZero"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="line.Z" Variant="FieldsVariant" Immediate="true" Label="Z" DisableUnderLine="!FieldsUnderline" 
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.NullableDoubleConverterWithZero"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="line.Angle" Variant="FieldsVariant" Immediate="true" Label="A" DisableUnderLine="!FieldsUnderline" 
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.DoubleConverter"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="line.Blunt" Variant="FieldsVariant" Immediate="true" Label="@BluntLabel(line)" DisableUnderLine="!FieldsUnderline" 
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.DoubleConverter"/>
                                    </MudItem>
                                    @*<MudItem>
                                        <MudIconButton Style="margin-top: 3px; height: 40px; width: 40px" Variant="Variant.Text"/>
                                    </MudItem>*@
                                        break;
                                    case Arc arc:
                                    <MudItem>
                                        <MudBadge Origin="Origin.CenterLeft" Icon="@Icons.Material.Filled.Error" Color="Color.Error" Overlap="true" Visible="!ValidArc(Contour.IndexOf(arc))">
                                            <MudSelect T="ElementType" Value="ElementType.Arc" Variant="FieldsVariant" Immediate="true" ValueChanged="((type) => SetLine(Contour.IndexOf(arc), type))"
                                            Label="Тип" Margin="Margin.Dense" Style="width: 85px; margin-left: 2px" DisableUnderLine="!FirstFieldsUnderline">
                                                <MudSelectItem T="ElementType" Value="ElementType.Line">Линия</MudSelectItem>
                                                <MudSelectItem T="ElementType" Value="ElementType.Arc">Дуга</MudSelectItem>
                                            </MudSelect>
                                        </MudBadge>
                                    </MudItem>
                                    <MudItem>
                                        @if (arc.Direction is Infrastructure.Direction.CW)
                                        {
                                            <MudIconButton Style="@($"margin-top: 3px; height: {ButtonSize}px; width: {ButtonSize}px; margin-left: -4px")" Variant="ButtonsVariant" DisableElevation="true"
                                            Icon="@Icons.Material.Filled.RotateRight" OnClick="(() => arc.Direction = Infrastructure.Direction.CCW)"/>
                                        }
                                        @if (arc.Direction is Infrastructure.Direction.CCW)
                                        {
                                            <MudIconButton Style="@($"margin-top: 3px; height: {ButtonSize}px; width: {ButtonSize}px; margin-left: -4px")" Variant="ButtonsVariant" DisableElevation="true"
                                            Icon="@Icons.Material.Filled.RotateLeft" OnClick="(() => arc.Direction = Infrastructure.Direction.CW)"/>
                                        }
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="arc.X" Variant="FieldsVariant" Immediate="true" Label="X" DisableUnderLine="!FieldsUnderline"
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.NullableDoubleConverterWithZero"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="arc.Z" Variant="FieldsVariant" Immediate="true" Label="Z" DisableUnderLine="!FieldsUnderline"
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.NullableDoubleConverterWithZero"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudTextField @bind-Value="arc.Radius" Variant="FieldsVariant" Immediate="true" Label="R" DisableUnderLine="!FieldsUnderline"
                                        Margin="Margin.Dense" Style="@($"width: {FieldsWidth}px; margin-left: -4px")" Converter="Util.DoubleConverter"/>
                                    </MudItem>
                                    
                                        break;
                                }
                                <MudItem Class="d-flex justify-end flex-grow-1 gap-4">
                                    <MudItem>
                                        <MudIconButton Style="@($"margin-top: 3px; margin-left: 4px; height: {ButtonSize}px; width: {ButtonSize}px")" Variant="ButtonsVariant" DisableElevation="true" 
                                        Icon="@Icons.Material.Filled.Calculate" OnClick="(() => CalculateElement(Contour.IndexOf(element)))"/>
                                    </MudItem>
                                    <MudItem>
                                        <MudIconButton Style="@($"margin-top: 3px; height: {ButtonSize}px; width: {ButtonSize}px")" Variant="ButtonsVariant" DisableElevation="true" 
                                        Icon="@Icons.Material.Filled.Add" OnClick="(() => Contour.Insert(Contour.IndexOf(element) + 1, new Line(null, null)))"/>
                                    </MudItem>
                                    @if(Contour.IndexOf(element) > 0)
                                    {
                                    <MudItem>
                                        <MudIconButton Style="@($"margin-top: 3px; margin-left: 4px; height: {ButtonSize}px; width: {ButtonSize}px")" Variant="ButtonsVariant" DisableElevation="true" 
                                        Icon="@Icons.Material.Filled.Remove" OnClick="(() => Contour.Remove(element))"/>
                                    </MudItem>
                                    }
                                </MudItem>
                                
                            </MudGrid>
                            </MudFocusTrap>
                        </MudPaper>
                    </MudListItem>
                }
                @*<MudPaper Outlined="true">
                    <MudListItem Dense="true" OnClick="(() => Contour.Add(new Line(null, null)))">
                        <MudGrid Justify="Justify.Center">
                            <MudItem>
                                <MudIcon Class="mt-1 mb-n1" Icon="@Icons.Material.Filled.Add"/>
                            </MudItem>
                        </MudGrid>
                    </MudListItem>
                </MudPaper>*@
                <MudText>
                    @Path
                </MudText>
                @*<MudText>
                    @($"MaxX{MaxHeight} MaxZ{MaxLength}")
                </MudText>
                <MudText>
                    @($"MedX{MediumX} MedZ{MediumZ}")
                </MudText>
                <MudText>
                    @($"H{ContourHeight} W{ContourWidth}")
                </MudText>*@
            </MudList>
        </MudItem>
        <MudItem xs="12" lg="6">
            <MudPaper Outlined="true" Class="mt-1">
                <div style="text-align: center;" >
                    <svg height="@FieldHeight" width="600" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="@($"{0} {0} {ContourWidth} {ContourHeight}")">
                        <defs>
                            @if (Contour[0].X != null && Contour[0].Z != null)
                            {
                                <g height="@(ContourHeight)" width="@(ContourWidth)" id="contour">
                                    <path stroke="#FF5722" stroke-width="2" fill="none"
                                          d="@Path"/>
                                </g>
                            }
                            <g height="50" width="50" id="cs">
                                <path stroke="white" stroke-width="1" fill="none"
                                      d="M 0,-50 L 0,50 
                                       M -50,0 L 50,0 
                                       M -3,-42 L 0,-50 L 3,-42 
                                       M 42,-3 L 50,0 L 42,3"/>
                            </g>
                        </defs>
                        <g transform="translate(@(Math.Round(ContourWidth / 2 - (MediumZ ?? 0) * 4)),@(Math.Round(ContourHeight / 2 + (MediumX ?? 0) * 2)))">
                            <use xlink:href="#contour"/>
                            <use xlink:href="#cs"/>
                            <text x="4" y="-33" fill="white" style="font-family: 'Roboto Mono', monospace;" font-size="10">X+</text>
                            <text x="35" y="12" fill="white" style="font-family: 'Roboto Mono', monospace;" font-size="10">Z+</text>
                        </g>
                    </svg>
                </div>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudField>


@code {

    public Variant FieldsVariant => Variant.Filled;
    public Variant ButtonsVariant => Variant.Filled;
    public bool FieldsUnderline => false;
    public bool FirstFieldsUnderline => false;
    public int ButtonSize => 48;
    public int FieldsWidth => 87;

    public int ElementIndex { get; set; }

    public ElementType Type { get; set; }

    public enum ElementType
    {
        Point,
        Line,
        Arc
    }

    public double? MaxHeight { get
        {
            double? minX = Contour.Select(x => x.X).Min();
            if (minX > 0) minX = 0;
            double? maxX = Contour.Select(x => x.X).Max();
            return maxX - minX;
        } }

    public double? MediumX { get
        {
            double? minX = Contour.Select(x => x.X).Min();
            if (minX > 0) minX = 0;
            double? maxX = Contour.Select(x => x.X).Max();
            return (maxX + minX) / 2;
        } }

    public double? MaxLength { get
        {
            double? minZ = Contour.Select(x => x.Z).Min();
            double? maxZ = Contour.Select(x => x.Z).Max();
            return maxZ - minZ;
        } }

    public double? MediumZ { get
        {
            double? minZ = Contour.Select(x => x.Z).Min();
            double? maxZ = Contour.Select(x => x.Z).Max();
            return (maxZ + minZ) / 2;
        } }

    public double ContourHeight { get
        {
            double maxHeight = 200;
            double tempCalc = (MaxHeight ?? 0) * 2 + 20;
            if (tempCalc > maxHeight) maxHeight = tempCalc;
            return Math.Abs(maxHeight);
        } }

    public double ContourWidth { get
        {
            double maxWidth = 400;
            double tempCalc = (MaxLength ?? 0) * 6;
            if (tempCalc > maxWidth) maxWidth = tempCalc;
            return Math.Abs(maxWidth);
        } }

    public double FieldHeight { get
        {
            if (Contour.Count < 6) return 330;
            return Contour.Count * 55;
        } }

    public string Path { get
        {
            if (Contour[0].X is null && Contour[0].Z is null) return string.Empty;
            string path = string.Empty;
            foreach (var element in Contour)
            {
                switch (element)
                {
                    case Point point:
                        path += $"M {(point.Z * 4).ToString().Replace(",", ".")},{(-point.X / 2 * 4).ToString().Replace(",", ".")} ";
                        if (point.Blunt > 0 && Contour.Count > Contour.IndexOf(point) + 1)
                        {
                            path += $"A{(point.Blunt * 4).ToString(CultureInfo.InvariantCulture).Replace(",", ".")},{(point.Blunt * 4).ToString(CultureInfo.InvariantCulture).Replace(",", ".")},0,0{(point.Z > (Contour[Contour.IndexOf(point) + 1].Z) ? 0 : 1)},{(point.Z > (Contour[Contour.IndexOf(point) + 1].Z) ? -point.Blunt * 4 : point.Blunt * 4).ToString(CultureInfo.InvariantCulture).Replace(",", ".")},{(-Contour[Contour.IndexOf(point) + 1].X / 2 * 4).ToString().Replace(",", ".")} ";
                        }
                        break;
                    case Line line:
                        double? tempLineX = line.X ?? Contour[Contour.IndexOf(line) - 1].X;
                        double? tempLineZ = line.Z ?? Contour[Contour.IndexOf(line) - 1].Z;
                        path += $"L {(tempLineZ * 4).ToString().Replace(",", ".")},{(-tempLineX / 2 * 4).ToString().Replace(",", ".")} ";
                        break;
                    case Arc arc:
                        double? tempArcX = arc.X ?? Contour[Contour.IndexOf(arc) - 1].X;
                        double? tempArcZ = arc.Z ?? Contour[Contour.IndexOf(arc) - 1].Z;
                        if (ValidArc(Contour.IndexOf(arc)))
                        {
                            path += $"A{(arc.Radius * 4).ToString(CultureInfo.InvariantCulture).Replace(",", ".")},{(arc.Radius * 4).ToString(CultureInfo.InvariantCulture).Replace(",", ".")},0,0{(arc.Direction is Infrastructure.Direction.CCW ? 0 : 1)},{(tempArcZ * 4).ToString().Replace(",", ".")},{(-tempArcX / 2 * 4).ToString().Replace(",", ".")} ";
                        }
                        else
                        {
                            path += $"L {(tempArcZ * 4).ToString().Replace(",", ".")},{(-tempArcX / 2 * 4).ToString().Replace(",", ".")} ";
                        }
                        break;
                }
            }
            return path;
        } set { } }

    public List<Element> Contour { get; set; } = new List<Element>()
    {
        new Point(null, null)
    };

    private void SetArc(int index, ElementType type)
    {
        if (type is ElementType.Arc)
        {
            Contour[index] = new Arc(Contour[index].X, Contour[index].Z, (Contour[index] as Line).Blunt, Sunduk.PWA.Infrastructure.Direction.CCW);
        }
    }

    private void SetLine(int index, ElementType type)
    {
        if (type is ElementType.Line)
        {
            Contour[index] = new Line(Contour[index].X, Contour[index].Z, 0, ((Contour[index] as Arc)!).Radius);
        }
    }

    string ContourElementIcon(Element element)
    {
        return element switch
        {
            Line => Icons.Material.Filled.ArrowDropDown,
            Arc arc => arc.Direction is Infrastructure.Direction.CW ? Icons.Material.Filled.RotateRight : Icons.Material.Filled.RotateLeft,
            _ => Icons.Material.Filled.ArrowDropDown
            };
    }

    static string BluntLabel(Line line)
    {
        return line.BluntType switch
        {
            Blunt.Radius => "R",
            Blunt.SimpleChamfer => "C",
            _ => string.Empty,
        };
    }

    bool ValidArc(int index)
    {
        if (index >= Contour.Count || index <= 0) return false;
        double radius = ((Contour[index] as Arc)!).Radius;
        if (radius <= 0) return false; 
        double? xDifference = (Contour[index].X - Contour[index - 1].X) / 2;
        double? zDifference = Contour[index].Z - Contour[index - 1].Z;
        double length = Math.Sqrt(Math.Pow(xDifference ?? 0, 2) + Math.Pow(zDifference ?? 0, 2));
        return !(radius * 2 < length);
    }

    void CalculateElement(int index)
    {
        var element = Contour[index];
        if (Contour.Count > index + 1)
        {
            switch (element)
            {
                case Point point:
                    if (point.Blunt >= 0 &&
                        point.X is null &&
                        Contour[index + 1] is Line {X: { } } nextLineX)
                    {
                        point.X = nextLineX.X - point.Blunt * 2;
                    }
                    if (point.Blunt >= 0 &&
                        point.Z is null &&
                        Contour[index + 1] is Line {Z: { } })
                    {
                        point.Z = 0;
                    }
                    return;
            }
        }
        else
        {
            Snackbar.Add("Нечего считать");
        }
    }

}