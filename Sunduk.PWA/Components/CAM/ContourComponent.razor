<MudField Label="Контур" Variant="Variant.Filled" Margin="Margin.Dense" DisableUnderLine="true">
    <MudList DisableGutters="true" Dense="true">
        @foreach (var element in Contour)
        {
            <MudListItem Dense="true">
                <MudPaper Outlined="true" Class="py-n2 my-n2">
                    <MudFocusTrap DefaultFocus="DefaultFocus.Element">
                        <MudGrid Justify="Justify.FlexStart" Spacing=1>
                        @switch (element)
                        {
                            case Point point:
                            <MudItem>
                                <MudSelect T="ElementType" Value="ElementType.Point" Variant="FieldsVariant" Immediate="true" ReadOnly="true" OpenIcon="null"
                                Label="Тип" Margin="Margin.Dense" Style="width: 102px">
                                    <MudSelectItem T="ElementType" Value="ElementType.Point">Старт</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="point.X" Variant="FieldsVariant" Immediate="true" Label="X" 
                                Margin="Margin.Dense" Style="width: 90px;" Converter="Util.NullableDoubleConverterWithZero"/>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="point.Z" Variant="FieldsVariant" Immediate="true" Label="Z" 
                                Margin="Margin.Dense" Style="width: 90px;" Converter="Util.NullableDoubleConverterWithZero"/>
                            </MudItem>
                                break;
                            case Line line:
                            <MudItem>
                                <MudSelect T="ElementType" Value="ElementType.Line" Variant="FieldsVariant" Immediate="true" ValueChanged="((type) => SetArc(Contour.IndexOf(line), type))"
                                Label="Тип" Margin="Margin.Dense" Style="width: 102px">
                                    <MudSelectItem T="ElementType" Value="ElementType.Line">Линия</MudSelectItem>
                                    <MudSelectItem T="ElementType" Value="ElementType.Arc">Дуга</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="line.X" Variant="FieldsVariant" Immediate="true" Label="X" 
                                Margin="Margin.Dense" Style="width: 90px" Converter="Util.NullableDoubleConverterWithZero"/>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="line.Z" Variant="FieldsVariant" Immediate="true" Label="Z" 
                                Margin="Margin.Dense" Style="width: 90px" Converter="Util.NullableDoubleConverterWithZero"/>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="line.Angle" Variant="FieldsVariant" Immediate="true" Label="A" 
                                Margin="Margin.Dense" Style="width: 90px" Converter="Util.DoubleConverter"/>
                            </MudItem>
                                break;
                            case Arc arc:
                            <MudItem>
                                <MudSelect T="ElementType" Value="ElementType.Arc" Variant="FieldsVariant" Immediate="true" ValueChanged="((type) => SetLine(Contour.IndexOf(arc), type))"
                                Label="Тип" Margin="Margin.Dense" Style="width: 102px">
                                    <MudSelectItem T="ElementType" Value="ElementType.Line">Линия</MudSelectItem>
                                    <MudSelectItem T="ElementType" Value="ElementType.Arc">Дуга</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="arc.X" Variant="FieldsVariant" Immediate="true"
                                AdornmentColor="Color.Dark" Adornment="Adornment.Start" Label="X" 
                                Margin="Margin.Dense" Style="width: 90px" Converter="Util.NullableDoubleConverterWithZero"/>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="arc.Z" Variant="FieldsVariant" Immediate="true"
                                AdornmentColor="Color.Dark" Adornment="Adornment.Start" Label="Z" 
                                Margin="Margin.Dense" Style="width: 90px" Converter="Util.NullableDoubleConverterWithZero"/>
                            </MudItem>
                            <MudItem>
                                <MudTextField @bind-Value="arc.Radius" Variant="FieldsVariant" Immediate="true"
                                AdornmentColor="Color.Dark" Adornment="Adornment.Start" Label="R" 
                                Margin="Margin.Dense" Style="width: 90px" Converter="Util.DoubleConverter"/>
                            </MudItem>
                                break;
                        }
                        <MudItem>
                            <MudIconButton Style="margin-top: 3px; height: 40px; width: 40px" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Add" OnClick="(() => Contour.Insert(Contour.IndexOf(element) + 1, new Line(null, null)))"/>
                        </MudItem>
                        @if(Contour.IndexOf(element) > 0)
                        {
                            <MudItem>
                                <MudIconButton Style="margin-top: 3px; height: 40px; width: 40px" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Remove" OnClick="(() => Contour.Remove(element))"/>
                            </MudItem>
                        }
                    </MudGrid>
                    </MudFocusTrap>
                </MudPaper>
            </MudListItem>
        }
        @*<MudPaper Outlined="true">
            <MudListItem Dense="true" OnClick="(() => Contour.Add(new Line(null, null)))">
                <MudGrid Justify="Justify.Center">
                    <MudItem>
                        <MudIcon Class="mt-1 mb-n1" Icon="@Icons.Material.Filled.Add"/>
                    </MudItem>
                </MudGrid>
            </MudListItem>
        </MudPaper>*@
        <MudPaper>
            
            
            <center>
                <svg height="@(ContourHeigh + 40)" width="@(ContourWidth + 50)" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                    <defs>
                        <g height="@(ContourHeigh)" width="@(ContourWidth)" id="contour">
                            <path stroke="#FF5722" stroke-width="2" fill="none"
                                d="@Path"/>
                        </g>
                        <g height="50" width="50" id="cs">
                            <path stroke="white" stroke-width="1" fill="none"
                                d="M 0,-50 L 0,50 M -50,0 L50,0"/>
                        </g>
                        @*<g height="@(MaxDiameter * 4 + 10)" id="cs">
                            <path stroke="red" stroke-width="2" fill="none"
                                d="@Path"/>
                        </g>*@
                    </defs>
                    <g transform="translate(@(ContourWidth / 2 ),@(ContourHeigh + 20))">
                        <use xlink:href="#contour"/>
                        <use xlink:href="#cs"/>
                        <text x="5" y="-35" style="font-family: 'Roboto Mono', monospace; color: white" font-size="10">X</text>
                        <text x="40" y="10" style="font-family: 'Roboto Mono', monospace; color: white" font-size="10">Z</text>
                    </g>
                </svg>
            </center>
        </MudPaper>
        <MudText>
            @Path
        </MudText>
        <MudText>
            @($"X{MaxHeigh} Z{MaxLength}")
        </MudText>
        <MudText>
            @($"H{ContourHeigh} W{ContourWidth}")
        </MudText>
    </MudList>
</MudField>


@code {

    public Variant FieldsVariant { get; set; } = Variant.Outlined;

    public int ElementIndex { get; set; }

    public ElementType Type { get; set; }

    public enum ElementType
    {
        Point,
        Line,
        Arc
    }

    public double? MaxHeigh { get
        {
            var minX = Contour.Select(x => x.X).Min();
            if (minX > 0) minX = 0;
            var maxX = Contour.Select(x => x.X).Max();
            return maxX - minX;
        } }
    public double? MaxLength { get
        {
            var minZ = Contour.Select(x => x.Z).Min();
            var maxZ = Contour.Select(x => x.Z).Max();
            return maxZ - minZ;
        } }

    public double ContourHeigh { get
        {
            double maxHeigh = 200;
            var tempCalc = (MaxHeigh ?? 0) * 2 + 20;
            if (tempCalc > maxHeigh) maxHeigh = tempCalc;
            return Math.Abs(maxHeigh);
        } }

    public double ContourWidth { get
        {
            double maxWidth = 400;
            var tempCalc = (MaxLength ?? 0) * 6;
            if (tempCalc > maxWidth) maxWidth = tempCalc;
            return Math.Abs(maxWidth);
        } }

    public string Path { get
        {
            string path = string.Empty;
            foreach (var element in Contour)
            {
                switch (element)
                {
                    case Point point:
                        path += $"M {(point.Z*4).ToString().Replace(",",".")},{(-point.X/2*4).ToString().Replace(",",".")} ";
                        break;
                    case Line line:
                        path += $"L {(line.Z*4).ToString().Replace(",",".")},{(-line.X/2*4).ToString().Replace(",",".")} ";
                        break;
                }
            }
            return path;
        } set { } }

    public List<Element> Contour { get; set; } = new List<Element>()
    {
        new Point(null, null),
    };

    private void SetArc(int index, ElementType type)
    {
        if (type is ElementType.Arc)
        {
            Contour[index] = new Arc(null, null, 0, Sunduk.PWA.Infrastructure.Direction.CCW);
        }
    }

    private void SetLine(int index, ElementType type)
    {
        if (type is ElementType.Line)
        {
            Contour[index] = new Line(null, null);
        }
    }
}
