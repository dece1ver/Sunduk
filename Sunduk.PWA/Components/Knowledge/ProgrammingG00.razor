@using MudBlazor.Services
@implements IAsyncDisposable

<style>
    .ex{padding-right: @PaddingRight; font-family: 'Roboto Mono', monospace; font-size: @FontSize;}
</style>
<style>
    .desc{font-size: @FontSize; font-style: italic; font-weight: lighter}
</style>


<MudText Typo=Typo.body2>
    Команда G00 перемещает инструмент на позицию, указанную относительно системы координат заготовки на скорости ускоренного подвода. 
    Указание позиции допускается в <MudLink Typo=Typo.body2 @onclick="(()=>absMbox.Show())">абсолютных</MudLink> и <MudLink Typo=Typo.body2 @onclick="(()=>incMbox.Show())">относительных</MudLink> значениях. 
    Скорость ускоренного подвода для каждой оси задается в параметре системы ЧПУ №1420 и не может задаваться в адресе F.
</MudText>
<MudField Variant=Variant.Filled Label="Пример УП" DisableUnderLine=true>
    <table>
        <tbody>
            <tr>
                <td class=ex>G00 X_ Z_;</td>
                <td class=desc>ускоренное перемещение по координатам X_ Z_</td>
            </tr>
        </tbody>
    </table>
</MudField>

<MudMessageBox @ref="absMbox" Title="Абсолютное перемещение">
    <MessageContent>
        При программировании в абсолютных значениях указываются координаты относительно центра системы координат заготовки.
    </MessageContent>
</MudMessageBox>
<MudMessageBox @ref="incMbox" Title="Относительное перемещение">
    <MessageContent>
        При программировании в относительных/инкрементных значениях указываются координаты относительно текущего положения инструмента.
    </MessageContent>
</MudMessageBox>

@code 
{
    [Inject] IBreakpointService BreakpointListener { get; set; }

    private Guid _subscriptionId;
    private Breakpoint breakpoint;

    public string FontSize { get
        {
            switch (breakpoint)
            {
                case Breakpoint.Xs: return "xx-small";
                case Breakpoint.Sm: return "x-small";
                default: return "medium";
            }
        } }

    public string PaddingRight { get
        {
            switch (breakpoint)
            {
                case Breakpoint.Xs: return "10px";
                case Breakpoint.Sm: return "15px";
                default: return "25px";
            }
        } }

    MudMessageBox absMbox { get; set; }
    MudMessageBox incMbox { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
			{
				InvokeAsync(StateHasChanged);
			}, new ResizeOptions
			{
				ReportRate = 250,
				NotifyOnBreakpointOnly = true,
			});

			breakpoint = subscriptionResult.Breakpoint;
			_subscriptionId = subscriptionResult.SubscriptionId;
			StateHasChanged();
		}

		await base.OnAfterRenderAsync(firstRender);
	}
	public async ValueTask DisposeAsync() => await BreakpointListener.Unsubscribe(_subscriptionId);

}
