<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid Justify="Justify.SpaceAround">
        <MudItem xs="6" sm="5" md="5" lg="5">
            <MudTextField @bind-Value="_DrillDiameter" T="string" Label="Диаметр" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" 
                          @onfocus="() => CurrentImage = Images.DrillDiameter"/>
        </MudItem>
        <MudItem xs="6" sm="5" md="5" lg="5">
            <MudTextField @bind-Value="_DrillAngle" T="string" Label="Угол" Variant="Variant.Text" Immediate="true"
                          @onfocus="() => CurrentImage = Images.DrillAngle"/>
        </MudItem>
        @if (DrillDiameter > 0 && DrillAngle > 0 && DrillAngle < 180)
        {
            <MudItem xs="12">
                <MudField Variant="Variant.Filled">
                    <MudText>@ResultMessage</MudText>
                </MudField>
            </MudItem>
        }
        <MudItem xs="12" xl="12">
            <MudCard Outlined="true" Style="margin: 0">
                <MudCardContent>
                    @if (CurrentImage == Images.DrillDiameter)
                    {
                        <center>
                            <img src="/img/stuffimages/drill/drill_diam.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                    @if (CurrentImage == Images.DrillAngle)
                    {
                        <center>
                            <img src="/img/stuffimages/drill/drill_angle.svg" asp-append-version="true" width="@_imgWidth" height="@_imgHeigth" />
                        </center>
                    }
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code 
{
    readonly int _imgHeigth = 100;
    readonly int _imgWidth = 250;

    public enum Images
    {
        DrillDiameter,
        DrillAngle
    };
    public enum ImageType { Diameter, ToolRaduis, ChamferAngle, ChamferSize };
    public Images CurrentImage { get; set; } = Images.DrillDiameter;

    public string _DrillDiameter { get; set; }
    public double DrillDiameter { get => Util.GetDouble(_DrillDiameter); }

    public string _DrillAngle { get; set; }
    public double DrillAngle { get => Util.GetDouble(_DrillAngle); }

    public string ResultMessage { get => $"Длина конуса {((DrillDiameter / 2) * Math.Tan((90 - DrillAngle / 2).Radians())).ToPrettyString()} мм"; }

}
