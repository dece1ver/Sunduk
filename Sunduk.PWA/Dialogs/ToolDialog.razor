@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudDialog DisableSidePadding="true">
    <TitleContent>Редактор инструмента</TitleContent>
    <DialogContent>
        <div Style=@($"overflow-y: scroll; max-height: {100+100}px; width: {300+100}px;")>
            
        </div>
    </DialogContent>
    <DialogActions>
        <MudButtonGroup Class="mr-3" Variant="Variant.Outlined" OverrideStyles="false">
            <MudButton Variant="Variant.Outlined" Class="mr-1" OnClick="Cancel">Подвердить без сохранения</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Outlined" Class="mr-1" OnClick="Submit">Подвердить и сохранить</MudButton>
        </MudButtonGroup>
        
    </DialogActions>
</MudDialog>


@code 
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    private List<Tool> _Tools;


    [Parameter]
    public List<Tool> Tools
    {
        get { return _Tools; }
        set
        {
            _Tools = value;
            _ = SetTools();
        }
    }

    private async Task SetTools()
    {
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
        await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
        await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
        await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
    }

    private TurningExternalTool selectedTurningExternalTool = null;
    private TurningInternalTool selectedTurningInternalTool = null;
    private GroovingExternalTool selectedGroovingExternalTool = null;
    private GroovingInternalTool selectedGroovingInternalTool = null;
    private ThreadingExternalTool selectedThreadingExternalTool = null;
    private ThreadingInternalTool selectedThreadingInternalTool = null;
    private DrillingTool selectedDrillingTool = null;
    private TappingTool selectedTappingTool = null;

    public List<TurningExternalTool> TurningExternalTools
    {
        get
        {
            List<TurningExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningExternalTool))
            {
                result.Add(item as TurningExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<TurningInternalTool> TurningInternalTools
    {
        get
        {
            List<TurningInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningInternalTool))
            {
                result.Add(item as TurningInternalTool);
            }
            return result;
        }
        set { }
    }

    public List<GroovingExternalTool> GroovingExternalTools
    {
        get
        {
            List<GroovingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingExternalTool))
            {
                result.Add(item as GroovingExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<GroovingInternalTool> GroovingInternalTools
    {
        get
        {
            List<GroovingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingInternalTool))
            {
                result.Add(item as GroovingInternalTool);
            }
            return result;
        }
        set { }
    }

    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get
        {
            List<ThreadingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingExternalTool))
            {
                result.Add(item as ThreadingExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get
        {
            List<ThreadingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingInternalTool))
            {
                result.Add(item as ThreadingInternalTool);
            }
            return result;
        }
        set { }
    }



    public List<DrillingTool> DrillingTools
    {
        get
        {
            List<DrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is DrillingTool))
            {
                result.Add(item as DrillingTool);
            }
            return result;
        }
    }

    public List<TappingTool> TappingTools
    {
        get
        {
            List<TappingTool> result = new();
            foreach (var item in Tools.Where(x => x is TappingTool))
            {
                result.Add(item as TappingTool);
            }
            return result;
        }
    }

    public List<SpecialTool> SpecialTools
    {
        get
        {
            List<SpecialTool> result = new();
            foreach (var item in Tools.Where(x => x is SpecialTool))
            {
                result.Add(item as SpecialTool);
            }
            return result;
        }
    }

    private void AddTurningExternalTool() => Tools.Add(new TurningExternalTool(0101, TurningExternalTool.Types.Bar, 80, 0.8));
    private void RemoveTurningExternalTool() => Tools.Remove(TurningExternalTools[^1]);

    private void AddTurningInternalTool() => Tools.Add(new TurningInternalTool(0101, 25, 80, 0.8));
    private void RemoveTurningInternalTool() => Tools.Remove(TurningInternalTools[^1]);

    private void AddGroovingExternalTool() => Tools.Add(new GroovingExternalTool(0101, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Left));
    private void RemoveGroovingExternalTool() => Tools.Remove(GroovingExternalTools[^1]);

    private void AddGroovingInternalTool() => Tools.Add(new GroovingInternalTool(0101, 20, 3, GroovingInternalTool.Point.Left));
    private void RemoveGroovingInternalTool() => Tools.Remove(GroovingInternalTools[^1]);

    private void AddThreadingExternalTool() => Tools.Add(new ThreadingExternalTool(0101, 1.5, 1));
    private void RemoveThreadingExternalTool() => Tools.Remove(ThreadingExternalTools[^1]);

    private void AddThreadingInternalTool() => Tools.Add(new ThreadingInternalTool(0101, 20, 1.5, 1));
    private void RemoveThreadingInternalTool() => Tools.Remove(ThreadingInternalTools[^1]);

    private void AddDrillingTool() => Tools.Add(new DrillingTool(0101, DrillingTool.Types.Solid, 10, 140));
    private void RemoveDrillingTool() => Tools.Remove(DrillingTools[^1]);

    private void AddTappingTool() => Tools.Add(new TappingTool(0101, TappingTool.Types.Cutting, 8, 1.25));
    private void RemoveTappingTool() => Tools.Remove(TappingTools[^1]);

    MudTabs tabs;

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            if (tabs.ActivePanelIndex > 0)
            {
                tabs.ActivatePanel(tabs.ActivePanelIndex - 1);
            }
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            if (tabs.ActivePanelIndex < 7)
            {
                tabs.ActivatePanel(tabs.ActivePanelIndex + 1);
            }
        }
    }

    void Submit()
    {
        _ = SetTools();
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}