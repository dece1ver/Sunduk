@inject Blazored.LocalStorage.ILocalStorageService localStorage

<MudDialog>
    <TitleContent>@($"Tools: {Tools.Count} | Turning: {TurningExternalTools.Count} ")</TitleContent>
    <DialogContent>
        <MudField Label="Инструмент для наружного точения" Variant="Variant.Outlined">
            <MudTable Dense="true" Items="TurningExternalTools" ReadOnly="false" CanCancelEdit="false" @bind-SelectedItem="selectedTurningExternalTool" Elevation="0">
                <HeaderContent>
                    <MudTh>Позиция</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Угол кромки</MudTh>
                    <MudTh>Радиус кромки</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                    <MudTd DataLabel="Описание">@context.Name</MudTd>
                    <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                    <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Позиция">
                        <MudTextField @bind-Value="@context.Position" Format="D4" Required />
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudSelect T="TurningExternalTool.Types" @bind-Value="@context.Type" Required>
                            <MudSelectItem Value="@TurningExternalTool.Types.Bar">Проходной</MudSelectItem>
                            <MudSelectItem Value="@TurningExternalTool.Types.Face">Подрезной</MudSelectItem>
                        </MudSelect>
                    </MudTd>
                    <MudTd DataLabel="Угол кромки">
                        <MudTextField @bind-Value="@context.Angle" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                    <MudTd DataLabel="Радиус кромки">
                        <MudTextField @bind-Value="@context.Radius" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        </MudField>

        <MudField Label="Инструмент для внутреннего точения" Variant="Variant.Outlined">
            <MudTable Dense="true" Items="TurningInternalTools" ReadOnly="false" CanCancelEdit="false" @bind-SelectedItem="selectedTurningInternalTool" Elevation="0">
                <HeaderContent>
                    <MudTh>Позиция</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Диаметр</MudTh>
                    <MudTh>Угол кромки</MudTh>
                    <MudTh>Радиус кромки</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                    <MudTd DataLabel="Описание">@context.Name</MudTd>
                    <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                    <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                    <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Позиция">
                        <MudTextField @bind-Value="@context.Position" Format="D4" Required />
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudTextField @bind-Value="@context.Name" ReadOnly="true" />
                    </MudTd>
                    <MudTd DataLabel="Диаметр">
                        <MudTextField @bind-Value="@context.Diameter" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                    <MudTd DataLabel="Угол кромки">
                        <MudTextField @bind-Value="@context.Angle" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                    <MudTd DataLabel="Радиус кромки">
                        <MudTextField @bind-Value="@context.Radius" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        </MudField>
        <MudField Label="Инструмент для наружных канавок и отрезки" Variant="Variant.Outlined">
            <MudTable Dense="true" Items="GroovingExternalTools" ReadOnly="false" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingExternalTool" Elevation="0">
                <HeaderContent>
                    <MudTh>Позиция</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Ширина</MudTh>
                    <MudTh>Привязка</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                    <MudTd DataLabel="Описание">@context.Name</MudTd>
                    <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                    <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingExternalTool.Point.Left ? "Как проходной" : "Как отрезной")</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Позиция">
                        <MudTextField @bind-Value="@context.Position" Format="D4" Required />
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudSelect T="GroovingExternalTool.Types" @bind-Value="@context.Type" Required>
                            <MudSelectItem Value="@GroovingExternalTool.Types.Grooving">Канавочный</MudSelectItem>
                            <MudSelectItem Value="@GroovingExternalTool.Types.Cutting">Отрезной</MudSelectItem>
                            <MudSelectItem Value="@GroovingExternalTool.Types.Blade">Лезвие</MudSelectItem>
                        </MudSelect>
                    </MudTd>
                    <MudTd DataLabel="Угол кромки">
                        <MudTextField @bind-Value="@context.Width" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudSelect T="GroovingExternalTool.Point" @bind-Value="@context.ZeroPoint" Required>
                            <MudSelectItem Value="@GroovingExternalTool.Point.Left">Как проходной</MudSelectItem>
                            <MudSelectItem Value="@GroovingExternalTool.Point.Right">Как отрезной</MudSelectItem>
                        </MudSelect>
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        </MudField>

        <MudField Label="Инструмент для внутренних канавок" Variant="Variant.Outlined">
            <MudTable Dense="true" Items="GroovingInternalTools" ReadOnly="false" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingInternalTool" Elevation="0">
                <HeaderContent>
                    <MudTh>Позиция</MudTh>
                    <MudTh>Описание</MudTh>
                    <MudTh>Диаметр</MudTh>
                    <MudTh>Ширина</MudTh>
                    <MudTh>Привязка</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                    <MudTd DataLabel="Описание">@context.Name</MudTd>
                    <MudTd DataLabel="Диаметр">@context.Diameter</MudTd>
                    <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                    <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingInternalTool.Point.Left ? "Как расточной" : "Как отрезной")</MudTd>
                </RowTemplate>
                <RowEditingTemplate>
                    <MudTd DataLabel="Позиция">
                        <MudTextField @bind-Value="@context.Position" Format="D4" Required />
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudTextField @bind-Value="@context.Name" ReadOnly="true" />
                    </MudTd>
                    <MudTd DataLabel="Диаметр">
                        <MudTextField @bind-Value="@context.Diameter" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                    <MudTd DataLabel="Угол кромки">
                        <MudTextField @bind-Value="@context.Width" Converter="Util.DoubleConverter" Required />
                    </MudTd>
                    <MudTd DataLabel="Описание">
                        <MudSelect T="GroovingInternalTool.Point" @bind-Value="@context.ZeroPoint" Required>
                            <MudSelectItem Value="@GroovingInternalTool.Point.Left">Как расточной</MudSelectItem>
                            <MudSelectItem Value="@GroovingInternalTool.Point.Right">Как отрезной</MudSelectItem>
                        </MudSelect>
                    </MudTd>
                </RowEditingTemplate>
            </MudTable>
        </MudField>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>


@code 
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }


    private List<Tool> _Tools;


    [Parameter]
    public List<Tool> Tools
    {
        get { return _Tools; }
        set
        {
            _Tools = value;
            _ = SetTools();
        }
    }

    private async Task SetTools()
    {
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
        await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
        await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
        await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
    }

    private TurningExternalTool selectedTurningExternalTool = null;
    private TurningInternalTool selectedTurningInternalTool = null;
    private GroovingExternalTool selectedGroovingExternalTool = null;
    private GroovingInternalTool selectedGroovingInternalTool = null;
    private ThreadingExternalTool selectedThreadingExternalTool = null;
    private ThreadingInternalTool selectedThreadingInternalTool = null;
    private DrillingTool selectedDrillingTool = null;
    private TappingTool selectedTappingTool = null;

    public List<TurningExternalTool> TurningExternalTools
    {
        get
        {
            List<TurningExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningExternalTool))
            {
                result.Add(item as TurningExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<TurningInternalTool> TurningInternalTools
    {
        get
        {
            List<TurningInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningInternalTool))
            {
                result.Add(item as TurningInternalTool);
            }
            return result;
        }
        set { }
    }

    public List<GroovingExternalTool> GroovingExternalTools
    {
        get
        {
            List<GroovingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingExternalTool))
            {
                result.Add(item as GroovingExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<GroovingInternalTool> GroovingInternalTools
    {
        get
        {
            List<GroovingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingInternalTool))
            {
                result.Add(item as GroovingInternalTool);
            }
            return result;
        }
        set { }
    }

    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get
        {
            List<ThreadingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingExternalTool))
            {
                result.Add(item as ThreadingExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get
        {
            List<ThreadingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingInternalTool))
            {
                result.Add(item as ThreadingInternalTool);
            }
            return result;
        }
        set { }
    }



    public List<DrillingTool> DrillingTools
    {
        get
        {
            List<DrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is DrillingTool))
            {
                result.Add(item as DrillingTool);
            }
            return result;
        }
    }

    public List<TappingTool> TappingTools
    {
        get
        {
            List<TappingTool> result = new();
            foreach (var item in Tools.Where(x => x is TappingTool))
            {
                result.Add(item as TappingTool);
            }
            return result;
        }
    }

    public List<SpecialTool> SpecialTools
    {
        get
        {
            List<SpecialTool> result = new();
            foreach (var item in Tools.Where(x => x is SpecialTool))
            {
                result.Add(item as SpecialTool);
            }
            return result;
        }
    }


    void Submit()
    {
        _ = SetTools();
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}