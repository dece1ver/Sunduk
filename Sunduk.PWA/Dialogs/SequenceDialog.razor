@inject IDialogService DialogService

<MudDialog>
    <TitleContent>Добавление перехода</TitleContent>
    <DialogContent>
        <MudField Label="Заготовка" Variant="Variant.Outlined">@WorkpieceInfo</MudField>
        <MudGrid Class="mt-2">
            <MudItem xs="4">
                <MudSelect Label="Тип" T="SequenceType" ValueChanged="OnSequenceChanged">
                    @foreach (var type in Enum.GetValues(typeof(SequenceType)))
                    {
                        switch (type)
                        {
                            case SequenceType.General:
                                <MudSelectItem Value="@SequenceType.General">Общие</MudSelectItem>
                                break;
                            case SequenceType.ExternalTurning:
                                <MudSelectItem Value="@SequenceType.ExternalTurning">Наружное точение</MudSelectItem>
                                break;
                            case SequenceType.Drilling:
                                <MudSelectItem Value="@SequenceType.Drilling">Сверление</MudSelectItem>
                                break;
                            case SequenceType.Threading:
                                <MudSelectItem Value="@SequenceType.Threading">Нарезание резьбы</MudSelectItem>
                                break;
                            case SequenceType.Grooving:
                                <MudSelectItem Value="@SequenceType.Grooving">Обработка канавок и отрезка</MudSelectItem>
                                break;
                        }
                    }
                </MudSelect>
            </MudItem>

            @switch (Type)
            {
                #region Общие
                case SequenceType.General:
                    <MudItem xs="4">
                        <MudSelect Label="Переход" T="GeneralSequences" @bind-Value="GeneralSequence">
                            <MudSelectItem Value="@(GeneralSequences.Limiter)">Упор</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools)
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    break;
                #endregion
                #region Токарные
                case SequenceType.ExternalTurning:
                    <MudItem xs="4">
                        <MudSelect Label="Переход" T="TurningSequences" @bind-Value="TurningSequence">
                            <MudSelectItem Value="@(TurningSequences.Facing)">Торцевание</MudSelectItem>
                            <MudSelectItem Value="@(TurningSequences.RoughFacing)">Черновое торцевание</MudSelectItem>
                            <MudSelectItem Value="@(TurningSequences.FinishFacing)">Чистовое торцевание</MudSelectItem>
                            <MudSelectItem Value="@(TurningSequences.RoughTurning)">Черновое точение</MudSelectItem>
                            <MudSelectItem Value="@(TurningSequences.FinishTurning)">Чистовое точение</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    @if (TurningSequence == TurningSequences.Facing)
                    {
                        <MudItem xs="4">
                            <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Съем" @bind-Value="_StepOver" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Immediate="true" />
                        </MudItem>
                    }
                    @if (TurningSequence == TurningSequences.RoughFacing)
                    {
                        <MudItem xs="4">
                            <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Съем" @bind-Value="_StepOver" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Immediate="true" />
                        </MudItem>
                    }
                    @if (TurningSequence == TurningSequences.FinishFacing)
                    {
                        <MudItem xs="4">
                            <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Immediate="true" />
                        </MudItem>
                    }
                    @if (TurningSequence == TurningSequences.RoughTurning)
                    {
                        <MudItem xs="4">
                            <MudTextField Label="Съем" @bind-Value="_StepOver" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Чистовой припуск по Х" @bind-Value="_ProfStockAllowX" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Immediate="true" />
                        </MudItem>
                    }
                    break;
                #endregion
                #region Сверлильные
                case SequenceType.Drilling:
                    <MudItem xs="4">
                        <MudSelect Label="Переход" T="DrillingSequences" @bind-Value="DrillingSequence">
                            <MudSelectItem Value="@(DrillingSequences.HighSpeedDrilling)">Высокоскоростное сверление</MudSelectItem>
                            <MudSelectItem Value="@(DrillingSequences.PeckingDrilling)">Прерывистое сверление</MudSelectItem>
                            <MudSelectItem Value="@(DrillingSequences.PeckingDeepDrilling)">Глубокое сверление</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is DrillingTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    @if (DrillingSequence == DrillingSequences.HighSpeedDrilling)
                    {
                        <MudItem xs="6">
                            <MudTextField Label="Начальная точка" @bind-Value="_DrillStart" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Конечная точка" @bind-Value="_DrillEnd" Immediate="true" />
                        </MudItem>
                    }
                    @if (DrillingSequence == DrillingSequences.PeckingDrilling)
                    {
                        <MudItem xs="4">
                            <MudTextField Label="Глубина" @bind-Value="_PeckingDepth" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Начальная точка" @bind-Value="_DrillStart" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Конечная точка" @bind-Value="_DrillEnd" Immediate="true" />
                        </MudItem>
                    }
                    @if (DrillingSequence == DrillingSequences.PeckingDeepDrilling)
                    {
                        <MudItem xs="4">
                            <MudTextField Label="Глубина" @bind-Value="_PeckingDeepDepth" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Начальная точка" @bind-Value="_DrillStart" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Конечная точка" @bind-Value="_DrillEnd" Immediate="true" />
                        </MudItem>
                    }
                    break;
                #endregion
                #region Резьбонарезные
                case SequenceType.Threading:
                    <MudItem xs="4">
                        <MudSelect Label="Переход" T="ThreadingSequences" ValueChanged="OnThreadingSequenceChanged">
                            <MudSelectItem Value="@(ThreadingSequences.ThreadCutting)">Точение резьбы</MudSelectItem>
                            <MudSelectItem Value="@(ThreadingSequences.Tapping)">Нарезание метчиком</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    @if (ThreadingSequence == ThreadingSequences.ThreadCutting)
                    {
                        <MudItem xs="4">
                            <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                                @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect Label="Стандарт" T="ThreadStandart" @bind-Value="ThreadStandart">
                                <MudSelectItem Value="@(ThreadStandart.Metric)">60° Метрическая</MudSelectItem>
                                <MudSelectItem Value="@(ThreadStandart.BSPP)">55° Трубная цилиндрическая</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudSelect Label="Тип" T="CuttingType" @bind-Value="ThreadType">
                                <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                                <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Диаметр резьбы" @bind-Value="_ThreadDiameter" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Шаг резьбы" @bind-Value="_ThreadPitch" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Начальная точка" @bind-Value="_ThreadStart" Immediate="true" />
                        </MudItem>
                        <MudItem xs="6">
                            <MudTextField Label="Конечная точка" @bind-Value="_ThreadEnd" Immediate="true" />
                        </MudItem>
                    }
                    @if (ThreadingSequence == ThreadingSequences.Tapping)
                    {
                        <MudItem xs="4">
                            <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                                @foreach (var tool in Tools.Where(x => x is TappingTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Скорость резания" @bind-Value="_TapCutSpeed" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Начальная точка" @bind-Value="_TapStart" Immediate="true" />
                        </MudItem>
                        <MudItem xs="4">
                            <MudTextField Label="Конечная точка" @bind-Value="_TapEnd" Immediate="true" />
                        </MudItem>
                    }
                    break;
                #endregion
                #region Канавочные
                case SequenceType.Grooving:
                    <MudItem xs="4">
                        <MudSelect Label="Переход" T="GroovingSequences" @bind-Value="GroovingSequence">
                            <MudSelectItem Value="@(GroovingSequences.Grooving)">Канавка</MudSelectItem>
                            <MudSelectItem Value="@(GroovingSequences.Cutting)">Отрезка</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="4">
                        <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool">
                            @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                            {
                                <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    break;
                #endregion
                default:
                    break;
            }
        </MudGrid>
        <MudItem Class="mt-4" xs="12" sm="12" md="12">
            <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Class="monofield" Variant="Variant.Filled" Text="@ProgramText.Trim('\n')" Lines="@(ProgramText.Trim('\n').Count(x => x == '\n') + 1)" />
        </MudItem>
    </DialogContent>
    <DialogActions>
        <MudButton Size="Size.Large" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OpenToolDialog">Список инструмента</MudButton>
        <MudButton Size="Size.Large" Color="Color.Primary" Variant="Variant.Outlined" OnClick="Submit">Ok</MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public Machines Machine { get; set; }
    [Parameter] public List<Tool> Tools { get; set; }
    [Parameter] public List<Sequence> Program { get; set; }
    [Parameter] public double WorkpieceExternalDiameter { get; set; }
    [Parameter] public double WorkpieceInternalDiameter { get; set; }
    [Parameter] public double WorkpieceLength { get; set; }
    [Parameter] public Materials WorkpieceMaterial { get; set; }

    private void OnSequenceChanged(SequenceType value)
    {
        Type = value;
        Tool = null;
    }

    private void OnThreadingSequenceChanged(ThreadingSequences value)
    {
        ThreadingSequence = value;
        Tool = null;
    }


    #region Типы переходов
    public SequenceType Type { get; set; }

    public enum GeneralSequences
    {
        Limiter
    }

    public GeneralSequences GeneralSequence { get; set; }

    public enum TurningSequences
    {
        Facing,
        RoughFacing,
        FinishFacing,
        RoughTurning,
        FinishTurning
    }

    public TurningSequences TurningSequence { get; set; }

    public enum DrillingSequences
    {
        HighSpeedDrilling,
        PeckingDrilling,
        PeckingDeepDrilling
    }

    public DrillingSequences DrillingSequence { get; set; }

    public enum ThreadingSequences
    {
        ThreadCutting, Tapping
    }

    public ThreadingSequences ThreadingSequence { get; set; }

    public enum GroovingSequences
    {
        Grooving,
        Cutting
    }

    public GroovingSequences GroovingSequence { get; set; }
    #endregion

    public Tool Tool { get; set; }

    #region Точение резьбы
    public ThreadStandart ThreadStandart { get; set; }
    public CuttingType ThreadType { get; set; }

    public string _ThreadDiameter { get; set; }
    public double ThreadDiameter { get => Util.GetDouble(_ThreadDiameter, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadPitch { get; set; }
    public double ThreadPitch { get => Util.GetDouble(_ThreadPitch, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadStart { get; set; }
    public double ThreadStart { get => Util.GetDouble(_ThreadStart, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadEnd { get; set; } = "-";
    public double ThreadEnd { get => Util.GetDouble(_ThreadEnd, numberOption: Util.GetNumberOption.Any); }
    #endregion

    #region Резьбонарезание
    public string _TapCutSpeed { get; set; }
    public double TapCutSpeed { get => Util.GetDouble(_TapCutSpeed, numberOption: Util.GetNumberOption.Any); }

    public string _TapStart { get; set; }
    public double TapStart { get => Util.GetDouble(_TapStart, numberOption: Util.GetNumberOption.Any); }

    public string _TapEnd { get; set; } = "-";
    public double TapEnd { get => Util.GetDouble(_TapEnd, numberOption: Util.GetNumberOption.Any); }
    #endregion

    public string WorkpieceInfo
    {
        get
        {
            string materialInfo = string.Empty;
            switch (WorkpieceMaterial)
            {
                case Materials.Steel:
                    materialInfo = "Стальная";
                    break;
                case Materials.Stainless:
                    materialInfo = "Нержавеющая";
                    break;
                case Materials.Brass:
                    materialInfo = "Бронзовая";
                    break;
            }
            string hole = string.Empty;
            switch (WorkpieceInternalDiameter)
            {
                case > 0:
                    hole = $" с отверстием Ø{WorkpieceInternalDiameter.ToPrettyString()}мм";
                    break;
                default:
                    break;
            }
            return $"{materialInfo} заготовка Ø{WorkpieceExternalDiameter.ToPrettyString()}мм{hole}, L-{WorkpieceLength.ToPrettyString()}мм";
        }
    }

    #region Токарка
    public string _StepOver { get; set; }
    public double StepOver { get => Util.GetDouble(_StepOver); }

    public string _RoughStockAllow { get; set; }
    public double RoughStockAllow { get => Util.GetDouble(_RoughStockAllow); }

    public string _ProfStockAllowX { get; set; }
    public double ProfStockAllowX { get => Util.GetDouble(_ProfStockAllowX); }

    public string _ProfStockAllowZ { get; set; }
    public double ProfStockAllowZ { get => Util.GetDouble(_ProfStockAllowZ); }
    #endregion

    #region Сверловка
    public string _DrillStart { get; set; }
    public double DrillStart { get => Util.GetDouble(_DrillStart, numberOption: Util.GetNumberOption.Any); }

    public string _DrillEnd { get; set; } = "-";
    public double DrillEnd { get => Util.GetDouble(_DrillEnd, numberOption: Util.GetNumberOption.Any); }

    public string _PeckingDepth { get; set; } = "0.25";
    public double PeckingDepth { get => Util.GetDouble(_PeckingDepth); }

    public string _PeckingDeepDepth { get; set; } = "2";
    public double PeckingDeepDepth { get => Util.GetDouble(_PeckingDeepDepth); }
    #endregion

    public string ProgramText
    {
        get
        {
            if (Type == SequenceType.General && GeneralSequence == GeneralSequences.Limiter)
            {
                return Operation.Limiter(Machine, Tool, WorkpieceExternalDiameter);
            }

            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.Facing)
            {
                return Operation.Facing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, WorkpieceInternalDiameter, RoughStockAllow, ProfStockAllowZ, StepOver);
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.RoughFacing)
            {
                return Operation.RoughFacing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, WorkpieceInternalDiameter, RoughStockAllow, ProfStockAllowZ, StepOver);
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.FinishFacing)
            {
                return Operation.FinishFacing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, WorkpieceInternalDiameter, ProfStockAllowZ);
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.HighSpeedDrilling)
            {
                return Operation.HighSpeedDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, DrillStart, DrillEnd);
            }
            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDrilling)
            {
                return Operation.PeckDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, PeckingDepth, DrillStart, DrillEnd);
            }
            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDeepDrilling)
            {
                return Operation.PeckDeepDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, PeckingDeepDepth, DrillStart, DrillEnd);
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting)
            {
                return Operation.ThreadCutting(Machine, Tool as ThreadingExternalTool, ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch, ThreadStart, ThreadEnd);
            }
            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.Tapping)
            {
                return Operation.Tapping(Machine, Tool as TappingTool, TapCutSpeed, TapStart, TapEnd);
            }
            return string.Empty;
        }
    }

    private void OpenToolDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Tools), Tools);
        var options = new DialogOptions() { FullScreen = true, CloseButton = false};
        DialogService.Show<ToolDialog>("Инструмент", parameters, options);
    }

    void Submit()
    {
        Sequence sequence = new();
        switch (Type)
        {
            case SequenceType.General:
                switch (GeneralSequence)
                {
                    case GeneralSequences.Limiter:
                        sequence = new LimiterSequence(Machine, Tool, WorkpieceExternalDiameter) { Name = $"{Program.Count + 1}. Упор" };
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.ExternalTurning:
                switch (TurningSequence)
                {
                    case TurningSequences.Facing:
                        sequence = new FacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver)
                        {Name = $"{Program.Count + 1}. Торцовка" };
                        break;
                    case TurningSequences.RoughFacing:
                        sequence = new RoughFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver)
                        {Name = $"{Program.Count + 1}. Черновая торцовка" };
                        break;
                    case TurningSequences.FinishFacing:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"{Program.Count + 1}. Чистовая торцовка" };
                        break;
                    case TurningSequences.RoughTurning:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"{Program.Count + 1}. Чистовая торцовка" };
                        break;
                    case TurningSequences.FinishTurning:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"{Program.Count + 1}. Чистовая торцовка" };
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.InternalTurning:
                break;
            case SequenceType.Drilling:
                break;
            case SequenceType.Tapping:
                break;
            case SequenceType.Threading:
                break;
            case SequenceType.Grooving:
                break;
            default:
                break;
        }
        Program.Add(sequence);
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}