@inject ISnackbar Snackbar
@inject HttpClient http

<style>
    .feedback-form{
        width: 300px;
        margin-top: 12px
    }
</style>

<MudDialog>


    <DialogContent>
        <div class="ma-0" style="width:300px;overflow: auto;">
            <MudText Typo="Typo.body1" Align="Align.Left">
                Отправить замечания и пожелания можно следующими способами:
            </MudText>
            <MudText Typo="Typo.body2" Align="Align.Left">
                    <p>
                        • email <MudLink Typo="Typo.body2" Href="@("mailto:dece1ver@sunduk.one")">dece1ver@sunduk.one</MudLink>;
                    </p>
                    @*<p>
                        <strike>
                            • через <MudLink Typo="Typo.body2" Href="https://sunduk-fb.azurewebsites.net/">сайт обратной связи</MudLink>;
                        </strike>
                    </p>*@
                    <p>
                        <strike>
                            • заполнив форму ниже:
                        </strike>
                    </p>
            </MudText>
            <MudTextField Class="feedback-form" T="string" Label="Имя" Variant="Variant.Filled" @bind-Value="Name" Immediate="true" Disabled=true/>
            <MudTextField Class="feedback-form" T="string" Label="Сообщение" Variant="Variant.Filled" @bind-Value="Message" Lines="5" Immediate="true" Disabled=true/>
        </div>
    </DialogContent>
    <DialogActions>
        @if (Status == "Progress")
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mx-4" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.Send" Color="Color.Primary" OnClick="Submit" Disabled=true/>
    </DialogActions>
</MudDialog>
@code 
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public string Name { get; set; }
    public string Message { get; set; }
    public string Status { get; set; } = "None";


    async void Submit()
    {
        if (string.IsNullOrWhiteSpace(Name))
        {
            Snackbar.Add("Введите имя!", Severity.Error);
        }
        else if (Name.Length > 30)
        {
            Snackbar.Add("Имя слишком длинное!", Severity.Error);
        }
        else if (string.IsNullOrWhiteSpace(Message))
        {
            Snackbar.Add("Сообщение не должно быть пустым!", Severity.Error);
        }
        else if (Message.Length > 300)
        {
            Snackbar.Add("Сообщение слишком длинное, воспользуйтесь электронной почтой!", Severity.Error);
        }
        else
        {
            Status = "Progress";

            try
            {
                var tempName = WebUtility.UrlEncode(Encode(Name));
                var tempMessage = WebUtility.UrlEncode(Encode(Message));
                Status = await http.GetStringAsync($"https://sunduk-api.azurewebsites.net/sendmessage|{tempName}|{tempMessage}");

                if (Status == "Ok")
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    Snackbar.Add($"Сообщение отправлено!", Severity.Success);
                }
                else
                {
                    Snackbar.Add($"Не удалось отправить сообщение.", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Status = ex.Message;
                Snackbar.Add($"Не удалось отправить сообщение.", Severity.Error);
            }
        }
    }

    private static string Encode(string text)
    {
        return text
            .Replace(@" ", "__space__")
            .Replace("/", "__slash__")
            .Replace("\\", "__backslash__")
            .Replace(".", "__dot__")
            .Replace("|", "__pipeline__")
            .Replace("+", "__plus__")
            .Replace("@", "__at__");
    }
}