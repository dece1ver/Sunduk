@inject IDialogService DialogService
@inherits LayoutComponentBase
@using MudBlazor.Services
@implements IAsyncDisposable

<MudScrollToTop>
    <MudFab Color="Color.Primary" Icon="@Icons.Filled.KeyboardArrowUp" />
</MudScrollToTop>

<MudDialogProvider />
<MudSnackbarProvider />

<MudThemeProvider Theme="theme" />
<MudLayout>
    <MudAppBar Dense="true" Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudLink Typo="Typo.h5" Href="" Underline="Underline.None" Style="font-family: 'Saira Stencil One';">SUNDUK</MudLink>
      @*<MudToggleIconButton @bind-Toggled="@ExperimentalMode"
                     Icon="fas fa-crutch" Color="@Color.Default" Title="Off"
                     ToggledIcon="fas fa-crutch" ToggledColor="@Color.Primary" ToggledTitle="On"/>*@
        <MudSpacer />
        @if (DebugMode)
        {
            <MudText>@Breakpoint</MudText>
        }
        <MudTooltip Text="Обратная связь" Placement="Placement.Start">
            <MudIconButton Icon="@Icons.Material.Filled.Feedback" OnClick="OpenFeedBackDialog" Color="Color.Inherit" Edge="Edge.End" />
        </MudTooltip>
        <MudTooltip Text="QR-код и установка" Placement="Placement.Start">
            <MudIconButton Icon="@Icons.Material.Filled.QrCodeScanner" OnClick="OpenQrDialog" Color="Color.Inherit" Edge="Edge.End" />
        </MudTooltip>
        <MudTooltip Text="@version" Placement="Placement.Start">
            <MudIconButton Icon="@Icons.Material.Filled.HelpOutline" OnClick="OpenChangelogDialog" Color="Color.Inherit" Edge="Edge.End" />
        </MudTooltip>
        
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Breakpoint="Breakpoint.Lg" ClipMode="DrawerClipMode.Always" Elevation="2">
        <CascadingValue Value="ExperimentalMode" Name="ExperimantalMode">
            <NavMenu />
        </CascadingValue>
    </MudDrawer>
    <MudMainContent>
        <CascadingValue Value="ExperimentalMode" Name="ExperimantalMode">
            @Body
        </CascadingValue>
    </MudMainContent>
</MudLayout>




@code
{
    public static bool DebugMode { get; set; } = false;
    public bool ExperimentalMode { get; set; } = DebugMode;

    [Inject] IBreakpointService BreakpointListener { get; set; }

    private Guid _subscriptionId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var subscriptionResult = await BreakpointListener.Subscribe((breakpoint) =>
            {
                Breakpoint = breakpoint;
                InvokeAsync(StateHasChanged);
            }, new ResizeOptions
            {
                ReportRate = 250,
                NotifyOnBreakpointOnly = true,
            });

            Breakpoint = subscriptionResult.Breakpoint;
            _subscriptionId = subscriptionResult.SubscriptionId;
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async ValueTask DisposeAsync() => await BreakpointListener.Unsubscribe(_subscriptionId);

    public Breakpoint Breakpoint { get; set; }

    string version = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version.ToString();

    bool _drawerOpen = true;

    private void OpenQrDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() { FullScreen = false, CloseButton = true };
        DialogService.Show<QrDialog>(string.Empty, parameters, options);
    }

    private void OpenFeedBackDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() { FullScreen = false, CloseButton = true };
        DialogService.Show<FeedBackDialog>("Обратная связь", parameters, options);
    }

    private void OpenChangelogDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions() { FullScreen = false, CloseButton = true };
        DialogService.Show<ChangelogDialog>("Описание", parameters, options);
    }

    MudTheme theme = new MudTheme()
    {
        Palette = new Palette()
        {
            Black = "#2D2D30",
            Primary = "#FF5722",
            Background = "#1E1E1E",
            BackgroundGrey = "#2D2D30",
            Surface = "#252526",
            DrawerBackground = "#2D2D30",
            DrawerText = "rgba(255,255,255, 0.60)",
            DrawerIcon = "rgba(255,255,255, 0.60)",
            AppbarBackground = "#2D2D30",
            AppbarText = "rgba(255,255,255, 0.80)",
            TextPrimary = "rgba(255,255,255, 0.80)",
            TextSecondary = "rgba(255,255,255, 0.60)",
            ActionDefault = "#adadb1",
            ActionDisabled = "rgba(255,255,255, 0.26)",
            ActionDisabledBackground = "rgba(255,255,255, 0.12)"
        }
    };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}