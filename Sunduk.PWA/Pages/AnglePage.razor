@page "/angle"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-2">
    <MudGrid Justify="Justify.SpaceAround">
        @if (!ValidAngle())
        {
        <MudItem xs="12">
            <MudAlert Severity="Severity.Warning">Некорректные значения угла!</MudAlert>
        </MudItem>
        }
        <MudItem xs="12" sm="5" lg="3">
            <MudField Variant="Variant.Outlined" Label="Десятичная система">
                <MudTextField @bind-Value="DecimalAngleString" @onfocusin="@(() => CalcDecimal = false)" T="string" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="°" Immediate="true" />
            </MudField>
        </MudItem>
        <MudItem xs="12" sm="7" lg="9">
            <MudField Variant="Variant.Outlined" Label="Градусная система">
                <MudGrid>
                    <MudItem xs="4" sm="4" md="4" lg="4">
                        <MudTextField @bind-Value="IntAngleString" @onfocusin="@(() => CalcDecimal = true)" T="string" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="°" Immediate="true" />
                    </MudItem>
                    <MudItem xs="4" sm="4" md="4" lg="4">
                        <MudTextField @bind-Value="MinAngleString" @onfocusin="@(() => CalcDecimal = true)" T="string" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="′" Immediate="true" />
                    </MudItem>
                    <MudItem xs="4" sm="4" md="4" lg="4">
                        <MudTextField @bind-Value="SecAngleString" @onfocusin="@(() => CalcDecimal = true)" T="string" Variant="Variant.Text" Adornment="Adornment.End" AdornmentText="″" Immediate="true" />
                    </MudItem>
                </MudGrid>
            </MudField>
        </MudItem>
    </MudGrid>
    @*<MudText>
        @CalcDecimal | @DecimalAngle | @IntAngle | @MinAngle | @SecAngle
    </MudText>*@
</MudContainer>

@code
{
    public bool CalcDecimal { get; set; } = false;

    private string decimalAngleString;

    public string DecimalAngleString
    {
        get { return decimalAngleString; }
        set
        {
            decimalAngleString = value;
            if (!CalcDecimal)
            {
                IntAngleString = Math.Truncate(DecimalAngle).ToString();

                MinAngleString = Math.Truncate((DecimalAngle - IntAngle) * 60).ToString();

                SecAngleString = Math.Truncate((((DecimalAngle - IntAngle) * 60) - MinAngle) * 60).ToString();
            }
        }
    }

    public double DecimalAngle { get => Util.GetDouble(DecimalAngleString); }

    private string intAngleString;

    public string IntAngleString
    {
        get { return intAngleString; }
        set
        {
            intAngleString = value;
            if (ValidAngle() && CalcDecimal)
            {
                DecimalAngleString = Util.ToPrettyString(IntAngle + (MinAngle / 60) + (SecAngle / 3600));
            }
        }
    }

    public double IntAngle { get => Util.GetDouble(IntAngleString); }

    private string minAngleString;

    public string MinAngleString
    {
        get { return minAngleString; }
        set
        {
            minAngleString = value;
            if (ValidAngle() && CalcDecimal)
            {
                DecimalAngleString = Util.ToPrettyString(IntAngle + (MinAngle / 60) + (SecAngle / 3600));
            }
        }
    }
    public double MinAngle { get => Util.GetDouble(MinAngleString); }

    private string secAngleString;

    public string SecAngleString
    {
        get { return secAngleString; }
        set
        {
            secAngleString = value;
            if (ValidAngle() && CalcDecimal)
            {
                DecimalAngleString = Util.ToPrettyString(IntAngle + (MinAngle / 60) + (SecAngle / 3600));
            }
        }
    }

    public double SecAngle { get => Util.GetDouble(SecAngleString); }

    bool ValidAngle() => (MinAngle >= 0 && MinAngle < 60 && SecAngle >= 0 && SecAngle < 60) ? true : false;
}