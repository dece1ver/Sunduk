@page "/sunducam"
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using MudBlazor.Services


<style>
    .monofield {
        font-family: 'Roboto Mono', monospace; font-size: @Design.GetFontSize(Breakpoint.Md);
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid Spacing=1>
        <MudItem>
            <MudExpansionPanel HideIcon="true">
                <TitleContent>
                    <div class="d-flex">
                        <MudButtonGroup Variant="Variant.Outlined" OverrideStyles=false>
                            <MudIconButton Icon="@Icons.Material.TwoTone.Save" Title="Скачать программу" Variant=Variant.Outlined
                                           OnClick="DownloadProgram" />
                            <MudIconButton Icon="@Icons.Material.TwoTone.TableView" Title="Инструмент" OnClick="OpenToolDialog" Variant=Variant.Outlined
                                           Color="(CamMode == Mode.ToolTable ? Color.Primary : Color.Default)" Class="ml-1"/>
                            <MudHidden Breakpoint=Breakpoint.Xs>
                                <MudButton OnClick="OpenSequencelDialog" EndIcon="@Icons.Material.Outlined.PlaylistAdd" Disabled="@(!ValidWorkpiece)" Variant=Variant.Outlined
                                       Color="(CamMode == Mode.AddSequence ? Color.Primary : Color.Default)" Class="ml-1">Добавить переход</MudButton>
                            </MudHidden>
                            <MudHidden Breakpoint=Breakpoint.Xs Invert=true>
                                <MudIconButton OnClick="OpenSequencelDialog" Icon="@Icons.Material.Outlined.PlaylistAdd" Disabled="@(!ValidWorkpiece)" Variant=Variant.Outlined
                                       Color="(CamMode == Mode.AddSequence ? Color.Primary : Color.Default)" Class="ml-1">Добавить переход</MudIconButton>
                            </MudHidden>
                        </MudButtonGroup>
                        <MudIcon Icon="@Icons.Material.TwoTone.Settings" Class="d-flex ml-auto mt-1" />
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid Spacing="1">
                        <MudItem xs="12" sm="7" md="8">
                            <MudSelect @bind-Value="Machine" Label="Станок" T="Machines" Variant="Variant.Filled" Dense="true">
                                <MudSelectItem Value="@(Machines.L230A)">Hyundai L230A</MudSelectItem>
                                <MudSelectItem Value="@(Machines.GS1500)">Goodway GS-1500</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="4">
                            @*<MudTextField @bind-Value="WorkpieceLength" Label="Длина заготовки" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" Margin="Margin.Dense" />*@
                            <MudSelect @bind-Value="WorkpieceMaterial" Label="Материал детали" T="Materials" Variant="Variant.Filled" Dense="true">
                                <MudSelectItem Value="@Materials.Steel">Черная сталь</MudSelectItem>
                                <MudSelectItem Value="@Materials.Stainless">Нержавеющая сталь</MudSelectItem>
                                <MudSelectItem Value="@Materials.Brass">Бронза</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="DetailName" Label="Наименование" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="DetailNumber" Label="Обозначение" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField @bind-Value="_WorkpieceExternalDiameter" Label="Наружный диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField @bind-Value="_WorkpieceInternalDiameter" Label="Внутренний диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="5" md="4">
                            <MudTextField @bind-Value="SpindleLimit" Label="Ограничение оборотов" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12" sm="4" md="4">
                            <MudNumericField @bind-Value="OperationNumber" Label="Номер установа" Variant="Variant.Filled" Immediate="true" Format="D1" Min="0" Max="10" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="4" md="4">
                            <MudTextField @bind-Value="DrawningVersion" Label="Версия чертежа" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="4" md="4">
                            <MudTextField @bind-Value="Author" Label="Автор" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
        @switch (CamMode)
        {
            case Mode.General:
                <MudItem xs="12" sm="6">
                    <MudField Label="Список переходов" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudList Clickable="true" @bind-SelectedItem="SelectedSequence" @bind-SelectedValue="SelectedSequenceIndex" Dense="true" DisableGutters=true>
                            @if (Program != null)
                            {
                                foreach (var seq in Program)
                                {
                                    if (Program.IndexOf(seq) == 0)
                                    {
                                        <MudListItem Text="@($"1. {seq.Name}")" Value="1">
                                            <MudGrid>
                                                <MudText Class="ma-3" Typo=Typo.body2>@($"1. {seq.Name}")</MudText>
                                            </MudGrid>
                                        </MudListItem>
                                    }
                                    if (Program.IndexOf(seq) > 1)
                                    {
                                        <MudListItem Text="@($"{Program.IndexOf(seq)}. {seq.Name}")" Value="Program.IndexOf(seq)">
                                            <MudGrid>
                                                <MudText Class="ma-3 mr-auto" Typo=Typo.body2>@($"{Program.IndexOf(seq)}. {seq.Name}")</MudText>
                                                <div Class="d-inline-flex justify-end py-2 px-3">
                                                    @if ((int)SelectedSequenceIndex == Program.IndexOf(seq))
                                                    {
                                                        <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false" Class="mr-2" Style="margin-top: -3px; margin-bottom: -3px">
                                                            @if (Program.IndexOf(seq) != Program.Count - 1)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.TwoTone.KeyboardArrowDown" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="(() => MoveDownSequence(seq))" />
                                                            }
                                                            @if (Program.IndexOf(seq) != 2)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.TwoTone.KeyboardArrowUp" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="(() => MoveUpSequence(seq))" />
                                                            }
                                                            <MudIconButton Icon="@Icons.Material.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="(() => OpenEditSequenceDialog(seq))" />
                                                            <MudIconButton Icon="@Icons.Material.TwoTone.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                                                   OnClick="(() => Program.Remove(seq))" />
                                                        </MudButtonGroup>
                                                    }
                                                </div>
                                            </MudGrid>
                                        </MudListItem>
                                    }
                                }
                            }
                        </MudList>
                    </MudField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudField Label="Программа" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudTextField T="string" DisableUnderLine="true" Class="monofield" Variant="Variant.Text" @bind-Text="@ProgramText" ReadOnly="true" Immediate="true" Lines="@(ProgramText.Count(x => x == '\n') + 2)" />
                    </MudField>
                </MudItem>
                break;
            case Mode.ToolTable:
                <MudItem xs=12>
                    <MudSwipeArea OnSwipe="@OnSwipe">
                        <MudTabs @ref="toolTabs" Elevation="0">
                            <MudTabPanel Text="Точение наружное" Style="font-size: x-small">
                                <MudTable Items="TurningExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningExternalTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Описание</MudTh>
                                        <MudTh>Угол кромки</MudTh>
                                        <MudTh>Радиус кромки</MudTh>
                                        <MudTh>Исполнение</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        <MudTd DataLabel="Тип">@(context.Type == TurningExternalTool.Types.Bar ? "Проходной" : "Подрезной")</MudTd>
                                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                                    </RowTemplate>
                                    <RowEditingTemplate>
                                        <MudTd DataLabel="Позиция">
                                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Тип">
                                            <MudSelect T="TurningExternalTool.Types" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Type" Required>
                                                <MudSelectItem Value="@TurningExternalTool.Types.Bar">Проходной</MudSelectItem>
                                                <MudSelectItem Value="@TurningExternalTool.Types.Face">Подрезной</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                        <MudTd DataLabel="Угол кромки">
                                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Радиус кромки">
                                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Исполнение">
                                            <MudSelect T="Tool.ToolHand" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Hand" Required>
                                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                    </RowEditingTemplate>
                                </MudTable>
                                <div class="mt-3 ml-0 mr-4 d-flex">
                                    <div class="d-flex ml-auto align-center">
                                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningExternalTool" />
                                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningExternalTool" />
                                    </div>
                                </div>
                            </MudTabPanel>


                            <MudTabPanel Text="Точение внутреннее" Style="font-size: x-small">
                                <MudTable Items="TurningInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningInternalTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Диаметр</MudTh>
                                        <MudTh>Угол кромки</MudTh>
                                        <MudTh>Радиус кромки</MudTh>
                                        <MudTh>Исполнение</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                                    </RowTemplate>
                                    <RowEditingTemplate>
                                        <MudTd DataLabel="Позиция">
                                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Диаметр">
                                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Угол кромки">
                                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Радиус кромки">
                                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Исполнение">
                                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                    </RowEditingTemplate>
                                </MudTable>
                                <div class="mt-3 ml-0 mr-4 d-flex">
                                    <div class="d-flex ml-auto align-center">
                                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningInternalTool" />
                                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningInternalTool" />
                                    </div>
                                </div>
                            </MudTabPanel>

                            <MudTabPanel Text="Канавки наружные" Style="font-size: x-small">
                                <MudTable Items="GroovingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingExternalTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Тип</MudTh>
                                        <MudTh>Ширина</MudTh>
                                        <MudTh>Привязка</MudTh>
                                        <MudTh>Исполнение</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        @if (context.Type == GroovingExternalTool.Types.Grooving)
                                        {
                                    <MudTd DataLabel="Тип">Канавочный</MudTd>
                                        }
                                @if (context.Type == GroovingExternalTool.Types.Cutting)
                                        {
                                    <MudTd DataLabel="Тип">Отрезной</MudTd>
                                        }
                                @if (context.Type == GroovingExternalTool.Types.Blade)
                                        {
                                    <MudTd DataLabel="Тип">Лезвие</MudTd>
                                        }
                                <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingExternalTool.Point.Left ? "Как проходной" : "Как отрезной")</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Тип">
                                    <MudSelect T="GroovingExternalTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@GroovingExternalTool.Types.Grooving">Канавочный</MudSelectItem>
                                        <MudSelectItem Value="@GroovingExternalTool.Types.Cutting">Отрезной</MudSelectItem>
                                        <MudSelectItem Value="@GroovingExternalTool.Types.Blade">Лезвие</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Ширина">
                                    <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Привязка">
                                    <MudSelect T="GroovingExternalTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@GroovingExternalTool.Point.Left">Как проходной</MudSelectItem>
                                        <MudSelectItem Value="@GroovingExternalTool.Point.Right">Как отрезной</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingExternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingExternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Канавки внутренние" Style="font-size: x-small">
                        <MudTable Items="GroovingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingInternalTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Ширина</MudTh>
                                <MudTh>Привязка</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingInternalTool.Point.Left ? "Как расточной" : "Как отрезной")</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Ширина">
                                    <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Привязка">
                                    <MudSelect T="GroovingInternalTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@GroovingInternalTool.Point.Left">Как расточной</MudSelectItem>
                                        <MudSelectItem Value="@GroovingInternalTool.Point.Right">Как отрезной</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingInternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingInternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Резьбовые наружные" Style="font-size: x-small">
                        <MudTable Items="ThreadingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedThreadingExternalTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Шаг</MudTh>
                                <MudTh>Угол опорной пластины</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Шаг">
                                    <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Угол опорной пластины">
                                    <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingExternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveThreadingExternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Резьбовые внутренние" Style="font-size: x-small">
                        <MudTable Items="ThreadingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedThreadingInternalTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Шаг</MudTh>
                                <MudTh>Угол опорной пластины</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Шаг">
                                    <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Угол опорной пластины">
                                    <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingInternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveThreadingInternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Сверла" Style="font-size: x-small">
                        <MudTable Items="DrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedDrillingTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Угол</MudTh>
                                <MudTh>Тип</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                                @if (context.Type == DrillingTool.Types.Solid)
                                        {
                                    <MudTd DataLabel="Тип">Твердосплавное</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.Insert)
                                        {
                                    <MudTd DataLabel="Тип">С пластинами</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.Tip)
                                        {
                                    <MudTd DataLabel="Тип">С головкой</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.HSS)
                                        {
                                    <MudTd DataLabel="Тип">Быстрорез</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.Center)
                                        {
                                    <MudTd DataLabel="Тип">Центровочное</MudTd>
                                        }
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Угол">
                                    <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Тип">
                                    <MudSelect T="DrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@DrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.Insert">С пластинами</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.Tip">С головкой</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.HSS">Быстрорез</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.Center">Центровочное</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddDrillingTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveDrillingTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Метчики" Style="font-size: x-small">
                        <MudTable Items="TappingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTappingTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Шаг</MudTh>
                                <MudTh>Тип</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                                @if (context.Type == TappingTool.Types.Cutting)
                                        {
                                    <MudTd DataLabel="Тип">Нарезной</MudTd>
                                        }
                                @if (context.Type == TappingTool.Types.Forming)
                                        {
                                    <MudTd DataLabel="Тип">Раскатник</MudTd>
                                        }
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Шаг">
                                    <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Тип">
                                    <MudSelect T="TappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@TappingTool.Types.Cutting">Нарезной</MudSelectItem>
                                        <MudSelectItem Value="@TappingTool.Types.Forming">Раскатник</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTappingTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTappingTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Спец инструмент" Style="font-size: x-small">
                                <MudTable Items="SpecialTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedSpecialTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Описание</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        <MudTd DataLabel="Описание">@context.Name</MudTd>
                                    </RowTemplate>
                                    <RowEditingTemplate>
                                        <MudTd DataLabel="Позиция">
                                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Описание">
                                            <MudTextField @bind-Value="@context.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                                        </MudTd>
                                    </RowEditingTemplate>
                                </MudTable>
                                <div class="mt-3 ml-0 mr-4 d-flex">
                                    <div class="d-flex ml-auto align-center">
                                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddSpecialTool" />
                                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveSpecialTool" />
                                    </div>
                                </div>
                            </MudTabPanel>
                        </MudTabs>
            </MudSwipeArea>
        </MudItem>
                break;
            case Mode.AddSequence:
            <MudItem xs=12>
            <MudGrid Spacing=1>
                <MudItem xs="12" md="4">
                    <MudSelect Label="Тип" T="SequenceType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnSequenceChanged">
                        @foreach (var type in Enum.GetValues(typeof(SequenceType)))
                        {
                            switch (type)
                            {
                                case SequenceType.General:
                                    <MudSelectItem Value="@SequenceType.General">Общие</MudSelectItem>
                                    break;
                                case SequenceType.ExternalTurning:
                                    <MudSelectItem Value="@SequenceType.ExternalTurning">Наружное точение</MudSelectItem>
                                    break;
                                case SequenceType.Drilling:
                                    <MudSelectItem Value="@SequenceType.Drilling">Сверление</MudSelectItem>
                                    break;
                                case SequenceType.Threading:
                                    <MudSelectItem Value="@SequenceType.Threading">Нарезание резьбы</MudSelectItem>
                                    break;
                                case SequenceType.Grooving:
                                    <MudSelectItem Value="@SequenceType.Grooving">Обработка канавок и отрезка</MudSelectItem>
                                    break;
                            }
                        }
                    </MudSelect>
                </MudItem>

                @switch (Type)
                {
                    #region Общие
                    case SequenceType.General:
                        <MudItem xs="12" md="4">
                            <MudSelect Label="Переход" T="GeneralSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GeneralSequence">
                                <MudSelectItem Value="@(GeneralSequences.Limiter)">Упор</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                @foreach (var tool in Tools.Where(x => x is Tool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        break;
                    #endregion

                    #region Токарные
                    case SequenceType.ExternalTurning:
                        <MudItem xs="12" md="4">
                            <MudSelect Label="Переход" T="TurningSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="TurningSequence">
                                <MudSelectItem Value="@(TurningSequences.RoughFacing)">Черновое торцевание</MudSelectItem>
                                <MudSelectItem Value="@(TurningSequences.FinishFacing)">Чистовое торцевание</MudSelectItem>
                                <MudSelectItem Value="@(TurningSequences.RoughFacingCycle)">Черновое торцевание (Под G70)</MudSelectItem>
                                <MudSelectItem Value="@(TurningSequences.FinishFacingCycle)">Чистовое торцевание (G70)</MudSelectItem>
                                <MudSelectItem Value="@(TurningSequences.Facing)">Торцевание (черновое + чистовое)</MudSelectItem>
                                <MudSelectItem Value="@(TurningSequences.RoughTurning)">Черновое точение (не написано)</MudSelectItem>
                                <MudSelectItem Value="@(TurningSequences.FinishTurning)">Чистовое точение (не написано)</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                @foreach (var tool in Tools.Where(x => x is TurningExternalTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        @if (TurningSequence == TurningSequences.RoughFacing)
                        {
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (TurningSequence == TurningSequences.RoughFacingCycle)
                        {
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (TurningSequence == TurningSequences.FinishFacing)
                        {
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (TurningSequence == TurningSequences.FinishFacingCycle)
                        {
                            <MudItem xs="12">
                                <MudSelect @bind-Value="RepeatableRoughFacingSequence" Variant="Variant.Filled" Margin="Margin.Dense" Label="Черновая торцовка" T="Sequence">
                                    @foreach (var seq in Program.Where(x => x is RoughFacingSequence || x is FacingSequence || x is RoughFacingCycleSequence))
                                    {
                                        if (seq is RoughFacingSequence)
                                        {
                                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                                        }
                                        if (seq is FacingSequence)
                                        {
                                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                                        }
                                        if (seq is RoughFacingCycleSequence)
                                        {
                                            <MudSelectItem Value="@seq">@($"{Program.IndexOf(seq)}. {seq.Description()}")</MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </MudItem>
                        }
                        @if (TurningSequence == TurningSequences.Facing)
                        {
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Общий припуск" @bind-Value="_RoughStockAllow" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (TurningSequence == TurningSequences.RoughTurning)
                        {
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Съем" @bind-Value="_StepOver" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Чистовой припуск по Х" @bind-Value="_ProfStockAllowX" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Чистовой припуск по Z" @bind-Value="_ProfStockAllowZ" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        break;
                    #endregion

                    #region Сверлильные
                    case SequenceType.Drilling:
                        <MudItem xs="12" md="4">
                            <MudSelect Label="Переход" T="DrillingSequences" @bind-Value="DrillingSequence" Variant="Variant.Filled" Margin="Margin.Dense">
                                <MudSelectItem Value="@(DrillingSequences.HighSpeedDrilling)">Высокоскоростное сверление</MudSelectItem>
                                <MudSelectItem Value="@(DrillingSequences.PeckingDrilling)">Прерывистое сверление</MudSelectItem>
                                <MudSelectItem Value="@(DrillingSequences.PeckingDeepDrilling)">Глубокое сверление</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" md="4">
                            <MudSelect @bind-Value="Tool" Label="Инструмент" T="Tool" Variant="Variant.Filled" Margin="Margin.Dense">
                                @foreach (var tool in Tools.Where(x => x is DrillingTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        @if (DrillingSequence == DrillingSequences.HighSpeedDrilling)
                        {
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Начальная точка" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="6">
                                <MudTextField Label="Конечная точка" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (DrillingSequence == DrillingSequences.PeckingDrilling)
                        {
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Глубина" @bind-Value="_PeckingDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Начальная точка" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="12" md="4">
                                <MudTextField Label="Конечная точка" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (DrillingSequence == DrillingSequences.PeckingDeepDrilling)
                        {
                            <MudItem xs="4">
                                <MudTextField Label="Глубина" @bind-Value="_PeckingDeepDepth" Variant="Variant.Filled" Margin="Margin.Dense" Adornment="Adornment.End" AdornmentText="мм" Immediate="true" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Label="Начальная точка" @bind-Value="_DrillStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Label="Конечная точка" @bind-Value="_DrillEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        break;
                    #endregion

                    #region Резьбонарезные
                    case SequenceType.Threading:
                        <MudItem xs="4">
                            <MudSelect Label="Переход" T="ThreadingSequences" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnThreadingSequenceChanged">
                                <MudSelectItem Value="@(ThreadingSequences.ThreadCutting)">Точение резьбы</MudSelectItem>
                                <MudSelectItem Value="@(ThreadingSequences.Tapping)">Нарезание метчиком</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        @if (ThreadingSequence == ThreadingSequences.ThreadCutting)
                        {
                            if (ThreadType == CuttingType.External)
                            {
                                <MudItem xs="4">
                                    <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                        @foreach (var tool in Tools.Where(x => x is ThreadingExternalTool))
                                        {
                                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }
                            if (ThreadType == CuttingType.Internal)
                            {
                                <MudItem xs="4">
                                    <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                        @foreach (var tool in Tools.Where(x => x is ThreadingInternalTool))
                                        {
                                            <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }
                            @if (ThreadStandart == ThreadStandart.Metric)
                            {
                                <MudItem xs="6">
                                    <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                                        <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                                        <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                                        <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                            }
                            @if (ThreadStandart == ThreadStandart.BSPP)
                            {
                                <MudItem xs="4">
                                    <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                                        <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="4">
                                    <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                                        <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                                        <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="4">
                                    <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                                        @foreach (string item in Thread.bsppTemplates)
                                        {
                                            <MudSelectItem Value="@(item)">
                                                <MudText>@item</MudText>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>

                            }
                            @if (ThreadStandart == ThreadStandart.Trapeziodal)
                            {
                                <MudItem xs="6">
                                    <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                                        <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="6">
                                    <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                                        <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                                        <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                            }
                            @if (ThreadStandart == ThreadStandart.NPT)
                            {
                                <MudItem xs="4">
                                    <MudSelect Label="Стандарт" T="ThreadStandart" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="ThreadStandart">
                                        <MudSelectItem Value="@(ThreadStandart.Metric)">Метрическая 60° (М)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.BSPP)">Трубная цилиндрическая 55° (Tr)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.Trapeziodal)">Трапецеидальная 30° (G)</MudSelectItem>
                                        <MudSelectItem Value="@(ThreadStandart.NPT)">Коническая 60° (K)</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="4">
                                    <MudSelect Label="Тип" T="CuttingType" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnCuttingTypeChanged">
                                        <MudSelectItem Value="@(CuttingType.External)">Наружная</MudSelectItem>
                                        <MudSelectItem Value="@(CuttingType.Internal)">Внутренняя</MudSelectItem>
                                    </MudSelect>
                                </MudItem>
                                <MudItem xs="4">
                                    <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Filled" Margin="Margin.Dense" ValueChanged="OnTemplateChanged">
                                        @foreach (string item in Thread.nptTemplates)
                                        {
                                            <MudSelectItem Value="@(item)">
                                                <MudText>@item</MudText>
                                            </MudSelectItem>
                                        }
                                    </MudSelect>
                                </MudItem>
                            }
                            <MudItem xs="6">
                                <MudTextField Label="Диаметр резьбы" @bind-Value="_ThreadDiameter" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Label="Шаг резьбы" @bind-Value="_ThreadPitch" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Label="Начальная точка" @bind-Value="_ThreadStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="6">
                                <MudTextField Label="Конечная точка" @bind-Value="_ThreadEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        @if (ThreadingSequence == ThreadingSequences.Tapping)
                        {
                            <MudItem xs="4">
                                <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                    @foreach (var tool in Tools.Where(x => x is TappingTool))
                                    {
                                        <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                    }
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Label="Скорость резания" @bind-Value="_TapCutSpeed" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Label="Начальная точка" @bind-Value="_TapStart" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                            <MudItem xs="4">
                                <MudTextField Label="Конечная точка" @bind-Value="_TapEnd" Variant="Variant.Filled" Margin="Margin.Dense" Immediate="true" />
                            </MudItem>
                        }
                        break;
                    #endregion

                    #region Канавочные
                    case SequenceType.Grooving:
                        <MudItem xs="4">
                            <MudSelect Label="Переход" T="GroovingSequences" Variant="Variant.Filled" Margin="Margin.Dense" @bind-Value="GroovingSequence">
                                <MudSelectItem Value="@(GroovingSequences.Grooving)">Канавка</MudSelectItem>
                                <MudSelectItem Value="@(GroovingSequences.Cutting)">Отрезка</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="4">
                            <MudSelect @bind-Value="Tool" Variant="Variant.Filled" Margin="Margin.Dense" Label="Инструмент" T="Tool">
                                @foreach (var tool in Tools.Where(x => x is GroovingExternalTool))
                                {
                                    <MudSelectItem Value="@tool">@tool.Description()</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        break;
                    #endregion

                    default:
                        break;
                }
            </MudGrid>
            <MudItem Class="mt-4" xs="12" sm="12" md="12">
                <MudTextField T="string" DisableUnderLine="true" Label="Предпросмотр" Class="monofield" Variant="Variant.Filled" Text="@("\n" + ExampleText.Trim('\n'))" Lines="@(ExampleText.Trim('\n').Count(x => x == '\n') + 3)" />
            </MudItem>
            <MudButton Variant="Variant.Outlined" Class="mr-1" EndIcon="@Icons.TwoTone.PlaylistAdd" Color="Color.Primary" OnClick="Submit" Disabled="@(string.IsNullOrEmpty(ExampleText))">Добавить</MudButton>
        </MudItem>
                break;
        }
    </MudGrid>
</MudContainer>

@code
{
    [Inject] public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    [Inject] IBreakpointService BreakpointListener { get; set; }

    public enum Mode { General, ToolTable, AddSequence };

    public Mode CamMode { get; set; } = Mode.General;

    public string Message { get; set; } = string.Empty;

    public MudListItem SelectedSequence;
    public object SelectedSequenceIndex = 0;

    public int CyclesCount
    {
        get
        {
            return Program.Where(x =>
            x is RoughFacingSequence ||
            x is FacingSequence ||
            x is RoughFacingCycleSequence)
                .Count() + 1;
        }
        set { }
    }

    public List<Tool> Tools { get; set; } = new();

    //public List<TurningExternalTool> TurningExternalTools { get; set; }
    //public List<TurningInternalTool> TurningInternalTools { get; set; }
    //public List<GroovingExternalTool> GroovingExternalTools { get; set; }
    //public List<GroovingInternalTool> GroovingInternalTools { get; set; }
    //public List<ThreadingExternalTool> ThreadingExternalTools { get; set; }
    //public List<ThreadingInternalTool> ThreadingInternalTools { get; set; }
    //public List<DrillingTool> DrillingTools { get; set; }
    //public List<TappingTool> TappingTools { get; set; }
    //public List<SpecialTool> SpecialTools { get; set; }

    public List<TurningExternalTool> TurningExternalTools
    {
        get
        {
            List<TurningExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningExternalTool))
            {
                result.Add(item as TurningExternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is TurningExternalTool);
            Tools.AddRange(value);
        }
    }

    public List<TurningInternalTool> TurningInternalTools
    {
        get
        {
            List<TurningInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningInternalTool))
            {
                result.Add(item as TurningInternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is TurningInternalTool);
            Tools.AddRange(value);
        }
    }

    public List<GroovingExternalTool> GroovingExternalTools
    {
        get
        {
            List<GroovingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingExternalTool))
            {
                result.Add(item as GroovingExternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is GroovingExternalTool);
            Tools.AddRange(value);
        }
    }

    public List<GroovingInternalTool> GroovingInternalTools
    {
        get
        {
            List<GroovingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingInternalTool))
            {
                result.Add(item as GroovingInternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is GroovingInternalTool);
            Tools.AddRange(value);
        }
    }

    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get
        {
            List<ThreadingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingExternalTool))
            {
                result.Add(item as ThreadingExternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is ThreadingExternalTool);
            Tools.AddRange(value);
        }
    }

    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get
        {
            List<ThreadingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingInternalTool))
            {
                result.Add(item as ThreadingInternalTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is ThreadingInternalTool);
            Tools.AddRange(value);
        }
    }



    public List<DrillingTool> DrillingTools
    {
        get
        {
            List<DrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is DrillingTool))
            {
                result.Add(item as DrillingTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is DrillingTool);
            Tools.AddRange(value);
        }
    }

    public List<TappingTool> TappingTools
    {
        get
        {
            List<TappingTool> result = new();
            foreach (var item in Tools.Where(x => x is TappingTool))
            {
                result.Add(item as TappingTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is TappingTool);
            Tools.AddRange(value);
        }
    }

    public List<SpecialTool> SpecialTools
    {
        get
        {
            List<SpecialTool> result = new();
            foreach (var item in Tools.Where(x => x is SpecialTool))
            {
                result.Add(item as SpecialTool);
            }
            return result ?? new();
        }
        set 
        {
            Tools.RemoveAll(x => x is SpecialTool);
            Tools.AddRange(value);
        }
    }


    public Materials WorkpieceMaterial { get; set; }
    public Machines Machine { get; set; }

    public string _WorkpieceExternalDiameter { get; set; } = "50";
    public double WorkpieceExternalDiameter { get => Util.GetDouble(_WorkpieceExternalDiameter); }

    public string _WorkpieceInternalDiameter { get; set; } = string.Empty;
    public double WorkpieceInternalDiameter { get => Util.GetDouble(_WorkpieceInternalDiameter); }

    public double WorkpieceCurrentExternalDiameter { get; set; }
    public double WorkpieceCurrentInternalDiameter { get => GetCurrentInternalDiameter(Program.Count); }

    private double GetCurrentInternalDiameter(int index)
    {
        double diam = WorkpieceInternalDiameter;
        for (int i = 0; i < index; i++)
        {
            switch (Program[i])
            {
                case HighSpeedDrillingSequence highSpeedDrillingSequence:
                    if (highSpeedDrillingSequence.Tool.Diameter > diam) diam = highSpeedDrillingSequence.Tool.Diameter;
                    break;
                case PeckDrillingSequence peckDrillingSequence:
                    if (peckDrillingSequence.Tool.Diameter > diam) diam = peckDrillingSequence.Tool.Diameter;
                    break;
                case PeckDeepDrillingSequence peckDeepDrillingSequence:
                    if (peckDeepDrillingSequence.Tool.Diameter > diam) diam = peckDeepDrillingSequence.Tool.Diameter;
                    break;
                default:
                    break;
            }
        }
        return diam;
    }

    public string DetailNumber { get; set; }

    public string NcDetailNumber { get => $"{(!string.IsNullOrEmpty(DetailNumber) ? DetailNumber.Translate() : "AR000-00-000")}.{ OperationNumber.ToString("D1").Replace(",", ".")}S"; }

    public string DetailName { get; set; }
    public string NcDetailName { get => !string.IsNullOrEmpty(DetailName) ? $"{DetailName.Translate()}" : "DETAIL"; }

    public string Author { get; set; }
    public string NcAuthor { get => !string.IsNullOrEmpty(Author) ? $"{Author.Translate()}" : "AUTHOR"; }

    public int OperationNumber { get; set; } = 1;

    public double DrawningVersion { get; set; }

    public int? SpindleLimit { get; set; }

    public string _WorkpieceLength { get; set; } = "50";
    public double WorkpieceLength { get => Util.GetDouble(_WorkpieceLength); }


    //public Sequence Header => new Sequence { Name = "Шапка", Operation = Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion) };
    //public string Header => Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion);
    //public Sequence SafetyString => new Sequence { Name = "Строка безопасности", Operation = Operation.SafetyString(Machine, 3000) };
    //public string SafetyString => Operation.SafetyString(Machine, 3000);

    public bool ValidWorkpiece
    {
        get
        {
            if (WorkpieceExternalDiameter > 0 && WorkpieceInternalDiameter < WorkpieceExternalDiameter && WorkpieceLength > 0)
            {
                return true;
            }
            return false;
        }
    }

    public List<Sequence> Program { get; set; }

    protected override async Task OnInitializedAsync()
    {

        #region Инициализация спец инструмента
        SpecialTools = await localStorage.GetItemAsync<List<SpecialTool>>(nameof(SpecialTools)) ?? new();
        if (SpecialTools is null || SpecialTools.Count == 0)
        {
            Tools.Add(new SpecialTool(0101, "UPOR"));
            await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
        }
        #endregion

        #region Инициализация токарного инструмента
        TurningExternalTools = await localStorage.GetItemAsync<List<TurningExternalTool>>(nameof(TurningExternalTools)) ?? new();
        if (TurningExternalTools is null || TurningExternalTools.Count == 0)
        {
            Tools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Bar, 55, 0.8));
            Tools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Face, 100, 0.8));
            Tools.Add(new TurningExternalTool(0303, TurningExternalTool.Types.Bar, 35, 0.4));
            await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        }

        TurningInternalTools = await localStorage.GetItemAsync<List<TurningInternalTool>>(nameof(TurningInternalTools)) ?? new();
        if (TurningInternalTools is null || TurningInternalTools.Count == 0)
        {
            Tools.Add(new TurningInternalTool(0202, 25, 55, 0.8));
            Tools.Add(new TurningInternalTool(0202, 32, 80, 0.8));
            Tools.Add(new TurningInternalTool(0303, 10, 55, 0.4));
            await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        }
        Tools.AddRange(TurningInternalTools);
        #endregion

        #region Инициализация канавочного и отрезного инструмента

        GroovingExternalTools = await localStorage.GetItemAsync<List<GroovingExternalTool>>(nameof(GroovingExternalTools)) ?? new();
        if (GroovingExternalTools is null || GroovingExternalTools.Count == 0)
        {
            Tools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Grooving, 3, GroovingExternalTool.Point.Left));
            Tools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Right));
            await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
        }

        GroovingInternalTools = await localStorage.GetItemAsync<List<GroovingInternalTool>>(nameof(GroovingInternalTools)) ?? new();
        if (GroovingInternalTools is null || GroovingInternalTools.Count == 0)
        {
            Tools.Add(new GroovingInternalTool(1212, 20, 3, GroovingInternalTool.Point.Right));
            Tools.Add(new GroovingInternalTool(1212, 40, 4, GroovingInternalTool.Point.Right));
            await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
        }
        #endregion

        #region Инициализация резьбового инструмента
        ThreadingExternalTools = await localStorage.GetItemAsync<List<ThreadingExternalTool>>(nameof(ThreadingExternalTools)) ?? new();
        if (ThreadingExternalTools is null || TurningExternalTools.Count == 0)
        {
            Tools.Add(new ThreadingExternalTool(1111, 1.5, 1));
            await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        }

        ThreadingInternalTools = await localStorage.GetItemAsync<List<ThreadingInternalTool>>(nameof(ThreadingInternalTools)) ?? new();
        if (ThreadingInternalTools is null || ThreadingInternalTools.Count == 0)
        {
            Tools.Add(new ThreadingInternalTool(1111, 16, 1.5, 1));
            await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
        }
        #endregion

        #region Инициализация сверел
        DrillingTools = await localStorage.GetItemAsync<List<DrillingTool>>(nameof(DrillingTools)) ?? new();
        if (DrillingTools is null || DrillingTools.Count == 0)
        {
            Tools.Add(new DrillingTool(0505, DrillingTool.Types.HSS, 5, 120));
            Tools.Add(new DrillingTool(0707, DrillingTool.Types.Solid, 10, 140));
            Tools.Add(new DrillingTool(0606, DrillingTool.Types.Insert, 25, 180));
            await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
        }
        #endregion

        #region Инициализация метчиков
        TappingTools = await localStorage.GetItemAsync<List<TappingTool>>(nameof(TappingTools)) ?? new();
        if (TappingTools is null || TappingTools.Count == 0)
        {
            Tools.Add(new TappingTool(0909, TappingTool.Types.Cutting, 12, 1.75));
            Tools.Add(new TappingTool(0808, TappingTool.Types.Forming, 10, 1.5));
            await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
        }
        #endregion

        Program = new();
        Program.Add(new HeaderSequence(Machine, DetailNumber, DetailName, Author, DrawningVersion, string.Empty) { Name = $"Шапка" });
        Program.Add(new SafetyStringSequence(Machine, 3000) { Name = $"Строка безопасности" });
        CyclesCount = 1;
    }

    private void OpenToolDialog()
    {
        //var parameters = new DialogParameters();
        //parameters.Add(nameof(Tools), Tools);
        //var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        //DialogService.Show<ToolDialog>("Инструмент", parameters, options);
        if (CamMode != Mode.ToolTable)
        {
            CamMode = Mode.ToolTable;
        }
        else
        {
            CamMode = Mode.General;
        }
    }

    private async Task OpenEditSequenceDialog(Sequence sequence)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Tools), Tools);
        parameters.Add(nameof(Program), Program);
        parameters.Add(nameof(sequence), sequence);
        var options = new DialogOptions() { FullScreen = false, CloseButton = false };
        var dialog = DialogService.Show<EditSequenceDialog>("Редактировать переход", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Program = Program;
        }
    }


    private async Task OpenSequencelDialog()
    {
        //var parameters = new DialogParameters();
        //parameters.Add(nameof(Machine), Machine);
        //parameters.Add(nameof(Tools), Tools);
        //parameters.Add(nameof(Program), Program);
        //parameters.Add(nameof(CyclesCount), CyclesCount);
        //parameters.Add(nameof(WorkpieceExternalDiameter), WorkpieceExternalDiameter);
        //parameters.Add(nameof(WorkpieceCurrentExternalDiameter), WorkpieceCurrentExternalDiameter);
        //parameters.Add(nameof(WorkpieceInternalDiameter), WorkpieceInternalDiameter);
        //parameters.Add(nameof(WorkpieceCurrentInternalDiameter), WorkpieceCurrentInternalDiameter);
        //parameters.Add(nameof(WorkpieceLength), WorkpieceLength);
        //parameters.Add(nameof(WorkpieceMaterial), WorkpieceMaterial);
        //var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        //var dialog = DialogService.Show<SequenceDialog>("Переходы", parameters, options);
        //var result = await dialog.Result;
        //if (!result.Cancelled)
        //{
        //    Program = Program;
        //}
        if (CamMode != Mode.AddSequence)
        {
            CamMode = Mode.AddSequence;
        }
        else
        {
            CamMode = Mode.General;
        }
    }

    private async Task<bool> OpenConfirmDialog(string message)
    {
        if (message is null) message = string.Empty;
        var parameters = new DialogParameters();
        parameters.Add(nameof(message), message);
        var options = new DialogOptions() { FullScreen = false, CloseButton = false };
        var dialog = DialogService.Show<ConfirmDialog>("Подтверждение", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            return true;
        }
        return false;
    }

    private void RemoveSequence(Sequence seq)
    {
        Program.Remove(seq);
    }

    private void MoveUpSequence(Sequence seq)
    {
        int index = Program.IndexOf(seq) - 1;
        Program.Swap(Program.IndexOf(seq), Program.IndexOf(seq) - 1);
        SelectedSequenceIndex = (object)index;
    }

    private void MoveDownSequence(Sequence seq)
    {
        int index = Program.IndexOf(seq) + 1;
        Program.Swap(Program.IndexOf(seq), Program.IndexOf(seq) + 1);
        SelectedSequenceIndex = (object)index;
    }

    private async Task DownloadProgram()
    {
        bool resultDialog = await OpenConfirmDialog($"Скачать файл \"{NcDetailNumber}.nc\" ?");
        if (resultDialog) await BlazorDownloadFileService.DownloadFileFromText(NcDetailNumber + ".nc", ProgramText, System.Text.Encoding.UTF8, "text/plain");
    }

    public string ProgramText
    {
        get
        {
            if (Program is null) return string.Empty;

            List<string> result = new();

            for (int i = 0; i < Program.Count; i++)
            {
                switch (Program[i])
                {
                    case HeaderSequence headerSequence:
                        HeaderSequence newHeaderSequence = Program[i] as HeaderSequence;
                        newHeaderSequence.Machine = Machine;
                        newHeaderSequence.DetailNumber = NcDetailNumber;
                        newHeaderSequence.DetailName = NcDetailName;
                        newHeaderSequence.Author = NcAuthor;
                        newHeaderSequence.DrawVersion = DrawningVersion;
                        newHeaderSequence.ToolTable = Util.GetToolTable(Program);
                        Program[i] = newHeaderSequence;
                        break;
                    case SafetyStringSequence safetyStringSequence:
                        SafetyStringSequence newSafetyStringSequence = Program[i] as SafetyStringSequence;
                        newSafetyStringSequence.Machine = Machine;
                        newSafetyStringSequence.SpeedLimit = SpindleLimit;
                        Program[i] = newSafetyStringSequence;
                        break;
                    case LimiterSequence limiterSequence:
                        LimiterSequence newlimiterSequence = Program[i] as LimiterSequence;
                        newlimiterSequence.Machine = Machine;
                        Program[i] = newlimiterSequence;
                        break;
                    case FacingSequence facingSequence:
                        FacingSequence newFacingSequence = Program[i] as FacingSequence;
                        newFacingSequence.Machine = Machine;
                        newFacingSequence.Material = WorkpieceMaterial;
                        newFacingSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newFacingSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newFacingSequence;
                        break;
                    case RoughFacingSequence roughFacingSequence:
                        RoughFacingSequence newRoughFacingSequence = Program[i] as RoughFacingSequence;
                        newRoughFacingSequence.Machine = Machine;
                        newRoughFacingSequence.Material = WorkpieceMaterial;
                        newRoughFacingSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newRoughFacingSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newRoughFacingSequence;
                        break;
                    case RoughFacingCycleSequence roughFacingCycleSequence:
                        RoughFacingCycleSequence newRoughFacingCycleSequence = Program[i] as RoughFacingCycleSequence;
                        newRoughFacingCycleSequence.Machine = Machine;
                        newRoughFacingCycleSequence.Material = WorkpieceMaterial;
                        newRoughFacingCycleSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newRoughFacingCycleSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newRoughFacingCycleSequence;
                        break;
                    case FinishFacingSequence finishFacingSequence:
                        FinishFacingSequence newFinishFacingSequence = Program[i] as FinishFacingSequence;
                        newFinishFacingSequence.Machine = Machine;
                        newFinishFacingSequence.Material = WorkpieceMaterial;
                        newFinishFacingSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newFinishFacingSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newFinishFacingSequence;
                        break;
                    case FinishFacingCycleSequence finishFacingCycleSequence:
                        break;
                    case HighSpeedDrillingSequence highSpeedDrillingSequence:
                        HighSpeedDrillingSequence newHighSpeedDrillingSequence = Program[i] as HighSpeedDrillingSequence;
                        newHighSpeedDrillingSequence.Machine = Machine;
                        newHighSpeedDrillingSequence.Material = WorkpieceMaterial;
                        break;
                    case PeckDrillingSequence peckDrillingSequence:
                        PeckDrillingSequence newPeckDrillingSequence = Program[i] as PeckDrillingSequence;
                        newPeckDrillingSequence.Machine = Machine;
                        newPeckDrillingSequence.Material = WorkpieceMaterial;
                        break;
                    case PeckDeepDrillingSequence peckDeepDrillingSequence:
                        PeckDeepDrillingSequence newPeckDeepDrillingSequence = Program[i] as PeckDeepDrillingSequence;
                        newPeckDeepDrillingSequence.Machine = Machine;
                        newPeckDeepDrillingSequence.Material = WorkpieceMaterial;
                        break;
                    case TappingSequence tappingSequence:
                        TappingSequence newTappingSequence = Program[i] as TappingSequence;
                        newTappingSequence.Machine = Machine;
                        break;
                    case ThreadCuttingSequence threadCuttingSequence:
                        ThreadCuttingSequence newThreadCuttingSequence = Program[i] as ThreadCuttingSequence;
                        newThreadCuttingSequence.Machine = Machine;
                        break;
                    default:
                        break;
                }
            }

            foreach (var sequence in Program)
            {
                result.Add(sequence.Operation);
            }
            return string.Join("\n", result).Trim() + "\nM30\n%";
        }
        set { }
    }


    // Инструмент
    private TurningExternalTool selectedTurningExternalTool = null;
    private TurningInternalTool selectedTurningInternalTool = null;
    private GroovingExternalTool selectedGroovingExternalTool = null;
    private GroovingInternalTool selectedGroovingInternalTool = null;
    private ThreadingExternalTool selectedThreadingExternalTool = null;
    private ThreadingInternalTool selectedThreadingInternalTool = null;
    private DrillingTool selectedDrillingTool = null;
    private TappingTool selectedTappingTool = null;
    private SpecialTool selectedSpecialTool = null;



    private async Task AddTurningExternalTool()
    {
        Tools.Add(new TurningExternalTool(0101, TurningExternalTool.Types.Bar, 80, 0.8));
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }
    private async Task RemoveTurningExternalTool()
    {
        if (TurningExternalTools.Count > 0) Tools.Remove(TurningExternalTools[^1]);
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
    }

    private async Task AddTurningInternalTool() 
    {
        Tools.Add(new TurningInternalTool(0101, 25, 80, 0.8));
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }

    private async Task RemoveTurningInternalTool() 
    {
        if (TurningInternalTools.Count > 0) Tools.Remove(TurningInternalTools[^1]);
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
    }

    private async Task AddGroovingExternalTool()
    {
        Tools.Add(new GroovingExternalTool(0101, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Left));
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }
    private async Task RemoveGroovingExternalTool()
    {
        if (GroovingExternalTools.Count > 0) Tools.Remove(GroovingExternalTools[^1]);
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
    }

    private async Task AddGroovingInternalTool()
    {
        Tools.Add(new GroovingInternalTool(0101, 20, 3, GroovingInternalTool.Point.Left));
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }
    private async Task RemoveGroovingInternalTool()
    {
        if (GroovingInternalTools.Count > 0) Tools.Remove(GroovingInternalTools[^1]);
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
    }

    private async Task AddThreadingExternalTool()
    {
        Tools.Add(new ThreadingExternalTool(0101, 1.5, 1));
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }
    private async Task RemoveThreadingExternalTool()
    {
        if (ThreadingExternalTools.Count > 0) Tools.Remove(ThreadingExternalTools[^1]);
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
    }

    private async Task AddThreadingInternalTool()
    {
        Tools.Add(new ThreadingInternalTool(0101, 20, 1.5, 1));
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }
    private async Task RemoveThreadingInternalTool()
    {
        if (ThreadingInternalTools.Count > 0) Tools.Remove(ThreadingInternalTools[^1]);
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
    }

    private async Task AddDrillingTool()
    {
        Tools.Add(new DrillingTool(0101, DrillingTool.Types.Solid, 10, 140));
        await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
    }
    private async Task RemoveDrillingTool()
    {
        if (DrillingTools.Count > 0) Tools.Remove(DrillingTools[^1]);
        await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
    }

    private async Task AddTappingTool()
    {
        Tools.Add(new TappingTool(0101, TappingTool.Types.Cutting, 8, 1.25));
        await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
    }
    private async Task RemoveTappingTool()
    {
        if (TappingTools.Count > 0) Tools.Remove(TappingTools[^1]);
        await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
    }

    private async Task AddSpecialTool()
    {
        Tools.Add(new SpecialTool(0101, "UPOR"));
        await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
    }
    private async Task RemoveSpecialTool()
    {
        if (SpecialTools.Count > 0) Tools.Remove(SpecialTools[^1]);
        await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
    }

    MudTabs toolTabs;

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            if (toolTabs.ActivePanelIndex > 0)
            {
                toolTabs.ActivatePanel(toolTabs.ActivePanelIndex - 1);
            }
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            if (toolTabs.ActivePanelIndex < 8)
            {
                toolTabs.ActivatePanel(toolTabs.ActivePanelIndex + 1);
            }
        }
    }

    // создание переходов

    #region Всякие OnChanged

    private void OnSequenceChanged(SequenceType value)
    {
        Type = value;
        Tool = null;
    }

    private void OnThreadingSequenceChanged(ThreadingSequences value)
    {
        ThreadingSequence = value;
        Tool = null;
    }

    private void OnCuttingTypeChanged(CuttingType value)
    {
        ThreadType = value;
        Tool = null;
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        if (ThreadStandart == ThreadStandart.Metric)
        {
            Thread.GetMetricValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.BSPP)
        {
            Thread.GetBSPPValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.Trapeziodal)
        {
            Thread.GetTrapezoidalValues(CurrentThreadTemplate, out string diameter, out string pitch);
            _ThreadDiameter = diameter;
            _ThreadPitch = pitch;
            ThreadNPTPlane = 0;
        }
        else if (ThreadStandart == ThreadStandart.NPT)
        {
            Thread.GetNPTValues(CurrentThreadTemplate, out string externalDiameter, out string internalDiameter, out string pitch, out double planeLength, out double threadLength);
            _ThreadDiameter = externalDiameter;
            _ThreadPitch = pitch;
            _ThreadEnd = (-threadLength).ToPrettyString(); // наверно тоже строку стоит возвращать
            ThreadNPTPlane = planeLength;
        }
    }
    #endregion


    #region Типы переходов
    public SequenceType Type { get; set; }

    public enum GeneralSequences
    {
        Limiter
    }

    public GeneralSequences GeneralSequence { get; set; }

    public enum TurningSequences
    {
        RoughFacing,
        FinishFacing,
        RoughFacingCycle,
        FinishFacingCycle,
        Facing,
        RoughTurning,
        FinishTurning
    }

    public TurningSequences TurningSequence { get; set; }

    public enum DrillingSequences
    {
        HighSpeedDrilling,
        PeckingDrilling,
        PeckingDeepDrilling
    }

    public DrillingSequences DrillingSequence { get; set; }

    public enum ThreadingSequences
    {
        ThreadCutting, Tapping
    }

    public ThreadingSequences ThreadingSequence { get; set; }

    public enum GroovingSequences
    {
        Grooving,
        Cutting
    }

    public GroovingSequences GroovingSequence { get; set; }
    #endregion

    public Tool Tool { get; set; }

    public Sequence RepeatableRoughFacingSequence { get; set; }

    public string CurrentThreadTemplate { get; set; }

    #region Точение резьбы
    public ThreadStandart ThreadStandart { get; set; }
    public CuttingType ThreadType { get; set; }

    public string _ThreadDiameter { get; set; }
    public double ThreadDiameter { get => Util.GetDouble(_ThreadDiameter, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadPitch { get; set; }
    public double ThreadPitch { get => Util.GetDouble(_ThreadPitch, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadStart { get; set; }
    public double ThreadStart { get => Util.GetDouble(_ThreadStart, numberOption: Util.GetNumberOption.Any); }

    public string _ThreadEnd { get; set; } = "-";
    public double ThreadEnd { get => Util.GetDouble(_ThreadEnd, numberOption: Util.GetNumberOption.Any) - Math.Round(ThreadPitch, 1); }

    public double ThreadNPTPlane { get; set; }

    #endregion

    #region Резьбонарезание
    public string _TapCutSpeed { get; set; }
    public double TapCutSpeed { get => Util.GetDouble(_TapCutSpeed, numberOption: Util.GetNumberOption.Any); }

    public string _TapStart { get; set; }
    public double TapStart { get => Util.GetDouble(_TapStart, numberOption: Util.GetNumberOption.Any); }

    public string _TapEnd { get; set; } = "-";
    public double TapEnd { get => Util.GetDouble(_TapEnd, numberOption: Util.GetNumberOption.Any); }
    #endregion

    public string WorkpieceInfo
    {
        get
        {
            string materialInfo = string.Empty;
            switch (WorkpieceMaterial)
            {
                case Materials.Steel:
                    materialInfo = "Стальная";
                    break;
                case Materials.Stainless:
                    materialInfo = "Нержавеющая";
                    break;
                case Materials.Brass:
                    materialInfo = "Бронзовая";
                    break;
            }
            string hole = string.Empty;
            switch (WorkpieceInternalDiameter)
            {
                case > 0:
                    hole = $" с отверстием Ø{WorkpieceInternalDiameter.ToPrettyString()}мм";
                    break;
                default:
                    break;
            }
            return $"{materialInfo} заготовка Ø{WorkpieceExternalDiameter.ToPrettyString()}мм{hole}, L-{WorkpieceLength.ToPrettyString()}мм";
        }
    }

    #region Токарка

    public string _StepOver { get; set; }
    public double StepOver { get => Util.GetDouble(_StepOver); }

    public string _RoughStockAllow { get; set; }
    public double RoughStockAllow { get => Util.GetDouble(_RoughStockAllow); }

    public string _ProfStockAllowX { get; set; }
    public double ProfStockAllowX { get => Util.GetDouble(_ProfStockAllowX); }

    public string _ProfStockAllowZ { get; set; }
    public double ProfStockAllowZ { get => Util.GetDouble(_ProfStockAllowZ); }

    #endregion

    #region Сверловка

    public string _DrillStart { get; set; }
    public double DrillStart { get => Util.GetDouble(_DrillStart, numberOption: Util.GetNumberOption.Any); }

    public string _DrillEnd { get; set; } = "-";
    public double DrillEnd { get => Util.GetDouble(_DrillEnd, numberOption: Util.GetNumberOption.Any); }

    public string _PeckingDepth { get; set; } = "0.25";
    public double PeckingDepth { get => Util.GetDouble(_PeckingDepth); }

    public string _PeckingDeepDepth { get; set; } = "2";
    public double PeckingDeepDepth { get => Util.GetDouble(_PeckingDeepDepth); }

    #endregion


    #region Примеры

    public string ExampleText
    {
        get
        {
            if (Type == SequenceType.General && GeneralSequence == GeneralSequences.Limiter)
            {
                return Operation.Limiter(Machine, Tool, WorkpieceExternalDiameter);
            }

            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.Facing)
            {
                return Operation.Facing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), RoughStockAllow, ProfStockAllowZ, StepOver, CyclesCount.GetCycleRange());
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.RoughFacing)
            {
                return Operation.RoughFacing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), RoughStockAllow, ProfStockAllowZ, StepOver, CyclesCount.GetCycleRange());
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.RoughFacingCycle)
            {
                return Operation.RoughFacingCycle(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), RoughStockAllow, ProfStockAllowZ, StepOver, CyclesCount.GetCycleRange());
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.FinishFacingCycle)
            {
                return RepeatableRoughFacingSequence switch
                {
                    RoughFacingSequence => Operation.FinishFacingCycleFromRoughFacing(Tool as TurningExternalTool, RepeatableRoughFacingSequence as RoughFacingSequence),
                    RoughFacingCycleSequence => Operation.FinishFacingCycleFromRoughCycleFacing(Tool as TurningExternalTool, RepeatableRoughFacingSequence as RoughFacingCycleSequence),
                    FacingSequence => Operation.FinishFacingCycleFromFacing(Tool as TurningExternalTool, RepeatableRoughFacingSequence as FacingSequence),
                    _ => string.Empty
                };
            }
            if (Type == SequenceType.ExternalTurning && TurningSequence == TurningSequences.FinishFacing)
            {
                return Operation.FinishFacing(Machine, WorkpieceMaterial, Tool as TurningExternalTool, WorkpieceExternalDiameter, (Tool is null ? WorkpieceCurrentInternalDiameter : WorkpieceCurrentInternalDiameter - 2 * (Tool as TurningExternalTool).Radius), ProfStockAllowZ);
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.HighSpeedDrilling)
            {
                return Operation.HighSpeedDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, DrillStart, DrillEnd);
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDrilling)
            {
                return Operation.PeckDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, PeckingDepth, DrillStart, DrillEnd);
            }

            if (Type == SequenceType.Drilling && DrillingSequence == DrillingSequences.PeckingDeepDrilling)
            {
                return Operation.PeckDeepDrilling(Machine, WorkpieceMaterial, Tool as DrillingTool, PeckingDeepDepth, DrillStart, DrillEnd);
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting && ThreadType == CuttingType.External)
            {
                return Operation.ThreadCutting(Machine, Tool as ThreadingExternalTool, ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch, ThreadStart, ThreadEnd, ThreadNPTPlane);
            }
            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.ThreadCutting && ThreadType == CuttingType.Internal)
            {
                return Operation.ThreadCutting(Machine, Tool as ThreadingInternalTool, ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch, ThreadStart, ThreadEnd, ThreadNPTPlane);
            }

            if (Type == SequenceType.Threading && ThreadingSequence == ThreadingSequences.Tapping)
            {
                return Operation.Tapping(Machine, Tool as TappingTool, TapCutSpeed, TapStart, TapEnd);
            }
            return string.Empty;
        }
    }
    #endregion

    void Submit()
    {
        Sequence sequence = new();
        switch (Type)
        {
            case SequenceType.General:
                switch (GeneralSequence)
                {
                    case GeneralSequences.Limiter:
                        sequence = new LimiterSequence(Machine, Tool, WorkpieceExternalDiameter)
                        { Name = $"Упор" };
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.ExternalTurning:
                switch (TurningSequence)
                {
                    case TurningSequences.Facing:
                        sequence = new FacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver,
                            CyclesCount.GetCycleRange())
                        { Name = $"Торцовка" };
                        break;
                    case TurningSequences.RoughFacing:
                        sequence = new RoughFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceCurrentInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver,
                            CyclesCount.GetCycleRange())
                        { Name = $"Черновая торцовка" };
                        break;
                    case TurningSequences.RoughFacingCycle:
                        sequence = new RoughFacingCycleSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceCurrentInternalDiameter,
                            RoughStockAllow,
                            ProfStockAllowZ,
                            StepOver,
                            CyclesCount.GetCycleRange())
                        { Name = $"Черновая торцовка (Под G70)" };
                        break;
                    case TurningSequences.FinishFacing:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceCurrentInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"Чистовая торцовка" };
                        break;
                    case TurningSequences.FinishFacingCycle:
                        switch (RepeatableRoughFacingSequence)
                        {
                            case RoughFacingSequence:
                                sequence = new FinishFacingCycleSequence(
                                    Tool as TurningExternalTool,
                                    RepeatableRoughFacingSequence as RoughFacingSequence)
                                { Name = "Чистовая торцовка (G70)" };
                                break;
                            case RoughFacingCycleSequence:
                                sequence = new FinishFacingCycleSequence(
                                    Tool as TurningExternalTool,
                                    RepeatableRoughFacingSequence as RoughFacingCycleSequence)
                                { Name = "Чистовая торцовка (G70)" };
                                break;
                            case FacingSequence:
                                sequence = new FinishFacingCycleSequence(
                                    Tool as TurningExternalTool,
                                    RepeatableRoughFacingSequence as FacingSequence)
                                { Name = "Чистовая торцовка (G70)" };
                                break;
                            default:
                                break;
                        }
                        break;
                    case TurningSequences.RoughTurning:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"Чистовая торцовка" };
                        break;
                    case TurningSequences.FinishTurning:
                        sequence = new FinishFacingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as TurningExternalTool,
                            WorkpieceExternalDiameter,
                            WorkpieceInternalDiameter,
                            ProfStockAllowZ)
                        { Name = $"Чистовая торцовка" };
                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.InternalTurning:
                break;
            case SequenceType.Drilling:
                switch (DrillingSequence)
                {
                    case DrillingSequences.HighSpeedDrilling:
                        sequence = new HighSpeedDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as DrillingTool,
                            DrillStart,
                            DrillEnd)
                        { Name = "Сверление" };

                        break;
                    case DrillingSequences.PeckingDrilling:
                        sequence = new PeckDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as DrillingTool,
                            PeckingDepth,
                            DrillStart,
                            DrillEnd)
                        { Name = "Сверление с выходом" };

                        break;
                    case DrillingSequences.PeckingDeepDrilling:
                        sequence = new PeckDeepDrillingSequence(
                            Machine,
                            WorkpieceMaterial,
                            Tool as DrillingTool,
                            PeckingDeepDepth,
                            DrillStart,
                            DrillEnd)
                        { Name = "Глубокое сверление" };

                        break;
                    default:
                        break;
                }
                break;
            case SequenceType.Threading:
                switch (ThreadingSequence)
                {
                    case ThreadingSequences.ThreadCutting:
                        sequence = new ThreadCuttingSequence(
                            Machine,
                            Tool,
                            ThreadStandart,
                            ThreadType,
                            ThreadDiameter,
                            ThreadPitch,
                            ThreadStart,
                            ThreadEnd,
                            ThreadNPTPlane)
                        { Name = "Точение резьбы" };
                        break;
                    case ThreadingSequences.Tapping:
                        sequence = new TappingSequence(
                    Machine,
                    Tool as TappingTool,
                    TapCutSpeed,
                    TapStart,
                    TapEnd)
                        { Name = "Нарезание резьбы" };
                        break;
                    default:
                        break;
                }
                break;

            case SequenceType.Grooving:
                break;
            default:
                break;
        }
        Program.Add(sequence);
        CamMode = Mode.General;
    }
}
