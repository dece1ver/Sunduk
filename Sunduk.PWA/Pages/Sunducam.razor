@page "/sunducam"
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using MudBlazor.Services


<style>
    .monofield {
        font-family: 'Roboto Mono', monospace;
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid Spacing=1>
        <MudItem>
            <MudExpansionPanel HideIcon="true">
                <TitleContent>
                    <div class="d-flex">
                        <MudButtonGroup Variant="Variant.Outlined">
                            <MudIconButton Icon="@Icons.Material.TwoTone.Save" Title="Скачать программу"
                                           OnClick="DownloadProgram" />
                            <MudIconButton Icon="@Icons.Material.TwoTone.TableView" Title="Инструмент" OnClick="OpenToolDialog"
                                           Color="(CamMode == Mode.ToolTable ? Color.Primary : Color.Default)" />
                            <MudButton OnClick="OpenSequencelDialog" EndIcon="@Icons.Material.Outlined.PlaylistAdd" Disabled="@(!ValidWorkpiece)"
                                       Color="(CamMode == Mode.AddSequence ? Color.Primary : Color.Default)">Добавить переход</MudButton>
                        </MudButtonGroup>
                        <MudIcon Icon="@Icons.Material.TwoTone.Settings" Class="d-flex ml-auto mt-1" />
                    </div>
                </TitleContent>
                <ChildContent>
                    <MudGrid Spacing="1">
                        <MudItem xs="12" sm="7" md="8">
                            <MudSelect @bind-Value="Machine" Label="Станок" T="Machines" Variant="Variant.Filled" Dense="true">
                                <MudSelectItem Value="@(Machines.L230A)">Hyundai L230A</MudSelectItem>
                                <MudSelectItem Value="@(Machines.GS1500)">Goodway GS-1500</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="12" md="4">
                            @*<MudTextField @bind-Value="WorkpieceLength" Label="Длина заготовки" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" Margin="Margin.Dense" />*@
                            <MudSelect @bind-Value="WorkpieceMaterial" Label="Материал детали" T="Materials" Variant="Variant.Filled" Dense="true">
                                <MudSelectItem Value="@Materials.Steel">Черная сталь</MudSelectItem>
                                <MudSelectItem Value="@Materials.Stainless">Нержавеющая сталь</MudSelectItem>
                                <MudSelectItem Value="@Materials.Brass">Бронза</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="DetailName" Label="Наименование" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="6">
                            <MudTextField @bind-Value="DetailNumber" Label="Обозначение" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField @bind-Value="_WorkpieceExternalDiameter" Label="Наружный диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="6" md="4">
                            <MudTextField @bind-Value="_WorkpieceInternalDiameter" Label="Внутренний диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="5" md="4">
                            <MudTextField @bind-Value="SpindleLimit" Label="Ограничение оборотов" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12" sm="4" md="4">
                            <MudNumericField @bind-Value="OperationNumber" Label="Номер установа" Variant="Variant.Filled" Immediate="true" Format="D1" Min="0" Max="10" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="4" md="4">
                            <MudTextField @bind-Value="DrawningVersion" Label="Версия чертежа" Variant="Variant.Filled" Immediate="true" Converter="Util.DoubleConverter" Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12" sm="4" md="4">
                            <MudTextField @bind-Value="Author" Label="Автор" Variant="Variant.Filled" Immediate="true" Margin="Margin.Dense" />
                        </MudItem>
                    </MudGrid>
                </ChildContent>
            </MudExpansionPanel>
        </MudItem>
        @switch (CamMode)
        {
            case Mode.General:
                <MudItem xs="12" sm="6">
                    <MudField Label="Список переходов" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudList Clickable="true" @bind-SelectedItem="SelectedSequence" @bind-SelectedValue="SelectedSequenceIndex" Dense="true" DisableGutters=true>
                            @if (Program != null)
                            {
                                foreach (var seq in Program)
                                {
                                    if (Program.IndexOf(seq) == 0)
                                    {
                                        <MudListItem Text="@($"1. {seq.Name}")" Value="1">
                                            <MudGrid>
                                                <MudText Class="ma-3" Typo=Typo.body2>@($"1. {seq.Name}")</MudText>
                                            </MudGrid>
                                        </MudListItem>
                                    }
                                    if (Program.IndexOf(seq) > 1)
                                    {
                                        <MudListItem Text="@($"{Program.IndexOf(seq)}. {seq.Name}")" Value="Program.IndexOf(seq)">
                                            <MudGrid>
                                                <MudText Class="ma-3 mr-auto" Typo=Typo.body2>@($"{Program.IndexOf(seq)}. {seq.Name}")</MudText>
                                                <div Class="d-inline-flex justify-end py-2 px-3">
                                                    @if ((int)SelectedSequenceIndex == Program.IndexOf(seq))
                                                    {
                                                        <MudButtonGroup Variant="Variant.Outlined" OverrideStyles="false" Class="mr-2" Style="margin-top: -3px; margin-bottom: -3px">
                                                            @if (Program.IndexOf(seq) != Program.Count - 1)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.TwoTone.KeyboardArrowDown" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="(() => MoveDownSequence(seq))" />
                                                            }
                                                            @if (Program.IndexOf(seq) != 2)
                                                            {
                                                                <MudIconButton Icon="@Icons.Material.TwoTone.KeyboardArrowUp" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="(() => MoveUpSequence(seq))" />
                                                            }
                                                            <MudIconButton Icon="@Icons.Material.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small"
                                                   OnClick="(() => OpenEditSequenceDialog(seq))" />
                                                            <MudIconButton Icon="@Icons.Material.TwoTone.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small"
                                                   OnClick="(() => Program.Remove(seq))" />
                                                        </MudButtonGroup>
                                                    }
                                                </div>
                                            </MudGrid>
                                        </MudListItem>
                                    }
                                }
                            }
                        </MudList>
                    </MudField>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudField Label="Программа" Variant="Variant.Filled" Margin="Margin.Dense">
                        <MudTextField T="string" DisableUnderLine="true" Class="monofield" Variant="Variant.Text" @bind-Text="@ProgramText" ReadOnly="true" Immediate="true" Lines="@(ProgramText.Count(x => x == '\n') + 2)" />
                    </MudField>
                </MudItem>
                break;
            case Mode.ToolTable:
                <MudItem xs=12>
                    <MudSwipeArea OnSwipe="@OnSwipe">
                        <MudTabs @ref="tabs" Elevation="0">
                            <MudTabPanel Text="Точение наружное" Style="font-size: x-small">
                                <MudTable Items="TurningExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningExternalTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Описание</MudTh>
                                        <MudTh>Угол кромки</MudTh>
                                        <MudTh>Радиус кромки</MudTh>
                                        <MudTh>Исполнение</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        <MudTd DataLabel="Тип">@(context.Type == TurningExternalTool.Types.Bar ? "Проходной" : "Подрезной")</MudTd>
                                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                                    </RowTemplate>
                                    <RowEditingTemplate>
                                        <MudTd DataLabel="Позиция">
                                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Тип">
                                            <MudSelect T="TurningExternalTool.Types" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Type" Required>
                                                <MudSelectItem Value="@TurningExternalTool.Types.Bar">Проходной</MudSelectItem>
                                                <MudSelectItem Value="@TurningExternalTool.Types.Face">Подрезной</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                        <MudTd DataLabel="Угол кромки">
                                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Радиус кромки">
                                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Исполнение">
                                            <MudSelect T="Tool.ToolHand" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="@context.Hand" Required>
                                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                    </RowEditingTemplate>
                                </MudTable>
                                <div class="mt-3 ml-0 mr-4 d-flex">
                                    <div class="d-flex ml-auto align-center">
                                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningExternalTool" />
                                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningExternalTool" />
                                    </div>
                                </div>
                            </MudTabPanel>


                            <MudTabPanel Text="Точение внутреннее" Style="font-size: x-small">
                                <MudTable Items="TurningInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTurningInternalTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Диаметр</MudTh>
                                        <MudTh>Угол кромки</MudTh>
                                        <MudTh>Радиус кромки</MudTh>
                                        <MudTh>Исполнение</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Угол кромки">@context.Angle.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Радиус кромки">@context.Radius.ToPrettyString()</MudTd>
                                        <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                                    </RowTemplate>
                                    <RowEditingTemplate>
                                        <MudTd DataLabel="Позиция">
                                            <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Диаметр">
                                            <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Угол кромки">
                                            <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Радиус кромки">
                                            <MudTextField @bind-Value="@context.Radius" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                        </MudTd>
                                        <MudTd DataLabel="Исполнение">
                                            <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                                <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                                <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                            </MudSelect>
                                        </MudTd>
                                    </RowEditingTemplate>
                                </MudTable>
                                <div class="mt-3 ml-0 mr-4 d-flex">
                                    <div class="d-flex ml-auto align-center">
                                        <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTurningInternalTool" />
                                        <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTurningInternalTool" />
                                    </div>
                                </div>
                            </MudTabPanel>

                            <MudTabPanel Text="Канавки наружные" Style="font-size: x-small">
                                <MudTable Items="GroovingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingExternalTool" Elevation="0">
                                    <HeaderContent>
                                        <MudTh>Позиция</MudTh>
                                        <MudTh>Тип</MudTh>
                                        <MudTh>Ширина</MudTh>
                                        <MudTh>Привязка</MudTh>
                                        <MudTh>Исполнение</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                        @if (context.Type == GroovingExternalTool.Types.Grooving)
                                        {
                                    <MudTd DataLabel="Тип">Канавочный</MudTd>
                                        }
                                @if (context.Type == GroovingExternalTool.Types.Cutting)
                                        {
                                    <MudTd DataLabel="Тип">Отрезной</MudTd>
                                        }
                                @if (context.Type == GroovingExternalTool.Types.Blade)
                                        {
                                    <MudTd DataLabel="Тип">Лезвие</MudTd>
                                        }
                                <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingExternalTool.Point.Left ? "Как проходной" : "Как отрезной")</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Тип">
                                    <MudSelect T="GroovingExternalTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@GroovingExternalTool.Types.Grooving">Канавочный</MudSelectItem>
                                        <MudSelectItem Value="@GroovingExternalTool.Types.Cutting">Отрезной</MudSelectItem>
                                        <MudSelectItem Value="@GroovingExternalTool.Types.Blade">Лезвие</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Ширина">
                                    <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Привязка">
                                    <MudSelect T="GroovingExternalTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@GroovingExternalTool.Point.Left">Как проходной</MudSelectItem>
                                        <MudSelectItem Value="@GroovingExternalTool.Point.Right">Как отрезной</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingExternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingExternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Канавки внутренние" Style="font-size: x-small">
                        <MudTable Items="GroovingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedGroovingInternalTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Ширина</MudTh>
                                <MudTh>Привязка</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Ширина">@context.Width.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Привязка">@(context.ZeroPoint == GroovingInternalTool.Point.Left ? "Как расточной" : "Как отрезной")</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Ширина">
                                    <MudTextField @bind-Value="@context.Width" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Привязка">
                                    <MudSelect T="GroovingInternalTool.Point" @bind-Value="@context.ZeroPoint" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@GroovingInternalTool.Point.Left">Как расточной</MudSelectItem>
                                        <MudSelectItem Value="@GroovingInternalTool.Point.Right">Как отрезной</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddGroovingInternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveGroovingInternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Резьбовые наружные" Style="font-size: x-small">
                        <MudTable Items="ThreadingExternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedThreadingExternalTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Шаг</MudTh>
                                <MudTh>Угол опорной пластины</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Шаг">
                                    <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Угол опорной пластины">
                                    <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingExternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveThreadingExternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Резьбовые внутренние" Style="font-size: x-small">
                        <MudTable Items="ThreadingInternalTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedThreadingInternalTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Шаг</MudTh>
                                <MudTh>Угол опорной пластины</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Угол опорной пластины">@context.Angle.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Шаг">
                                    <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Угол опорной пластины">
                                    <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddThreadingInternalTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveThreadingInternalTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Сверла" Style="font-size: x-small">
                        <MudTable Items="DrillingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedDrillingTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Угол</MudTh>
                                <MudTh>Тип</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Угол">@context.Angle.ToPrettyString()</MudTd>
                                @if (context.Type == DrillingTool.Types.Solid)
                                        {
                                    <MudTd DataLabel="Тип">Твердосплавное</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.Insert)
                                        {
                                    <MudTd DataLabel="Тип">С пластинами</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.Tip)
                                        {
                                    <MudTd DataLabel="Тип">С головкой</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.HSS)
                                        {
                                    <MudTd DataLabel="Тип">Быстрорез</MudTd>
                                        }
                                @if (context.Type == DrillingTool.Types.Center)
                                        {
                                    <MudTd DataLabel="Тип">Центровочное</MudTd>
                                        }
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Угол">
                                    <MudTextField @bind-Value="@context.Angle" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Тип">
                                    <MudSelect T="DrillingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@DrillingTool.Types.Solid">Твердосплавное</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.Insert">С пластинами</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.Tip">С головкой</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.HSS">Быстрорез</MudSelectItem>
                                        <MudSelectItem Value="@DrillingTool.Types.Center">Центровочное</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>
                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddDrillingTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveDrillingTool" />
                            </div>
                        </div>
                    </MudTabPanel>

                    <MudTabPanel Text="Метчики" Style="font-size: x-small">
                        <MudTable Items="TappingTools" ReadOnly="false" Hover="true" CanCancelEdit="false" @bind-SelectedItem="selectedTappingTool" Elevation="0">
                            <HeaderContent>
                                <MudTh>Позиция</MudTh>
                                <MudTh>Диаметр</MudTh>
                                <MudTh>Шаг</MudTh>
                                <MudTh>Тип</MudTh>
                                <MudTh>Исполнение</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Позиция">@context.Position.ToolNumber()</MudTd>
                                <MudTd DataLabel="Диаметр">@context.Diameter.ToPrettyString()</MudTd>
                                <MudTd DataLabel="Шаг">@context.Pitch.ToPrettyString()</MudTd>
                                @if (context.Type == TappingTool.Types.Cutting)
                                        {
                                    <MudTd DataLabel="Тип">Нарезной</MudTd>
                                        }
                                @if (context.Type == TappingTool.Types.Forming)
                                        {
                                    <MudTd DataLabel="Тип">Раскатник</MudTd>
                                        }
                                <MudTd DataLabel="Исполнение">@(context.Hand == Tool.ToolHand.Rigth ? "Правое" : "Левое")</MudTd>
                            </RowTemplate>
                            <RowEditingTemplate>
                                <MudTd DataLabel="Позиция">
                                    <MudTextField @bind-Value="@context.Position" Variant="Variant.Outlined" Margin="Margin.Dense" Format="D4" Required />
                                </MudTd>
                                <MudTd DataLabel="Диаметр">
                                    <MudTextField @bind-Value="@context.Diameter" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Шаг">
                                    <MudTextField @bind-Value="@context.Pitch" Variant="Variant.Outlined" Margin="Margin.Dense" Converter="Util.DoubleConverter" Required />
                                </MudTd>
                                <MudTd DataLabel="Тип">
                                    <MudSelect T="TappingTool.Types" @bind-Value="@context.Type" Variant="Variant.Outlined" Margin="Margin.Dense" Required>
                                        <MudSelectItem Value="@TappingTool.Types.Cutting">Нарезной</MudSelectItem>
                                        <MudSelectItem Value="@TappingTool.Types.Forming">Раскатник</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                                <MudTd DataLabel="Исполнение">
                                    <MudSelect T="Tool.ToolHand" @bind-Value="@context.Hand" Variant="Variant.Outlined" Required>
                                        <MudSelectItem Value="@Tool.ToolHand.Rigth">Правое</MudSelectItem>
                                        <MudSelectItem Value="@Tool.ToolHand.Left">Левое</MudSelectItem>
                                    </MudSelect>
                                </MudTd>
                            </RowEditingTemplate>
                        </MudTable>

                        <div class="mt-3 ml-0 mr-4 d-flex">
                            <div class="d-flex ml-auto align-center">
                                <MudIconButton Style="margin-right: 5px" Variant="Variant.Outlined" Color="Color.Primary" Icon="@Icons.Material.Outlined.AddCircleOutline" OnClick="AddTappingTool" />
                                <MudIconButton Variant="Variant.Outlined" Color="Color.Error" Icon="@Icons.Material.Outlined.RemoveCircleOutline" OnClick="RemoveTappingTool" />
                            </div>
                        </div>
                    </MudTabPanel>
                        </MudTabs>
            </MudSwipeArea>
        </MudItem>
                break;
            case Mode.AddSequence:

                break;
        }
    </MudGrid>
</MudContainer>

@code
{
    [Inject] public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    public enum Mode { General, ToolTable, AddSequence };

    public Mode CamMode { get; set; } = Mode.General;

    public string Message { get; set; } = string.Empty;

    public MudListItem SelectedSequence;
    public object SelectedSequenceIndex = 0;

    public int CyclesCount
    {
        get
        {
            return Program.Where(x =>
            x is RoughFacingSequence ||
            x is FacingSequence ||
            x is RoughFacingCycleSequence)
                .Count() + 1;
        }
        set { }
    }

    private List<Tool> Tools = new();

    private async Task SetTools()
    {
        await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        await localStorage.SetItemAsync(nameof(TurningInternalTools), TurningInternalTools);
        await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
        await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
        await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
        await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
        await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
        await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
    }

    public List<TurningExternalTool> TurningExternalTools
    {
        get
        {
            List<TurningExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningExternalTool))
            {
                result.Add(item as TurningExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<TurningInternalTool> TurningInternalTools
    {
        get
        {
            List<TurningInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is TurningInternalTool))
            {
                result.Add(item as TurningInternalTool);
            }
            return result;
        }
        set { }
    }

    public List<GroovingExternalTool> GroovingExternalTools
    {
        get
        {
            List<GroovingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingExternalTool))
            {
                result.Add(item as GroovingExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<GroovingInternalTool> GroovingInternalTools
    {
        get
        {
            List<GroovingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is GroovingInternalTool))
            {
                result.Add(item as GroovingInternalTool);
            }
            return result;
        }
        set { }
    }

    public List<ThreadingExternalTool> ThreadingExternalTools
    {
        get
        {
            List<ThreadingExternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingExternalTool))
            {
                result.Add(item as ThreadingExternalTool);
            }
            return result;
        }
        set { }
    }

    public List<ThreadingInternalTool> ThreadingInternalTools
    {
        get
        {
            List<ThreadingInternalTool> result = new();
            foreach (var item in Tools.Where(x => x is ThreadingInternalTool))
            {
                result.Add(item as ThreadingInternalTool);
            }
            return result;
        }
        set { }
    }



    public List<DrillingTool> DrillingTools
    {
        get
        {
            List<DrillingTool> result = new();
            foreach (var item in Tools.Where(x => x is DrillingTool))
            {
                result.Add(item as DrillingTool);
            }
            return result;
        }
        set { }
    }

    public List<TappingTool> TappingTools
    {
        get
        {
            List<TappingTool> result = new();
            foreach (var item in Tools.Where(x => x is TappingTool))
            {
                result.Add(item as TappingTool);
            }
            return result;
        }
        set { }
    }

    public List<SpecialTool> SpecialTools
    {
        get
        {
            List<SpecialTool> result = new();
            foreach (var item in Tools.Where(x => x is SpecialTool))
            {
                result.Add(item as SpecialTool);
            }
            return result;
        }
        set { }
    }

    public Materials WorkpieceMaterial { get; set; }
    public Machines Machine { get; set; }

    public string _WorkpieceExternalDiameter { get; set; } = "50";
    public double WorkpieceExternalDiameter { get => Util.GetDouble(_WorkpieceExternalDiameter); }

    public string _WorkpieceInternalDiameter { get; set; } = string.Empty;
    public double WorkpieceInternalDiameter { get => Util.GetDouble(_WorkpieceInternalDiameter); }

    public double WorkpieceCurrentExternalDiameter { get; set; }
    public double WorkpieceCurrentInternalDiameter { get => GetCurrentInternalDiameter(Program.Count); }

    private double GetCurrentInternalDiameter(int index)
    {
        double diam = WorkpieceInternalDiameter;
        for (int i = 0; i < index; i++)
        {
            switch (Program[i])
            {
                case HighSpeedDrillingSequence highSpeedDrillingSequence:
                    if (highSpeedDrillingSequence.Tool.Diameter > diam) diam = highSpeedDrillingSequence.Tool.Diameter;
                    break;
                case PeckDrillingSequence peckDrillingSequence:
                    if (peckDrillingSequence.Tool.Diameter > diam) diam = peckDrillingSequence.Tool.Diameter;
                    break;
                case PeckDeepDrillingSequence peckDeepDrillingSequence:
                    if (peckDeepDrillingSequence.Tool.Diameter > diam) diam = peckDeepDrillingSequence.Tool.Diameter;
                    break;
                default:
                    break;
            }
        }
        return diam;
    }

    public string DetailNumber { get; set; }

    public string NcDetailNumber { get => $"{(!string.IsNullOrEmpty(DetailNumber) ? DetailNumber.Translate() : "AR000-00-000")}.{ OperationNumber.ToString("D1").Replace(",", ".")}S"; }

    public string DetailName { get; set; }
    public string NcDetailName { get => !string.IsNullOrEmpty(DetailName) ? $"{DetailName.Translate()}" : "DETAIL"; }

    public string Author { get; set; }
    public string NcAuthor { get => !string.IsNullOrEmpty(Author) ? $"{Author.Translate()}" : "AUTHOR"; }

    public int OperationNumber { get; set; } = 1;

    public double DrawningVersion { get; set; }

    public int? SpindleLimit { get; set; }

    public string _WorkpieceLength { get; set; } = "50";
    public double WorkpieceLength { get => Util.GetDouble(_WorkpieceLength); }


    //public Sequence Header => new Sequence { Name = "Шапка", Operation = Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion) };
    //public string Header => Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion);
    //public Sequence SafetyString => new Sequence { Name = "Строка безопасности", Operation = Operation.SafetyString(Machine, 3000) };
    //public string SafetyString => Operation.SafetyString(Machine, 3000);

    public bool ValidWorkpiece
    {
        get
        {
            if (WorkpieceExternalDiameter > 0 && WorkpieceInternalDiameter < WorkpieceExternalDiameter && WorkpieceLength > 0)
            {
                return true;
            }
            return false;
        }
    }

    public List<Sequence> Program { get; set; }

    protected override async Task OnInitializedAsync()
    {

        #region Инициализация спец инструмента
        SpecialTools = await localStorage.GetItemAsync<List<SpecialTool>>(nameof(SpecialTools));
        if (SpecialTools is null || SpecialTools.Count == 0)
        {
            SpecialTools = new();
            SpecialTools.Add(new SpecialTool(0101, "UPOR"));
            await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
        }
        Tools.AddRange(SpecialTools);
        #endregion

        #region Инициализация токарного инструмента
        TurningExternalTools = await localStorage.GetItemAsync<List<TurningExternalTool>>(nameof(TurningExternalTools));
        if (TurningExternalTools is null || TurningExternalTools.Count == 0)
        {
            TurningExternalTools = new();
            TurningExternalTools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Bar, 55, 0.8));
            TurningExternalTools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Face, 100, 0.8));
            TurningExternalTools.Add(new TurningExternalTool(0303, TurningExternalTool.Types.Bar, 35, 0.4));
            await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        }
        Tools.AddRange(TurningExternalTools);

        TurningInternalTools = await localStorage.GetItemAsync<List<TurningInternalTool>>(nameof(TurningInternalTools));
        if (TurningInternalTools is null || TurningInternalTools.Count == 0)
        {
            TurningInternalTools = new();
            TurningInternalTools.Add(new TurningInternalTool(0202, 25, 55, 0.8));
            TurningInternalTools.Add(new TurningInternalTool(0202, 32, 80, 0.8));
            TurningInternalTools.Add(new TurningInternalTool(0303, 10, 55, 0.4));
            await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        }
        Tools.AddRange(TurningInternalTools);
        #endregion

        #region Инициализация канавочного и отрезного инструмента

        GroovingExternalTools = await localStorage.GetItemAsync<List<GroovingExternalTool>>(nameof(GroovingExternalTools));
        if (GroovingExternalTools is null || GroovingExternalTools.Count == 0)
        {
            GroovingExternalTools = new();
            GroovingExternalTools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Grooving, 3, GroovingExternalTool.Point.Left));
            GroovingExternalTools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Right));
            await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
        }
        Tools.AddRange(GroovingExternalTools);

        GroovingInternalTools = await localStorage.GetItemAsync<List<GroovingInternalTool>>(nameof(GroovingInternalTools));
        if (GroovingInternalTools is null || GroovingInternalTools.Count == 0)
        {
            GroovingInternalTools = new();
            GroovingInternalTools.Add(new GroovingInternalTool(1212, 20, 3, GroovingInternalTool.Point.Right));
            GroovingInternalTools.Add(new GroovingInternalTool(1212, 40, 4, GroovingInternalTool.Point.Right));
            await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
        }
        Tools.AddRange(GroovingInternalTools);
        #endregion

        #region Инициализация резьбового инструмента
        ThreadingExternalTools = await localStorage.GetItemAsync<List<ThreadingExternalTool>>(nameof(ThreadingExternalTools));
        if (ThreadingExternalTools is null || TurningExternalTools.Count == 0)
        {
            ThreadingExternalTools = new();
            ThreadingExternalTools.Add(new ThreadingExternalTool(1111, 1.5, 1));
            await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        }
        Tools.AddRange(ThreadingExternalTools);

        ThreadingInternalTools = await localStorage.GetItemAsync<List<ThreadingInternalTool>>(nameof(ThreadingInternalTools));
        if (ThreadingInternalTools is null || ThreadingInternalTools.Count == 0)
        {
            ThreadingInternalTools = new();
            ThreadingInternalTools.Add(new ThreadingInternalTool(1111, 16, 1.5, 1));
            await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
        }
        Tools.AddRange(ThreadingInternalTools);
        #endregion

        #region Инициализация сверел
        DrillingTools = await localStorage.GetItemAsync<List<DrillingTool>>(nameof(DrillingTools));
        if (DrillingTools is null || DrillingTools.Count == 0)
        {
            DrillingTools = new();
            DrillingTools.Add(new DrillingTool(0505, DrillingTool.Types.HSS, 5, 120));
            DrillingTools.Add(new DrillingTool(0707, DrillingTool.Types.Solid, 10, 140));
            DrillingTools.Add(new DrillingTool(0606, DrillingTool.Types.Insert, 25, 180));
            await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
        }
        Tools.AddRange(DrillingTools);
        #endregion

        #region Инициализация метчиков
        TappingTools = await localStorage.GetItemAsync<List<TappingTool>>(nameof(TappingTools));
        if (TappingTools is null || TappingTools.Count == 0)
        {
            TappingTools = new();
            TappingTools.Add(new TappingTool(0909, TappingTool.Types.Cutting, 12, 1.75));
            TappingTools.Add(new TappingTool(0808, TappingTool.Types.Forming, 10, 1.5));
            await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
        }
        Tools.AddRange(TappingTools);
        #endregion

        Program = new();
        Program.Add(new HeaderSequence(Machine, DetailNumber, DetailName, Author, DrawningVersion, string.Empty) { Name = $"Шапка" });
        Program.Add(new SafetyStringSequence(Machine, 3000) { Name = $"Строка безопасности" });
        CyclesCount = 1;
    }

    private void OpenSetupDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Machine), Machine);
        parameters.Add(nameof(SpindleLimit), SpindleLimit);
        parameters.Add(nameof(Tools), Tools);
        parameters.Add(nameof(WorkpieceExternalDiameter), WorkpieceExternalDiameter);
        parameters.Add(nameof(WorkpieceInternalDiameter), WorkpieceInternalDiameter);
        parameters.Add(nameof(WorkpieceLength), WorkpieceLength);
        parameters.Add(nameof(WorkpieceMaterial), WorkpieceMaterial);
        parameters.Add(nameof(DetailNumber), DetailNumber);
        parameters.Add(nameof(DetailName), DetailName);
        var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        DialogService.Show<SetupDialog>("Наладка", parameters, options);
    }

    private void OpenToolDialog()
    {
        //var parameters = new DialogParameters();
        //parameters.Add(nameof(Tools), Tools);
        //var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        //DialogService.Show<ToolDialog>("Инструмент", parameters, options);
        if (CamMode != Mode.ToolTable)
        {
            CamMode = Mode.ToolTable;
        }
        else
        {
            CamMode = Mode.General;
        }
    }

    private async Task OpenEditSequenceDialog(Sequence sequence)
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Tools), Tools);
        parameters.Add(nameof(Program), Program);
        parameters.Add(nameof(sequence), sequence);
        var options = new DialogOptions() { FullScreen = false, CloseButton = false };
        var dialog = DialogService.Show<EditSequenceDialog>("Редактировать переход", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Program = Program;
        }
    }


    private async Task OpenSequencelDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Machine), Machine);
        parameters.Add(nameof(Tools), Tools);
        parameters.Add(nameof(Program), Program);
        parameters.Add(nameof(CyclesCount), CyclesCount);
        parameters.Add(nameof(WorkpieceExternalDiameter), WorkpieceExternalDiameter);
        parameters.Add(nameof(WorkpieceCurrentExternalDiameter), WorkpieceCurrentExternalDiameter);
        parameters.Add(nameof(WorkpieceInternalDiameter), WorkpieceInternalDiameter);
        parameters.Add(nameof(WorkpieceCurrentInternalDiameter), WorkpieceCurrentInternalDiameter);
        parameters.Add(nameof(WorkpieceLength), WorkpieceLength);
        parameters.Add(nameof(WorkpieceMaterial), WorkpieceMaterial);
        var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        var dialog = DialogService.Show<SequenceDialog>("Переходы", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            Program = Program;
        }
    }

    private async Task<bool> OpenConfirmDialog(string message)
    {
        if (message is null) message = string.Empty;
        var parameters = new DialogParameters();
        parameters.Add(nameof(message), message);
        var options = new DialogOptions() { FullScreen = false, CloseButton = false };
        var dialog = DialogService.Show<ConfirmDialog>("Подтверждение", parameters, options);
        var result = await dialog.Result;
        if (!result.Cancelled)
        {
            return true;
        }
        return false;
    }

    private void RemoveSequence(Sequence seq)
    {
        Program.Remove(seq);
    }

    private void MoveUpSequence(Sequence seq)
    {
        int index = Program.IndexOf(seq) - 1;
        Program.Swap(Program.IndexOf(seq), Program.IndexOf(seq) - 1);
        SelectedSequenceIndex = (object)index;
    }

    private void MoveDownSequence(Sequence seq)
    {
        int index = Program.IndexOf(seq) + 1;
        Program.Swap(Program.IndexOf(seq), Program.IndexOf(seq) + 1);
        SelectedSequenceIndex = (object)index;
    }

    private async Task DownloadProgram()
    {
        bool resultDialog = await OpenConfirmDialog($"Скачать файл \"{NcDetailNumber}.nc\" ?");
        if (resultDialog) await BlazorDownloadFileService.DownloadFileFromText(NcDetailNumber + ".nc", ProgramText, System.Text.Encoding.UTF8, "text/plain");
    }

    public string ProgramText
    {
        get
        {
            if (Program is null) return string.Empty;

            List<string> result = new();

            for (int i = 0; i < Program.Count; i++)
            {
                switch (Program[i])
                {
                    case HeaderSequence headerSequence:
                        HeaderSequence newHeaderSequence = Program[i] as HeaderSequence;
                        newHeaderSequence.Machine = Machine;
                        newHeaderSequence.DetailNumber = NcDetailNumber;
                        newHeaderSequence.DetailName = NcDetailName;
                        newHeaderSequence.Author = NcAuthor;
                        newHeaderSequence.DrawVersion = DrawningVersion;
                        newHeaderSequence.ToolTable = Util.GetToolTable(Program);
                        Program[i] = newHeaderSequence;
                        break;
                    case SafetyStringSequence safetyStringSequence:
                        SafetyStringSequence newSafetyStringSequence = Program[i] as SafetyStringSequence;
                        newSafetyStringSequence.Machine = Machine;
                        newSafetyStringSequence.SpeedLimit = SpindleLimit;
                        Program[i] = newSafetyStringSequence;
                        break;
                    case LimiterSequence limiterSequence:
                        LimiterSequence newlimiterSequence = Program[i] as LimiterSequence;
                        newlimiterSequence.Machine = Machine;
                        Program[i] = newlimiterSequence;
                        break;
                    case FacingSequence facingSequence:
                        FacingSequence newFacingSequence = Program[i] as FacingSequence;
                        newFacingSequence.Machine = Machine;
                        newFacingSequence.Material = WorkpieceMaterial;
                        newFacingSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newFacingSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newFacingSequence;
                        break;
                    case RoughFacingSequence roughFacingSequence:
                        RoughFacingSequence newRoughFacingSequence = Program[i] as RoughFacingSequence;
                        newRoughFacingSequence.Machine = Machine;
                        newRoughFacingSequence.Material = WorkpieceMaterial;
                        newRoughFacingSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newRoughFacingSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newRoughFacingSequence;
                        break;
                    case RoughFacingCycleSequence roughFacingCycleSequence:
                        RoughFacingCycleSequence newRoughFacingCycleSequence = Program[i] as RoughFacingCycleSequence;
                        newRoughFacingCycleSequence.Machine = Machine;
                        newRoughFacingCycleSequence.Material = WorkpieceMaterial;
                        newRoughFacingCycleSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newRoughFacingCycleSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newRoughFacingCycleSequence;
                        break;
                    case FinishFacingSequence finishFacingSequence:
                        FinishFacingSequence newFinishFacingSequence = Program[i] as FinishFacingSequence;
                        newFinishFacingSequence.Machine = Machine;
                        newFinishFacingSequence.Material = WorkpieceMaterial;
                        newFinishFacingSequence.ExternalDiameter = WorkpieceExternalDiameter;
                        newFinishFacingSequence.InternalDiameter = GetCurrentInternalDiameter(i);
                        Program[i] = newFinishFacingSequence;
                        break;
                    case FinishFacingCycleSequence finishFacingCycleSequence:
                        break;
                    case HighSpeedDrillingSequence highSpeedDrillingSequence:
                        HighSpeedDrillingSequence newHighSpeedDrillingSequence = Program[i] as HighSpeedDrillingSequence;
                        newHighSpeedDrillingSequence.Machine = Machine;
                        newHighSpeedDrillingSequence.Material = WorkpieceMaterial;
                        break;
                    case PeckDrillingSequence peckDrillingSequence:
                        PeckDrillingSequence newPeckDrillingSequence = Program[i] as PeckDrillingSequence;
                        newPeckDrillingSequence.Machine = Machine;
                        newPeckDrillingSequence.Material = WorkpieceMaterial;
                        break;
                    case PeckDeepDrillingSequence peckDeepDrillingSequence:
                        PeckDeepDrillingSequence newPeckDeepDrillingSequence = Program[i] as PeckDeepDrillingSequence;
                        newPeckDeepDrillingSequence.Machine = Machine;
                        newPeckDeepDrillingSequence.Material = WorkpieceMaterial;
                        break;
                    case TappingSequence tappingSequence:
                        TappingSequence newTappingSequence = Program[i] as TappingSequence;
                        newTappingSequence.Machine = Machine;
                        break;
                    case ThreadCuttingSequence threadCuttingSequence:
                        ThreadCuttingSequence newThreadCuttingSequence = Program[i] as ThreadCuttingSequence;
                        newThreadCuttingSequence.Machine = Machine;
                        break;
                    default:
                        break;
                }
            }

            foreach (var sequence in Program)
            {
                result.Add(sequence.Operation);
            }
            return string.Join("\n", result).Trim() + "\nM30\n%";
        }
        set { }
    }


    // Инструмент
    private TurningExternalTool selectedTurningExternalTool = null;
    private TurningInternalTool selectedTurningInternalTool = null;
    private GroovingExternalTool selectedGroovingExternalTool = null;
    private GroovingInternalTool selectedGroovingInternalTool = null;
    private ThreadingExternalTool selectedThreadingExternalTool = null;
    private ThreadingInternalTool selectedThreadingInternalTool = null;
    private DrillingTool selectedDrillingTool = null;
    private TappingTool selectedTappingTool = null;

    private void AddTurningExternalTool() => Tools.Add(new TurningExternalTool(0101, TurningExternalTool.Types.Bar, 80, 0.8));
    private void RemoveTurningExternalTool() => Tools.Remove(TurningExternalTools[^1]);

    private void AddTurningInternalTool() => Tools.Add(new TurningInternalTool(0101, 25, 80, 0.8));
    private void RemoveTurningInternalTool() => Tools.Remove(TurningInternalTools[^1]);

    private void AddGroovingExternalTool() => Tools.Add(new GroovingExternalTool(0101, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Left));
    private void RemoveGroovingExternalTool() => Tools.Remove(GroovingExternalTools[^1]);

    private void AddGroovingInternalTool() => Tools.Add(new GroovingInternalTool(0101, 20, 3, GroovingInternalTool.Point.Left));
    private void RemoveGroovingInternalTool() => Tools.Remove(GroovingInternalTools[^1]);

    private void AddThreadingExternalTool() => Tools.Add(new ThreadingExternalTool(0101, 1.5, 1));
    private void RemoveThreadingExternalTool() => Tools.Remove(ThreadingExternalTools[^1]);

    private void AddThreadingInternalTool() => Tools.Add(new ThreadingInternalTool(0101, 20, 1.5, 1));
    private void RemoveThreadingInternalTool() => Tools.Remove(ThreadingInternalTools[^1]);

    private void AddDrillingTool() => Tools.Add(new DrillingTool(0101, DrillingTool.Types.Solid, 10, 140));
    private void RemoveDrillingTool() => Tools.Remove(DrillingTools[^1]);

    private void AddTappingTool() => Tools.Add(new TappingTool(0101, TappingTool.Types.Cutting, 8, 1.25));
    private void RemoveTappingTool() => Tools.Remove(TappingTools[^1]);

    MudTabs tabs;

    public void OnSwipe(SwipeDirection direction)
    {
        if (direction == SwipeDirection.LeftToRight)
        {
            if (tabs.ActivePanelIndex > 0)
            {
                tabs.ActivatePanel(tabs.ActivePanelIndex - 1);
            }
        }
        else if (direction == SwipeDirection.RightToLeft)
        {
            if (tabs.ActivePanelIndex < 7)
            {
                tabs.ActivatePanel(tabs.ActivePanelIndex + 1);
            }
        }
    }


}
