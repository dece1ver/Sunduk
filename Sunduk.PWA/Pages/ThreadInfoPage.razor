@page "/thread"
<style>
    .tl{
        padding: 0px 15px 0px 0px;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-2">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudSelect Label="Стандарт" T="Standart" Value="ThreadStandart" Variant="Variant.Outlined" ValueChanged="OnStandartChanged">
                <MudSelectItem Value="@(Standart.Metric)">60° Метрическая</MudSelectItem>
                <MudSelectItem Value="@(Standart.BSPP)">55° Трубная цилиндрическая</MudSelectItem>
                @*<MudSelectItem Value="@(Standart.BSPP)">30° Трапецеидальная</MudSelectItem>*@
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Outlined" ValueChanged="OnTemplateChanged">
                @foreach (string item in ThreadTemplates)
                {
                    <MudSelectItem Value="@(item)">
                        <MudText>@item</MudText>
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="3" lg="12">
            <MudField Label="Тип резьбы" Variant="Variant.Outlined" InnerPadding="false">
                <MudRadioGroup @bind-SelectedOption="@ThreadType">
                    <MudRadio Option="@(Type.External)" Color="Color.Primary">Наружная</MudRadio>
                    <MudRadio Option="@(Type.Internal)" Color="Color.Primary">Внутренняя</MudRadio>
                </MudRadioGroup>
            </MudField>
        </MudItem>
        <MudItem xs="12" sm="9" lg="12">
            <MudTextField @bind-Value="ThreadDiameterString" Label="Диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
            <MudTextField @bind-Value="ThreadPitchString" Label="Шаг" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
        </MudItem>
    </MudGrid>
    @*<MudDivider Class="my-4"/>*@
    @if (ValidThreading())
    {
    <MudItem Class="mt-4" xs="12">
        <MudPaper Class="pa-4" Outlined="true">

            <table>
                <tr>
                    <MudText>Информация:</MudText>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Диаметр:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(ThreadDiameter) мм</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Шаг:</MudText></td>
                    <td><MudText Typo="Typo.caption">@ThreadPitchString</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Общая высота профиля:</MudText></td>
                    <td><MudText Typo="Typo.caption">@($"{Passes.Sum().ToString("G3").Replace(",", ".")}") мм</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Угол подъема винтовой линии:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(ThreadAngle.Value.ToString("G3").Replace(",",".")) °</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Угол опорной пластины:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(ThreadAngle.Value.ToString("N0").Replace(",",".")) °</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Количество проходов:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(Passes.Length)</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Обороты шпинделя:</MudText></td>
                    <td><MudText Typo="Typo.caption">@SpindleSpeed об/мин (120 м/мин)</MudText></td>
                </tr>
            </table>
        </MudPaper>
    </MudItem>
    <MudExpansionPanel Text="Проходы">
        <MudItem xs="12">
            <table>
                <tr>
                    <td class="tl"><MudText>Проход</MudText></td>
                    <td class="tl"><MudText>Съем</MudText></td>
                    <td><MudText>Накопленный</MudText></td>
                </tr>
                @foreach (var (value, index) in Passes.Select((v, i) => (v, i)))
                    {
                <tr>
                    <td><MudText Typo="Typo.caption">@(index + 1)</MudText></td>
                    <td><MudText Typo="Typo.caption">@value.ToString("N3").Replace(",", ".")</MudText></td>
                    <td><MudText Typo="Typo.caption">@TotalPasses[index].ToString("N3").Replace(",", ".")</MudText></td>
                </tr>
                    }
            </table>
        </MudItem>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Пример программы для Fanuc">
        <MudItem xs="12">
            <MudTextField Variant="Variant.Outlined" Style="font-family: Consolas" ReadOnly="true" Lines="3" Value="@($"G0 X{ApproachDiameter} Z0. S{SpindleSpeed} M3 G97\n" +
                                $"G76 P0201{ThreadProfile} Q{(int)(Passes.Last()*1000)} R0.1\n" +
                                $"G76 X{EndDiameter} Z-20. P{(int)(Passes.Sum()*1000)} Q{(int)(Passes[0]*1000)} F{ThreadPitch.NC()}")">
            </MudTextField>
        </MudItem>
    </MudExpansionPanel>
    }

</MudContainer>


@code
{
    public enum Standart {Metric, BSPP }
    public enum Type {External, Internal }

    public readonly HashSet<string> metricTemplates =
    new HashSet<string> {
        //"M2x0.4 (Стандартный)", "M2x0.25 (Мелкий)",
        //"M2.5x0.45 (Стандартный)", "M2.5x0.35 (Мелкий)",
        //"M3x0.5 (Стандартный)", "M3x0.35 (Мелкий)",
        //"M3.5x0.6 (Стандартный)", "M3.5x0.35 (Мелкий)",
        "M4x0.7 (Стандартный)", "M4x0.5 (Мелкий)", "M4.5x0.75", "M4.5x0.5 (Мелкий)",
        "M5x0.8 (Стандартный)", "M5x0.5 (Мелкий)", "M5.5x0.5 (Стандартный)",
        "M6x1 (Стандартный)", "M6x0.75 (Мелкий)", "M6x0.5 (Мелкий)",
        "M7x1 (Стандартный)", "M7x0.75 (Мелкий)", "M7x0.5 (Мелкий)",
        "M8x1.25 (Стандартный)", "M8x1 (Мелкий)", "M8x0.75 (Мелкий)", "M8x0.5 (Мелкий)",
        "M9x1.25 (Стандартный)", "M9x1 (Мелкий)", "M9x0.75 (Мелкий)", "M9x0.5 (Мелкий)",
        "M10x1.5 (Стандартный)", "M10x1.25 (Мелкий)", "M10x1 (Мелкий)", "M10x0.75 (Мелкий)", "M10x0.5 (Мелкий)",
        "M11x1.5 (Стандартный)", "M11x1 (Мелкий)", "M11x0.75 (Мелкий)", "M11x0.5 (Мелкий)",
        "M12x1.75 (Стандартный)", "M12x1.5 (Мелкий)", "M12x1.25 (Мелкий)", "M12x1 (Мелкий)", "M12x0.75 (Мелкий)", "M12x0.5 (Мелкий)",
        "M14x2 (Стандартный)", "M14x1.5 (Мелкий)", "M14x1.25 (Мелкий)", "M14x1 (Мелкий)", "M14x0.75 (Мелкий)", "M14x0.5 (Мелкий)",
        "M15x1.5 (Стандартный)", "M15x1 (Мелкий)",
        "M16x2 (Стандартный)", "M16x1.5 (Мелкий)", "M16x1 (Мелкий)", "M16x0.75 (Мелкий)", "M16x0.5 (Мелкий)",
        "M17x1.5 (Стандартный)", "M17x1 (Мелкий)",
        "M18x2.5 (Стандартный)", "M18x2 (Мелкий)", "M18x1.5 (Мелкий)", "M18x1 (Мелкий)", "M18x0.75 (Мелкий)", "M18x0.5 (Мелкий)",
        "M20x2.5 (Стандартный)", "M20x2 (Мелкий)", "M20x1.5 (Мелкий)", "M20x1 (Мелкий)", "M20x0.75 (Мелкий)", "M20x0.5 (Мелкий)",
        "M22x2.5 (Стандартный)", "M22x2 (Мелкий)", "M22x1.5 (Мелкий)", "M22x1 (Мелкий)", "M22x0.75 (Мелкий)", "M22x0.5 (Мелкий)",
        "M24x3 (Стандартный)", "M24x2 (Мелкий)", "M24x1.5 (Мелкий)", "M24x1 (Мелкий)", "M24x0.75 (Мелкий)",
        "M25x2 (Стандартный)", "M25x1.5 (Мелкий)", "M25x1 (Мелкий)",
        "M26x1.5 (Стандартный)",
        "M27x3 (Стандартный)", "M27x2 (Мелкий)", "M27x1.5 (Мелкий)", "M27x1 (Мелкий)", "M27x0.75 (Мелкий)",
        "M27x2 (Стандартный)", "M27x1.5 (Мелкий)", "M27x1 (Мелкий)",
        "M30x3.5 (Стандартный)", "M30x3 (Мелкий)", "M30x2 (Мелкий)", "M30x1.5 (Мелкий)", "M30x1 (Мелкий)", "M30x0.75 (Мелкий)",
        "M32x2 (Стандартный)", "M32x1.5 (Мелкий)",
        "M33x3.5 (Стандартный)", "M33x3 (Мелкий)", "M33x2 (Мелкий)", "M33x1.5 (Мелкий)", "M33x1 (Мелкий)", "M33x0.75 (Мелкий)",
        "M35x1.5 (Стандартный)",
        "M36x4 (Стандартный)", "M36x3 (Мелкий)", "M36x2 (Мелкий)", "M36x1.5 (Мелкий)", "M36x1 (Мелкий)",
        "M38x1.5 (Стандартный)",
        "M39x4 (Стандартный)", "M39x3 (Мелкий)", "M39x2 (Мелкий)", "M39x1.5 (Мелкий)", "M39x1 (Мелкий)",
        "M40x3 (Стандартный)", "M40x2 (Мелкий)", "M40x1.5 (Мелкий)",
        "M42x4.5 (Стандартный)", "M42x4 (Мелкий)", "M42x3 (Мелкий)", "M42x2 (Мелкий)", "M42x1.5 (Мелкий)", "M42x1 (Мелкий)",
        "M45x4.5 (Стандартный)", "M45x4 (Мелкий)", "M45x3 (Мелкий)", "M45x2 (Мелкий)", "M45x1.5 (Мелкий)", "M45x1 (Мелкий)",
        "M48x5 (Стандартный)", "M48x4 (Мелкий)", "M48x3 (Мелкий)", "M48x2 (Мелкий)", "M48x1.5 (Мелкий)", "M48x1 (Мелкий)",
        "M50x3 (Стандартный)", "M50x2 (Мелкий)", "M50x1.5 (Мелкий)",
        "M52x5 (Стандартный)", "M52x4 (Мелкий)", "M52x3 (Мелкий)", "M52x2 (Мелкий)", "M52x1.5 (Мелкий)", "M52x1 (Мелкий)",
        "M55x4 (Стандартный)", "M55x3 (Мелкий)", "M55x2 (Мелкий)", "M55x1.5 (Мелкий)",
        "M56x5.5 (Стандартный)", "M56x4 (Мелкий)", "M56x3 (Мелкий)", "M56x2 (Мелкий)", "M56x1.5 (Мелкий)", "M56x1 (Мелкий)",
        "M58x4 (Стандартный)", "M58x3 (Мелкий)", "M58x2 (Мелкий)", "M58x1.5 (Мелкий)",
        "M60x5.5 (Стандартный)", "M60x4 (Мелкий)", "M60x3 (Мелкий)", "M60x2 (Мелкий)", "M60x1.5 (Мелкий)", "M60x1 (Мелкий)",
        "M62x4 (Стандартный)", "M62x3 (Мелкий)", "M62x2 (Мелкий)", "M62x1.5 (Мелкий)",
        "M64x6 (Стандартный)", "M64x4 (Мелкий)", "M64x3 (Мелкий)", "M64x2 (Мелкий)", "M64x1.5 (Мелкий)", "M64x1 (Мелкий)",
        "M65x4 (Стандартный)", "M65x3 (Мелкий)", "M65x2 (Мелкий)", "M65x1.5 (Мелкий)",
        "M68x6 (Стандартный)", "M68x4 (Мелкий)", "M68x3 (Мелкий)", "M68x2 (Мелкий)", "M68x1.5 (Мелкий)", "M68x1 (Мелкий)",
        "M70x6 (Стандартный)", "M70x4 (Мелкий)", "M70x3 (Мелкий)", "M70x2 (Мелкий)", "M70x1.5 (Мелкий)",
        "M72x6 (Стандартный)", "M72x4 (Мелкий)", "M72x3 (Мелкий)", "M72x2 (Мелкий)", "M72x1.5 (Мелкий)", "M72x1 (Мелкий)",
        "M75x4 (Стандартный)", "M75x3 (Мелкий)", "M75x2 (Мелкий)", "M75x1.5 (Мелкий)",
        "M76x6 (Стандартный)", "M76x4 (Мелкий)", "M76x3 (Мелкий)", "M76x2 (Мелкий)", "M76x1.5 (Мелкий)", "M76x1 (Мелкий)",
        "M78x2 (Стандартный)",
        "M80x6 (Стандартный)", "M80x4 (Мелкий)", "M80x3 (Мелкий)", "M80x2 (Мелкий)", "M80x1.5 (Мелкий)", "M80x1 (Мелкий)",
        "M82x2 (Стандартный)",
        "M85x6 (Стандартный)", "M85x4 (Мелкий)", "M85x3 (Мелкий)", "M85x2 (Мелкий)", "M85x1.5 (Мелкий)",
        "M90x6 (Стандартный)", "M90x4 (Мелкий)", "M90x3 (Мелкий)", "M90x2 (Мелкий)", "M90x1.5 (Мелкий)",
        "M95x6 (Стандартный)", "M95x4 (Мелкий)", "M95x3 (Мелкий)", "M95x2 (Мелкий)", "M95x1.5 (Мелкий)",
        "M100x6 (Стандартный)", "M100x4 (Мелкий)", "M100x3 (Мелкий)", "M100x2 (Мелкий)", "M100x1.5 (Мелкий)",
        "M105x6 (Стандартный)", "M105x4 (Мелкий)", "M105x3 (Мелкий)", "M105x2 (Мелкий)", "M105x1.5 (Мелкий)",
        "M110x6 (Стандартный)", "M110x4 (Мелкий)", "M110x3 (Мелкий)", "M110x2 (Мелкий)", "M110x1.5 (Мелкий)",
        "M115x6 (Стандартный)", "M115x4 (Мелкий)", "M115x3 (Мелкий)", "M115x2 (Мелкий)", "M115x1.5 (Мелкий)",
        "M120x6 (Стандартный)", "M120x4 (Мелкий)", "M120x3 (Мелкий)", "M120x2 (Мелкий)", "M120x1.5 (Мелкий)",
        "M125x8 (Стандартный)", "M125x6 (Мелкий)", "M125x4 (Мелкий)", "M125x3 (Мелкий)", "M125x2 (Мелкий)", "M125x1.5 (Мелкий)",
        "M130x8 (Стандартный)", "M130x6 (Мелкий)", "M130x4 (Мелкий)", "M130x3 (Мелкий)", "M130x2 (Мелкий)", "M130x1.5 (Мелкий)",
        "M135x6 (Стандартный)", "M135x4 (Мелкий)", "M135x3 (Мелкий)", "M135x2 (Мелкий)", "M135x1.5 (Мелкий)",
        "M140x8 (Стандартный)", "M140x6 (Мелкий)", "M140x4 (Мелкий)", "M140x3 (Мелкий)", "M140x2 (Мелкий)", "M140x1.5 (Мелкий)",
        "M145x6 (Стандартный)", "M145x4 (Мелкий)", "M145x3 (Мелкий)", "M145x2 (Мелкий)", "M145x1.5 (Мелкий)",
        "M150x8 (Стандартный)", "M150x6 (Мелкий)", "M150x4 (Мелкий)", "M150x3 (Мелкий)", "M150x2 (Мелкий)", "M150x1.5 (Мелкий)",
        "M155x6 (Стандартный)", "M155x4 (Мелкий)", "M155x3 (Мелкий)", "M155x2 (Мелкий)",
        "M160x8 (Стандартный)", "M160x6 (Мелкий)", "M160x4 (Мелкий)", "M160x3 (Мелкий)", "M160x2 (Мелкий)",
        "M165x6 (Стандартный)", "M165x4 (Мелкий)", "M165x3 (Мелкий)", "M165x2 (Мелкий)",
        "M170x8 (Стандартный)", "M170x6 (Мелкий)", "M170x4 (Мелкий)", "M170x3 (Мелкий)", "M170x2 (Мелкий)",
        "M175x6 (Стандартный)", "M175x4 (Мелкий)", "M175x3 (Мелкий)", "M175x2 (Мелкий)",
        "M180x8 (Стандартный)", "M180x6 (Мелкий)", "M180x4 (Мелкий)", "M180x3 (Мелкий)", "M180x2 (Мелкий)",
        "M185x6 (Стандартный)", "M185x4 (Мелкий)", "M185x3 (Мелкий)", "M185x2 (Мелкий)",
        "M190x8 (Стандартный)", "M190x6 (Мелкий)", "M190x4 (Мелкий)", "M190x3 (Мелкий)", "M190x2 (Мелкий)",
        "M195x6 (Стандартный)", "M195x4 (Мелкий)", "M195x3 (Мелкий)", "M195x2 (Мелкий)",
        "M200x8 (Стандартный)", "M200x6 (Мелкий)", "M200x4 (Мелкий)", "M200x3 (Мелкий)", "M200x2 (Мелкий)",
        //"M205x6 (Стандартный)", "M205x4 (Мелкий)", "M205x3 (Мелкий)",
        //"M210x8 (Стандартный)", "M210x6 (Мелкий)", "M210x4 (Мелкий)", "M210x3 (Мелкий)",
        //"M215x6 (Стандартный)", "M215x4 (Мелкий)", "M215x3 (Мелкий)",
        //"M220x8 (Стандартный)", "M220x6 (Мелкий)", "M220x4 (Мелкий)", "M220x3 (Мелкий)",
        //"M225x6 (Стандартный)", "M225x4 (Мелкий)", "M225x3 (Мелкий)",
        //"M230x8 (Стандартный)", "M230x6 (Мелкий)", "M230x4 (Мелкий)", "M230x3 (Мелкий)",
        //"M235x6 (Стандартный)", "M235x4 (Мелкий)", "M235x3 (Мелкий)",
        //"M240x8 (Стандартный)", "M240x6 (Мелкий)", "M240x4 (Мелкий)", "M240x3 (Мелкий)",
        //"M245x6 (Стандартный)", "M245x4 (Мелкий)", "M245x3 (Мелкий)",
        //"M250x8 (Стандартный)", "M250x6 (Мелкий)", "M250x4 (Мелкий)", "M250x3 (Мелкий)",
        //"M255x6 (Стандартный)", "M255x4 (Мелкий)", "M255x3 (Мелкий)",
        //"M260x8 (Стандартный)", "M260x6 (Мелкий)", "M260x4 (Мелкий)", "M260x3 (Мелкий)",
        //"M265x6 (Стандартный)", "M265x4 (Мелкий)", "M265x3 (Мелкий)",
        //"M270x8 (Стандартный)", "M270x6 (Мелкий)", "M270x4 (Мелкий)", "M270x3 (Мелкий)",
        //"M275x6 (Стандартный)", "M275x4 (Мелкий)", "M275x3 (Мелкий)",
        //"M280x8 (Стандартный)", "M280x6 (Мелкий)", "M280x4 (Мелкий)", "M280x3 (Мелкий)",
        //"M285x6 (Стандартный)", "M285x4 (Мелкий)", "M285x3 (Мелкий)",
        //"M290x8 (Стандартный)", "M290x6 (Мелкий)", "M290x4 (Мелкий)", "M290x3 (Мелкий)",
        //"M295x6 (Стандартный)", "M295x4 (Мелкий)", "M295x3 (Мелкий)",
        //"M300x8 (Стандартный)", "M300x6 (Мелкий)", "M300x4 (Мелкий)", "M300x3 (Мелкий)",
};

    public readonly HashSet<string> bsppTemplates =
        new HashSet<string> {
        "G1/16", "G1/8", "G1/4", "G3/8", "G1/2", "G5/8", "G3/4", "G7/8",
        "G1", "G1⅛", "G1¼", "G1⅜", "G1½", "G1¾",
        "G2", "G2¼", "G2½", "G2¾",
        "G3", "G3¼", "G3½", "G3¾",
        "G4", "G4½",
        "G5", "G5½",
        "G6"
    };
    public HashSet<string> ThreadTemplates
    {
        get
        {
            if (ThreadStandart == Standart.Metric)
            {
                return metricTemplates;
            }
            else if (ThreadStandart == Standart.BSPP)
            {
                return bsppTemplates;
            }
            else
            {
                return new HashSet<string> { };
            }
        }
    }
    public string CurrentThreadTemplate { get; set; }

    public Standart ThreadStandart { get; set; } = Standart.Metric;
    public Type ThreadType { get; set; } = Type.External;


    public string ThreadDiameterString { get; set; }
    public double ThreadDiameter { get => Util.GetDouble(ThreadDiameterString); }

    public string ThreadPitchString { get; set; }
    public double ThreadPitch { get => Util.GetDouble(ThreadPitchString); }

    public double NominalHeight
    {
        get
        {
            if(ThreadStandart == Standart.Metric)
            {
                return Math.Sqrt(3) / 2 * ThreadPitch;
            }
            else
            {
                return 0.960491 * ThreadPitch;
            }
        }
    }
    public double ProfileHeight
    {
        get
        {
            if (ThreadStandart == Standart.Metric)
            {
                return ThreadType == Type.External ? ((17.0 / 24.0) * NominalHeight) : ((5.0 / 8.0) * NominalHeight);
            }
            else
            {
                return 0.640327 * ThreadPitch;
            }

        }
    }
    public string ThreadUnits
    {
        get
        {
            if (ThreadStandart == Standart.Metric)
            {
                return "мм";
            }
            else if (ThreadStandart == Standart.BSPP)
            {
                return "TPI";
            }
            else
            {
                return string.Empty;
            }
        }
    }

    public int PassesCount
    { get
        {
            switch (ThreadPitch)
            {
                case <= 0.75:
                    return 4;
                case <= 1:
                    return 5;
                case <= 1.5:
                    return 6;
                case <= 2:
                    return 8;
                case <= 2.5:
                    return 10;
                case <= 3.5:
                    return 12;
                case <= 5.5:
                    return 14;
                case > 5.5:
                    return 16;
                default:
                    return 0;
            }
        }
    } // написать зависимость от шага

    public double[] Passes { get => Util.CalcPasses(ProfileHeight, PassesCount, Util.PassesOption.Infeed); }
    public double[] TotalPasses { get => Util.CalcPasses(ProfileHeight, PassesCount, Util.PassesOption.FullPasses); }

    public int SpindleSpeed { get => ((int)(120000 / (Math.PI * ThreadDiameter))); }

    public double? ThreadAngle { get
        {
            if (ValidThreading())
            {
                double result = Math.Atan(ThreadPitch / (ThreadDiameter * Math.PI));
                result = result / Math.PI * 180;
                return result;
            }
            else
            {
                return 0;
            }
        } }

    public string ApproachDiameter { get
        {
            if(ValidThreading() && (ThreadType == Type.External) )
            {
                return (ThreadDiameter + 2).ToString("N1").Replace(",",".").Replace(".0",".");
            }
            else if (ValidThreading() && (ThreadType == Type.Internal))
            {
                return (ThreadDiameter - ThreadPitch - 1).ToString("N1").Replace(",", ".").Replace(".0", ".");
            }
            else
            {
                return string.Empty;
            }
        } }
    public string ThreadProfile { get => ThreadStandart == Standart.BSPP ? "55" : "60"; }
    public string EndDiameter { get => ThreadType == Type.External ? (ThreadDiameter - (2 * Passes.Sum())).ToString("N3").Replace(",", ".").Trim('0') : ThreadDiameter.ToString("N3").Replace(",",".").Trim('0') ; }

    private void OnStandartChanged(Standart value)
    {
        if (ThreadStandart != value)
        {
            ThreadStandart = value;
            ThreadPitchString = string.Empty;
            ThreadDiameterString = string.Empty;
            CurrentThreadTemplate = null;
        }
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        if(ThreadStandart == Standart.Metric)
        {
            ThreadDiameterString = value.TrimStart('M').Split('x')[0];
            ThreadPitchString = value.TrimStart('M').Split('x')[1].Split()[0];
        }
        else if(ThreadStandart == Standart.BSPP)
        {
            switch (CurrentThreadTemplate)
            {
                case "G1/16":
                    ThreadDiameterString = "7.723";
                    ThreadPitchString = "0.907";
                    break;
                case "G1/8":
                    ThreadDiameterString = "9.728";
                    ThreadPitchString = "0.907";
                    break;
                case "G1/4":
                    ThreadDiameterString = "13.157";
                    ThreadPitchString = "1.337";
                    break;
                case "G3/8":
                    ThreadDiameterString = "16.662";
                    ThreadPitchString = "1.337";
                    break;
                case "G1/2":
                    ThreadDiameterString = "20.995";
                    ThreadPitchString = "1.814";
                    break;
                case "G5/8":
                    ThreadDiameterString = "22.911";
                    ThreadPitchString = "1.814";
                    break;
                case "G3/4":
                    ThreadDiameterString = "26.441";
                    ThreadPitchString = "1.814";
                    break;
                case "G7/8":
                    ThreadDiameterString = "30.201";
                    ThreadPitchString = "1.814";
                    break;
                case "G1":
                    ThreadDiameterString = "33.249";
                    ThreadPitchString = "2.309";
                    break;
                case "G1⅛":
                    ThreadDiameterString = "37.897";
                    ThreadPitchString = "2.309";
                    break;
                case "G1¼":
                    ThreadDiameterString = "41.91";
                    ThreadPitchString = "2.309";
                    break;
                case "G1⅜":
                    ThreadDiameterString = "44.323";
                    ThreadPitchString = "2.309";
                    break;
                case "G1½":
                    ThreadDiameterString = "47.803";
                    ThreadPitchString = "2.309";
                    break;
                case "G1¾":
                    ThreadDiameterString = "53.746";
                    ThreadPitchString = "2.309";
                    break;
                case "G2":
                    ThreadDiameterString = "59.614";
                    ThreadPitchString = "2.309";
                    break;
                case "G2¼":
                    ThreadDiameterString = "65.71";
                    ThreadPitchString = "2.309";
                    break;
                case "G2½":
                    ThreadDiameterString = "75.184";
                    ThreadPitchString = "2.309";
                    break;
                case "G2¾":
                    ThreadDiameterString = "81.534";
                    ThreadPitchString = "2.309";
                    break;
                case "G3":
                    ThreadDiameterString = "87.884";
                    ThreadPitchString = "2.309";
                    break;
                case "G3¼":
                    ThreadDiameterString = "93.98";
                    ThreadPitchString = "2.309";
                    break;
                case "G3½":
                    ThreadDiameterString = "100.33";
                    ThreadPitchString = "2.309";
                    break;
                case "G3¾":
                    ThreadDiameterString = "106.68";
                    ThreadPitchString = "2.309";
                    break;
                case "G4":
                    ThreadDiameterString = "113.03";
                    ThreadPitchString = "2.309";
                    break;
                case "G4½":
                    ThreadDiameterString = "125.73";
                    ThreadPitchString = "2.309";
                    break;
                case "G5":
                    ThreadDiameterString = "138.43";
                    ThreadPitchString = "2.309";
                    break;
                case "G5½":
                    ThreadDiameterString = "151.13";
                    ThreadPitchString = "2.309";
                    break;
                case "G6":
                    ThreadDiameterString = "163.83";
                    ThreadPitchString = "2.309";
                    break;
                default:
                    break;
            }
        }
    }

    private bool ValidThreading()
    {
        if (ThreadDiameter != 0 && ThreadPitch != 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}