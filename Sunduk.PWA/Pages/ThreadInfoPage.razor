@page "/thread"
<style>
    .tl{
        padding: 0px 15px 0px 0px;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-2">
    <MudGrid>
        <MudItem xs="12" md="6">
            <MudSelect Label="Стандарт" T="ThreadStandart" Value="ThreadStandart" Variant="Variant.Outlined" ValueChanged="OnStandartChanged">
                <MudSelectItem Value="@(ThreadStandart.Metric)">60° Метрическая</MudSelectItem>
                <MudSelectItem Value="@(ThreadStandart.BSPP)">55° Трубная цилиндрическая</MudSelectItem>
                @*<MudSelectItem Value="@(Standart.BSPP)">30° Трапецеидальная</MudSelectItem>*@
            </MudSelect>
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelect Label="Шаблон" T="string" Value="CurrentThreadTemplate" Variant="Variant.Outlined" ValueChanged="OnTemplateChanged">
                @foreach (string item in ThreadTemplates)
                {
                    <MudSelectItem Value="@(item)">
                        <MudText>@item</MudText>
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="3" lg="12">
            <MudField Label="Тип резьбы" Variant="Variant.Outlined" InnerPadding="false">
                <MudRadioGroup @bind-SelectedOption="@ThreadType">
                    <MudRadio Option="@(CuttingType.External)" Color="Color.Primary">Наружная</MudRadio>
                    <MudRadio Option="@(CuttingType.Internal)" Color="Color.Primary">Внутренняя</MudRadio>
                </MudRadioGroup>
            </MudField>
        </MudItem>
        <MudItem xs="12" sm="9" lg="12">
            <MudTextField @bind-Value="ThreadDiameterString" Label="Диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
            <MudTextField @bind-Value="ThreadPitchString" Label="Шаг" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
        </MudItem>
    </MudGrid>
    @*<MudDivider Class="my-4"/>*@
    @if (Thread.Valid(ThreadDiameter, ThreadPitch))
    {
    <MudItem Class="mt-4" xs="12">
        <MudPaper Class="pa-4" Outlined="true">

            <table>
                <tr>
                    <MudText>Информация:</MudText>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Диаметр:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(ThreadDiameter) мм</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Шаг:</MudText></td>
                    <td><MudText Typo="Typo.caption">@ThreadPitchString</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Общая высота профиля:</MudText></td>
                    <td><MudText Typo="Typo.caption">@($"{Passes.Sum().ToString("G3").Replace(",", ".")}") мм</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Угол подъема винтовой линии:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(ThreadAngle.Value.ToString("G3").Replace(",",".")) °</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Угол опорной пластины:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(ThreadAngle.Value.ToString("N0").Replace(",",".")) °</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Количество проходов:</MudText></td>
                    <td><MudText Typo="Typo.caption">@(Passes.Length)</MudText></td>
                </tr>
                <tr>
                    <td class="tl"><MudText Typo="Typo.caption">Обороты шпинделя:</MudText></td>
                    <td><MudText Typo="Typo.caption">@SpindleSpeed об/мин (120 м/мин)</MudText></td>
                </tr>
            </table>
        </MudPaper>
    </MudItem>
    <MudExpansionPanel Text="Проходы">
        <MudItem xs="12">
            <table>
                <tr>
                    <td class="tl"><MudText>Проход</MudText></td>
                    <td class="tl"><MudText>Съем</MudText></td>
                    <td><MudText>Накопленный</MudText></td>
                </tr>
                @foreach (var (value, index) in Passes.Select((v, i) => (v, i)))
                    {
                <tr>
                    <td><MudText Typo="Typo.caption">@(index + 1)</MudText></td>
                    <td><MudText Typo="Typo.caption">@value.ToString("N3").Replace(",", ".")</MudText></td>
                    <td><MudText Typo="Typo.caption">@TotalPasses[index].ToString("N3").Replace(",", ".")</MudText></td>
                </tr>
                    }
            </table>
        </MudItem>
    </MudExpansionPanel>
    <MudExpansionPanel Text="Пример программы для Fanuc">
        <MudItem xs="12">
            <MudTextField Variant="Variant.Outlined" Style="font-family: Consolas" ReadOnly="true" Lines="3" Value="@($"G0 X{ApproachDiameter} Z0. S{SpindleSpeed} M3 G97\n" +
                                $"G76 P0201{Thread.Profile(ThreadStandart)} Q{(int)(Passes.Last()*1000)} R0.1\n" +
                                $"G76 X{EndDiameter} Z-20. P{(int)(Passes.Sum()*1000)} Q{(int)(Passes[0]*1000)} F{ThreadPitch.NC()}")">
            </MudTextField>
        </MudItem>
    </MudExpansionPanel>
    }

</MudContainer>


@code
{

    public IEnumerable<string> ThreadTemplates
    {
        get
        {
            if (ThreadStandart == ThreadStandart.Metric)
            {
                return Thread.metricTemplates;
            }
            else if (ThreadStandart == ThreadStandart.BSPP)
            {
                return Thread.bsppTemplates;
            }
            else
            {
                return new HashSet<string> { };
            }
        }
    }
    public string CurrentThreadTemplate { get; set; }

    public ThreadStandart ThreadStandart { get; set; } = ThreadStandart.Metric;
    public CuttingType ThreadType { get; set; } = CuttingType.External;


    public string ThreadDiameterString { get; set; }
    public double ThreadDiameter { get => Util.GetDouble(ThreadDiameterString); }

    public string ThreadPitchString { get; set; }
    public double ThreadPitch { get => Util.GetDouble(ThreadPitchString); }


    public string ThreadUnits
    {
        get
        {
            if (ThreadStandart == ThreadStandart.Metric)
            {
                return "мм";
            }
            else if (ThreadStandart == ThreadStandart.BSPP)
            {
                return "TPI";
            }
            else
            {
                return string.Empty;
            }
        }
    }


    public double[] Passes { get => Thread.Passes(ThreadStandart, ThreadType, ThreadPitch); }
    public double[] TotalPasses { get => Thread.TotalPasses(ThreadStandart, ThreadType, ThreadPitch); }


    public int SpindleSpeed { get => ((int)(120000 / (Math.PI * ThreadDiameter))); }

    public double? ThreadAngle { get
        {
            if (Thread.Valid(ThreadDiameter, ThreadPitch))
            {
                return Thread.Angle(ThreadDiameter, ThreadPitch);
            }
            else
            {
                return 0;
            }
        } }

    public string ApproachDiameter { get
        {
            if(Thread.Valid(ThreadDiameter, ThreadPitch))
            {
                return Thread.ApproachDiameter(ThreadType, ThreadDiameter, ThreadPitch);
            }
            return string.Empty;
        } }

    public string EndDiameter
    {
        get
        {
            if (Thread.Valid(ThreadDiameter, ThreadPitch))
            {
                return Thread.EndDiameter(ThreadStandart, ThreadType, ThreadDiameter, ThreadPitch);
            }
            return string.Empty;
        }
    }

    private void OnStandartChanged(ThreadStandart value)
    {
        if (ThreadStandart != value)
        {
            ThreadStandart = value;
            ThreadPitchString = string.Empty;
            ThreadDiameterString = string.Empty;
            CurrentThreadTemplate = null;
        }
    }

    private void OnTemplateChanged(string value)
    {
        CurrentThreadTemplate = value;
        if(ThreadStandart == ThreadStandart.Metric)
        {
            Thread.GetMetricValues(CurrentThreadTemplate, out string diameter, out string pitch);
            ThreadDiameterString = diameter;
            ThreadPitchString = pitch;
        }
        else if(ThreadStandart == ThreadStandart.BSPP)
        {
            Thread.GetBSPPValues(CurrentThreadTemplate, out string diameter, out string pitch);
            ThreadDiameterString = diameter;
            ThreadPitchString = pitch;
        }
    }
}