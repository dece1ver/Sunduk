@page "/thread"
<style>
    .tl{
        padding: 0px 15px 0px 0px;
    }
</style>
<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-2">
    <MudGrid >
        <MudItem xs="12" md="12">
            <MudSelect Label="Стандарт" T="string" Value="ThreadStandart" Variant="Variant.Outlined" ValueChanged="OnStandartChanged">
                <MudSelectItem Value="@(metric)" />
                <MudSelectItem Value="@(inch)" />
                @*<MudSelectItem Value="@(trapezoidal)" />*@
            </MudSelect>
        </MudItem>
        <MudItem xs="12" sm="3" lg="12">
            <MudField Label="Тип резьбы" Variant="Variant.Outlined" InnerPadding="false">
                <MudRadioGroup @bind-SelectedOption="@ThreadType">
                    <MudRadio Option="@(externalThread)" Color="Color.Primary">Наружная</MudRadio>
                    <MudRadio Option="@(internalThread)" Color="Color.Primary">Внутренняя</MudRadio>
                </MudRadioGroup>
            </MudField>
        </MudItem>
        <MudItem xs="12" sm="9" lg="12">
            <MudTextField @bind-Value="ThreadDiameterString" Label="Диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true" ></MudTextField>
            <MudSelect @bind-Value="@ThreadPitch" Label="Шаг" Variant="Variant.Text" Disabled="@(ThreadPitches.Length == 0)" AdornmentText="@ThreadUnits">
                @foreach (double item in ThreadPitches)
                {
                    <MudSelectItem Value="@(item)">
                        <MudText>@(ThreadStandart == inch ? $"{item.ToString("G3").Replace(",",".")} TPI ({(25.4/item).ToString("N3").Replace(",", ".")} мм)" : $"{item.ToString("G3").Replace(",", ".")} мм")</MudText>
                    </MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid>
    @*<MudDivider Class="my-4"/>*@
    @if (ValidThreading())
    {
        <MudItem Class="mt-4" xs="12">
            <MudPaper Class="pa-4" Outlined="true">

                <table>
                    <tr>
                        <MudText>Информация:</MudText>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Диаметр:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(ThreadDiameter) мм</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Шаг:</MudText></td>
                        <td><MudText Typo="Typo.caption">@ThreadPitchString</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Общая высота профиля:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(Passes.Sum().ToString("G3").Replace(",", ".")) мм</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Угол подъема винтовой линии:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(ThreadAngle.ToString("G3").Replace(",",".")) °</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Угол опорной пластины:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(ThreadAngle.ToString("N0").Replace(",",".")) °</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Количество проходов:</MudText></td>
                        <td><MudText Typo="Typo.caption">@(Passes.Length)</MudText></td>
                    </tr>
                    <tr>
                        <td class="tl"><MudText Typo="Typo.caption">Обороты шпинделя:</MudText></td>
                        <td><MudText Typo="Typo.caption">@SpindleSpeed об/мин (120 м/мин)</MudText></td>
                    </tr>
                </table>
            </MudPaper>
        </MudItem>
        <MudExpansionPanel Text="Проходы">
            <MudItem xs="12">
                <table>
                    <tr>
                        <td class="tl"><MudText>Проход</MudText></td>
                        <td><MudText>Съем</MudText></td>
                    </tr>
                    @foreach (var (value, index) in Passes.Select((v, i) => (v, i)))
                    {
                        <tr>
                            <td><MudText Typo="Typo.caption">@(index + 1)</MudText></td>
                            <td><MudText Typo="Typo.caption">@value.ToString("N3").Replace(",", ".")</MudText></td>
                        </tr>
                    }
                </table>
            </MudItem>
        </MudExpansionPanel>
        <MudExpansionPanel Text="Пример программы для Fanuc">
            <MudItem xs="12">
                <MudTextField Variant="Variant.Outlined" Style="font-family: Consolas" ReadOnly="true" Lines="3" Value="@($"G0 X{ApproachDiameter} Z0. S{SpindleSpeed} M3 G97\n" +
                                $"G76 P0201{ThreadProfile} Q{(int)(Passes.Last()*1000)} R0.1\n" +
                                $"G76 X{EndDiameter} Z-20. P{(int)(Passes.Sum()*1000)} Q{(int)(Passes[0]*1000)} F{ThreadPitch.ToString("N2").Replace(",", ".").Replace(".00", ".").Trim('0')}")">
                </MudTextField>
            </MudItem>
        </MudExpansionPanel>

        
        
    }

</MudContainer>


@code
{
    public const string metric = "60° Метрическая";
    public const string inch = "55° Дюймовая";
    public const string trapezoidal = "Трапецеидальная";
    public const string externalThread = "Наружная";
    public const string internalThread = "Внутренняя";

    public readonly double[] metricPitches = { 0.5, 0.75, 1, 1.25, 1.5, 1.75, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6 };
    public readonly double[] inchPitches = { 32, 28, 24, 20, 18, 16, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4.5, 4 };

    public string ThreadStandart { get; set; } = metric;
    public string ThreadType { get; set; } = externalThread;

    public string ThreadDiameterString { get; set; }
    public double? ThreadDiameter
    {
        get
        {
            if (!string.IsNullOrEmpty(ThreadDiameterString))
            {
                if (Double.TryParse(ThreadDiameterString.Trim().Replace(".", ","), out double diameter))
                {
                    return diameter;
                }
            }

            return null;

        }
    }

    public double[] ThreadPitches
    {
        get
        {
            if (ThreadStandart == metric)
            {
                return metricPitches;
            }
            else if (ThreadStandart == inch)
            {
                return inchPitches;
            }
            else
            {
                return new double[] { };
            }
        }
    }
    public double ThreadPitch { get; set; }
    public string ThreadPitchString
    {
        get
        {
            return ThreadStandart == inch ? $"{ThreadPitch.ToString("G3").Replace(",", ".")} TPI ({(25.4 / ThreadPitch).ToString("N3").Replace(",", ".")} мм)" : $"{ThreadPitch.ToString("G3").Replace(",", ".")} мм";
        }
    }

    public string ThreadUnits
    {
        get
        {
            if (ThreadStandart == "Метрическая" || ThreadStandart == "Трапецеидальная")
            {
                return "мм";
            }
            else if (ThreadStandart == "Дюймовая")
            {
                return "TPI";
            }
            else
            {
                return string.Empty;
            }
        }
    }
    public double[] Passes
    {
        get
        {
            switch ((ThreadType, ThreadStandart, ThreadPitch))
            {
                // наружная метричка
                case (externalThread, metric, 0.5):
                    return new double[] { 0.10, 0.09, 0.08, 0.07 };
                case (externalThread, metric, 0.75):
                    return new double[] { 0.16, 0.15, 0.12, 0.07 };
                case (externalThread, metric, 1):
                    return new double[] { 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, metric, 1.25):
                    return new double[] { 0.17, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (externalThread, metric, 1.5):
                    return new double[] { 0.20, 0.19, 0.18, 0.16, 0.14, 0.08 };
                case (externalThread, metric, 1.75):
                    return new double[] { 0.17, 0.17, 0.16, 0.15, 0.14, 0.13, 0.11, 0.08 };
                case (externalThread, metric, 2):
                    return new double[] { 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.13, 0.08 };
                case (externalThread, metric, 2.5):
                    return new double[] { 0.20, 0.19, 0.18, 0.17, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, metric, 3):
                    return new double[] { 0.20, 0.19, 0.19, 0.18, 0.17, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (externalThread, metric, 3.5):
                    return new double[] { 0.24, 0.23, 0.22, 0.21, 0.21, 0.20, 0.18, 0.17, 0.16, 0.15, 0.13, 0.08 };
                case (externalThread, metric, 4):
                    return new double[] { 0.24, 0.22, 0.22, 0.21, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, metric, 4.5):
                    return new double[] { 0.27, 0.25, 0.24, 0.23, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.14, 0.10 };
                case (externalThread, metric, 5):
                    return new double[] { 0.29, 0.28, 0.27, 0.26, 0.25, 0.25, 0.24, 0.23, 0.22, 0.20, 0.19, 0.17, 0.15, 0.10 };
                case (externalThread, metric, 5.5):
                    return new double[] { 0.27, 0.26, 0.26, 0.25, 0.25, 0.24, 0.23, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.16, 0.14, 0.10 };
                case (externalThread, metric, 6):
                    return new double[] { 0.30, 0.29, 0.29, 0.28, 0.27, 0.26, 0.26, 0.25, 0.24, 0.23, 0.22, 0.20, 0.19, 0.17, 0.15, 0.10 };
                // внутренняя метричка
                case (internalThread, metric, 0.5):
                    return new double[] { 0.10, 0.09, 0.08, 0.07 };
                case (internalThread, metric, 0.75):
                    return new double[] { 0.15, 0.14, 0.12, 0.07 };
                case (internalThread, metric, 1):
                    return new double[] { 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (internalThread, metric, 1.25):
                    return new double[] { 0.16, 0.15, 0.14, 0.13, 0.11, 0.08 };
                case (internalThread, metric, 1.5):
                    return new double[] { 0.20, 0.18, 0.17, 0.15, 0.13, 0.08 };
                case (internalThread, metric, 1.75):
                    return new double[] { 0.16, 0.15, 0.15, 0.14, 0.13, 0.12, 0.11, 0.08 };
                case (internalThread, metric, 2):
                    return new double[] { 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (internalThread, metric, 2.5):
                    return new double[] { 0.19, 0.18, 0.17, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (internalThread, metric, 3):
                    return new double[] { 0.19, 0.18, 0.18, 0.17, 0.16, 0.16, 0.15, 0.14, 0.14, 0.12, 0.11, 0.08 };
                case (internalThread, metric, 3.5):
                    return new double[] { 0.22, 0.21, 0.20, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (internalThread, metric, 4):
                    return new double[] { 0.21, 0.21, 0.20, 0.19, 0.19, 0.18, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (internalThread, metric, 4.5):
                    return new double[] { 0.23, 0.23, 0.22, 0.22, 0.21, 0.20, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.10 };
                case (internalThread, metric, 5):
                    return new double[] { 0.26, 0.26, 0.25, 0.24, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.16, 0.15, 0.10 };
                case (internalThread, metric, 5.5):
                    return new double[] { 0.25, 0.25, 0.24, 0.24, 0.23, 0.22, 0.22, 0.21, 0.20, 0.20, 0.19, 0.18, 0.17, 0.16, 0.14, 0.10 };
                case (internalThread, metric, 6):
                    return new double[] { 0.28, 0.27, 0.26, 0.26, 0.25, 0.24, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.16, 0.15, 0.10 };
                // наружная дюймовая
                case (externalThread, inch, 32):
                    return new double[] { 0.17, 0.16, 0.13, 0.08 };
                case (externalThread, inch, 28):
                    return new double[] { 0.15, 0.14, 0.13, 0.11, 0.08 };
                case (externalThread, inch, 24):
                    return new double[] { 0.18, 0.16, 0.15, 0.13, 0.08 };
                case (externalThread, inch, 20):
                    return new double[] { 0.18, 0.17, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 18):
                    return new double[] { 0.20, 0.18, 0.17, 0.15, 0.13, 0.08 };
                case (externalThread, inch, 16):
                    return new double[] { 0.19, 0.18, 0.17, 0.16, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 14):
                    return new double[] { 0.18, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 13):
                    return new double[] { 0.20, 0.19, 0.18, 0.17, 0.16, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 12):
                    return new double[] { 0.22, 0.21, 0.20, 0.19, 0.17, 0.15, 0.13, 0.08 };
                case (externalThread, inch, 11):
                    return new double[] { 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.13, 0.08 };
                case (externalThread, inch, 10):
                    return new double[] { 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 9):
                    return new double[] { 0.21, 0.20, 0.19, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 8):
                    return new double[] { 0.22, 0.21, 0.20, 0.20, 0.19, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (externalThread, inch, 7):
                    return new double[] { 0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.15, 0.13, 0.08 };
                case (externalThread, inch, 6):
                    return new double[] { 0.24, 0.23, 0.23, 0.22, 0.21, 0.21, 0.20, 0.19, 0.18, 0.18, 0.17, 0.15, 0.14, 0.10 };
                case (externalThread, inch, 5):
                    return new double[] { 0.29, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.19, 0.18, 0.15, 0.10 };
                case (externalThread, inch, 4.5):
                    return new double[] { 0.28, 0.28, 0.27, 0.26, 0.26, 0.25, 0.24, 0.23, 0.22, 0.22, 0.21, 0.19, 0.18, 0.17, 0.15, 0.10 };
                case (externalThread, inch, 4):
                    return new double[] { 0.32, 0.32, 0.31, 0.30, 0.29, 0.28, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.20, 0.18, 0.16, 0.10 };
                // внутренняя дюймовая
                case (internalThread, inch, 32):
                    return new double[] { 0.16, 0.14, 0.13, 0.08 };
                case (internalThread, inch, 28):
                    return new double[] { 0.14, 0.13, 0.12, 0.11, 0.08 };
                case (internalThread, inch, 24):
                    return new double[] { 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (internalThread, inch, 20):
                    return new double[] { 0.16, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (internalThread, inch, 18):
                    return new double[] { 0.18, 0.17, 0.16, 0.14, 0.13, 0.08 };
                case (internalThread, inch, 16):
                    return new double[] { 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (internalThread, inch, 14):
                    return new double[] { 0.16, 0.16, 0.15, 0.14, 0.14, 0.13, 0.11, 0.08 };
                case (internalThread, inch, 13):
                    return new double[] { 0.18, 0.17, 0.16, 0.16, 0.15, 0.13, 0.12, 0.08 };
                case (internalThread, inch, 12):
                    return new double[] { 0.20, 0.19, 0.18, 0.17, 0.16, 0.14, 0.13, 0.08 };
                case (internalThread, inch, 11):
                    return new double[] { 0.19, 0.18, 0.18, 0.17, 0.16, 0.15, 0.14, 0.12, 0.08 };
                case (internalThread, inch, 10):
                    return new double[] { 0.19, 0.18, 0.17, 0.17, 0.16, 0.15, 0.14, 0.13, 0.12, 0.08 };
                case (internalThread, inch, 9):
                    return new double[] { 0.19, 0.18, 0.18, 0.17, 0.16, 0.16, 0.15, 0.14, 0.13, 0.11, 0.08 };
                case (internalThread, inch, 8):
                    return new double[] { 0.19, 0.19, 0.18, 0.18, 0.17, 0.16, 0.16, 0.15, 0.14, 0.13, 0.11, 0.08 };
                case (internalThread, inch, 7):
                    return new double[] { 0.23, 0.22, 0.21, 0.21, 0.20, 0.19, 0.18, 0.17, 0.16, 0.14, 0.12, 0.08 };
                case (internalThread, inch, 6):
                    return new double[] { 0.21, 0.21, 0.20, 0.20, 0.19, 0.19, 0.18, 0.18, 0.17, 0.16, 0.15, 0.14, 0.13, 0.10 };
                case (internalThread, inch, 5):
                    return new double[] { 0.27, 0.26, 0.25, 0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.17, 0.15, 0.10 };
                case (internalThread, inch, 4.5):
                    return new double[] { 0.28, 0.27, 0.27, 0.26, 0.25, 0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.18, 0.16, 0.15, 0.10 };
                case (internalThread, inch, 4):
                    return new double[] { 0.30, 0.29, 0.28, 0.27, 0.27, 0.26, 0.25, 0.24, 0.23, 0.22, 0.21, 0.20, 0.19, 0.17, 0.15, 0.10 };

                default:
                    return new double[] { };
            }
        }
    }

    public int SpindleSpeed { get => (ThreadDiameter != null ? (int)(120000 / (Math.PI * ThreadDiameter)) : 0); }

    public double ThreadAngle { get
        {
            if (ThreadDiameter != null)
            {
                double result = Math.Atan((ThreadStandart == metric ? ThreadPitch : (25.4/ThreadPitch)) / ((ThreadDiameter ?? 0) * Math.PI));
                result = result / Math.PI * 180;
                return result;
            }
            else
            {
                return 0;
            }
        } }

    public string ApproachDiameter { get
        {
            if(ValidThreading() && (ThreadType == externalThread))
            {
                return ((ThreadDiameter ?? 0) + 2).ToString("N1").Replace(",",".").Replace(".0",".");
            }
            else if (ValidThreading() && (ThreadType == internalThread))
            {
                return ((ThreadDiameter ?? 0) - (ThreadStandart == metric ? ThreadPitch : 25.4/ThreadPitch) - 1).ToString("N1").Replace(",", ".").Replace(".0", ".");
            }
            else
            {
                return string.Empty;
            }
        } }
    public string ThreadProfile { get => ThreadStandart == metric ? "60" : "55"; }
    public string EndDiameter { get => ThreadType == externalThread ? ((ThreadDiameter ?? 0) - (2 * Passes.Sum())).ToString("N3").Replace(",", ".").Trim('0') : (ThreadDiameter ?? 0).ToString("N3").Replace(",",".").Trim('0') ; }

    private void OnStandartChanged(string value)
    {
        if (ThreadStandart != value)
        {
            ThreadStandart = value;
            ThreadPitch = 0;
        }
    }

    private bool ValidThreading()
    {
        if (ThreadDiameter != null && ThreadDiameter != 0 && ThreadPitch != 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

}