@page "/nc"
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .monofield {
        font-family: Consolas;
        font-size: 10px;
    }
</style>
<style>
    .monoitem {
        font-family: Consolas;
        font-size: 10px;
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid>
        <MudItem xs="9">
            <MudSelect @bind-Value="Machine" Label="Станок" T="Machines" Variant="Variant.Outlined">
                <MudSelectItem Value="@(Machines.GS1500)">Goodway GS-1500</MudSelectItem>
                <MudSelectItem Value="@(Machines.L230A)">Hyundai L230A</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="3">
            <MudButton Size="Size.Large" Style="height: 56px; margin-top: 5px;" FullWidth="true" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OpenSequencelDialog" Disabled="@(!ValidWorkpiece)">Создать переход</MudButton>
        </MudItem>
        <MudField Label="Заготовка" Variant="Variant.Outlined" Style="margin: 12px">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_WorkpieceExternalDiameter" Label="Наружный диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="_WorkpieceInternalDiameter" Label="Внутренний диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_WorkpieceLength" Label="Длина заготовки" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                    <MudSelect @bind-Value="WorkpieceMaterial" Label="Материал" T="Materials" Variant="Variant.Text">
                        <MudSelectItem Value="@Materials.Steel">Черная сталь</MudSelectItem>
                        <MudSelectItem Value="@Materials.Stainless">Нержавеющая сталь</MudSelectItem>
                        <MudSelectItem Value="@Materials.Brass">Бронза</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudField>
        <MudField Label="Деталь" Variant="Variant.Outlined" Style="margin: 12px">
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="DetailNumber" Label="Обозначение" Adornment="Adornment.End" Variant="Variant.Text" Immediate="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="DetailName" Label="Наименование" Adornment="Adornment.End" Variant="Variant.Text" Immediate="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="DrawningVersion" Label="Наименование" Adornment="Adornment.End" Variant="Variant.Text" Immediate="true" Converter="Util.DoubleConverter"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudField>
        <MudItem xs="12" sm="12" md="12">
            <MudTextField T="string" DisableUnderLine="true" Label="Программа" Class="monofield" Variant="Variant.Text" @bind-Text="@ProgramText" ReadOnly="true" Immediate="true" Lines="@(ProgramText.Count(x => x == '\n') + 2)" />
        </MudItem>
    </MudGrid>
</MudContainer>



@code
{
    const string TOOL_TABLE = @"<TOOL TABLE>";

    protected override async Task OnInitializedAsync()
    {
        Tools = await localStorage.GetItemAsync<List<Tool>>(nameof(Tools));
        await localStorage.SetItemAsync(nameof(Tools), Tools);

        if (Tools.Count == 0)
        {
            Tools.Add(new SpecialTool(0101, "UPOR"));
            Tools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Bar, 80, 0.8));
            Tools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Face, 100, 0.8));
            Tools.Add(new TurningExternalTool(0303, TurningExternalTool.Types.Bar, 35, 0.4));
            Tools.Add(new DrillingTool(0505, DrillingTool.Types.HSS, 5, 120));
            Tools.Add(new DrillingTool(0707, DrillingTool.Types.Solid, 10, 140));
            Tools.Add(new DrillingTool(0606, DrillingTool.Types.Insert, 25, 180));
            Tools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Grooving, 3, GroovingExternalTool.Point.Left));
            Tools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Right));
            Tools.Add(new ThreadingExternalTool(1111, 1.5, 1));
            Tools.Add(new TappingTool(0909, TappingTool.Types.Cutting, 12, 1.75));
            Tools.Add(new TappingTool(0808, TappingTool.Types.Forming, 10, 1.5));

            Program.Add(Header);
            Program.Add(SafetyString);
        }
    }

    private void OpenToolDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Tools), Tools);
        var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        DialogService.Show<ToolDialog>("Инструмент", parameters, options);
    }

    private void OpenSequencelDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Machine), Machine);
        parameters.Add(nameof(Tools), Tools);
        parameters.Add(nameof(Program), Program);
        parameters.Add(nameof(WorkpieceExternalDiameter), WorkpieceExternalDiameter);
        parameters.Add(nameof(WorkpieceInternalDiameter), WorkpieceInternalDiameter);
        parameters.Add(nameof(WorkpieceLength), WorkpieceLength);
        parameters.Add(nameof(WorkpieceMaterial), WorkpieceMaterial);
        var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        DialogService.Show<SequenceDialog>("Переходы", parameters, options);
    }

    public List<Tool> Tools { get; set; } = new();

    public Materials WorkpieceMaterial { get; set; }
    public Machines Machine { get; set; }

    public string _WorkpieceExternalDiameter { get; set; } = "50";
    public double WorkpieceExternalDiameter { get => Util.GetDouble(_WorkpieceExternalDiameter); }

    public string _WorkpieceInternalDiameter { get; set; } = string.Empty;
    public double WorkpieceInternalDiameter { get => Util.GetDouble(_WorkpieceInternalDiameter); }

    public string DetailNumber { get; set; }
    public string NcDetailNumber { get => DetailNumber.Translate(); }

    public string DetailName { get; set; }
    public string NcDetailName { get => $"{DetailName.Translate()}.{DrawningVersion.ToString("F1").Replace(",", ".")}"; }

    public double DrawningVersion { get; set; }

    public string _WorkpieceLength { get; set; } = "50";
    public double WorkpieceLength { get => Util.GetDouble(_WorkpieceLength); }

    public Sequence Header { get => new Sequence { Name = "Шапка", Operation = Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion) }; }
    public Sequence SafetyString { get => new Sequence { Name = "Строка безопасности", Operation = Operation.SafetyString(Machine, 3000) }; }

    public bool ValidWorkpiece
    {
        get
        {
            if (WorkpieceExternalDiameter > 0 && WorkpieceInternalDiameter < WorkpieceExternalDiameter && WorkpieceLength > 0)
            {
                if (Program.Contains(Header))
                {
                    Program[Program.IndexOf(Header)] = Header;
                }

                if (Program.Contains(SafetyString))
                {
                    Program[Program.IndexOf(SafetyString)] = SafetyString;
                }

                return true;
            }
            return false;
        }
    }

    public List<Sequence> Program { get; set; } = new();

    public string ToolTable { get => Util.GetToolTable(ProgramText); }

    public string ProgramText
    {
        get
        {
            List<string> result = new();
            foreach (var sequence in Program)
            {
                result.Add(sequence.Operation);
            }
            return string.Join("\n", result);

        }
        set { }
    }
}
