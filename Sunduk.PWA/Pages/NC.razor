@page "/nc"
@inject IDialogService DialogService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .monofield {
        font-family: Consolas;
        font-size: 10px;
    }
</style>
<style>
    .monoitem {
        font-family: Consolas;
        font-size: 10px;
    }
</style>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-3">
    <MudGrid>
        <MudItem xs="9">
            <MudSelect @bind-Value="Machine" Label="Станок" T="Machines" Variant="Variant.Outlined">
                <MudSelectItem Value="@(Machines.GS1500)">Goodway GS-1500</MudSelectItem>
                <MudSelectItem Value="@(Machines.L230A)">Hyundai L230A</MudSelectItem>
            </MudSelect>
        </MudItem>
        <MudItem xs="3">
            <MudButton Size="Size.Large" Style="height: 56px; margin-top: 5px;" FullWidth="true" Variant="Variant.Outlined" Color="Color.Primary" OnClick="OpenSequencelDialog" Disabled="@(!ValidWorkpiece)">Создать переход</MudButton>
        </MudItem>
        <MudField Label="Заготовка" Variant="Variant.Outlined" Style="margin: 12px">
            <MudGrid>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_WorkpieceExternalDiameter" Label="Наружный диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="_WorkpieceInternalDiameter" Label="Внутренний диаметр" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField @bind-Value="_WorkpieceLength" Label="Длина заготовки" Adornment="Adornment.End" AdornmentText="мм" Variant="Variant.Text" Immediate="true"></MudTextField>
                    <MudSelect @bind-Value="WorkpieceMaterial" Label="Материал" T="Materials" Variant="Variant.Text">
                        <MudSelectItem Value="@Materials.Steel">Черная сталь</MudSelectItem>
                        <MudSelectItem Value="@Materials.Stainless">Нержавеющая сталь</MudSelectItem>
                        <MudSelectItem Value="@Materials.Brass">Бронза</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>
        </MudField>
        <MudField Label="Деталь" Variant="Variant.Outlined" Style="margin: 12px">
            <MudGrid>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="DetailNumber" Label="Обозначение" Adornment="Adornment.End" Variant="Variant.Text" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="@TESTLIST[0]" Label="Обозначение" Adornment="Adornment.End" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="DetailName" Label="Наименование" Adornment="Adornment.End" Variant="Variant.Text" Immediate="true"></MudTextField>
                    <MudTextField @bind-Value="DetailName" Label="Наименование" Adornment="Adornment.End" Variant="Variant.Text" ReadOnly="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4">
                    <MudTextField @bind-Value="DrawningVersion" Label="Наименование" Adornment="Adornment.End" Variant="Variant.Text" Immediate="true" Converter="Util.DoubleConverter"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudField>
        <MudItem xs="12" sm="12" md="12">
            @*<MudTextField T="string" DisableUnderLine="true" Label="Программа" Class="monofield" Variant="Variant.Text" @bind-Text="@ProgramText" ReadOnly="true" Immediate="true" Lines="@(ProgramText.Count(x => x == '\n') + 2)" />*@
            <MudTextField T="string" DisableUnderLine="true" Label="Программа" Class="monofield" Variant="Variant.Text" @bind-Value="@ProgramText" ReadOnly="true" Immediate="true" Lines="@(ProgramText.Count(x => x == '\n') + 2)" />
        </MudItem>
    </MudGrid>
</MudContainer>



@code
{
    public ObservableCollection<string> TESTLIST { get; set; } = new();
    public string TEST { get => $"{Util.Translate(DetailNumber)}"; set => TEST = value; }

    const string TOOL_TABLE = @"<TOOL TABLE>";

    protected override async Task OnInitializedAsync()
    {
        TESTLIST.Add(TEST);
        #region Инициализация спец инструмента
        SpecialTools = await localStorage.GetItemAsync<List<SpecialTool>>(nameof(SpecialTools));
        if (SpecialTools is null || SpecialTools.Count == 0)
        {
            SpecialTools = new();
            SpecialTools.Add(new SpecialTool(0101, "UPOR"));
            await localStorage.SetItemAsync(nameof(SpecialTools), SpecialTools);
        }
        Tools.AddRange(SpecialTools);
        #endregion

        #region Инициализация токарного инструмента
        TurningExternalTools = await localStorage.GetItemAsync<List<TurningExternalTool>>(nameof(TurningExternalTools));
        if (TurningExternalTools is null || TurningExternalTools.Count == 0)
        {
            TurningExternalTools = new();
            TurningExternalTools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Bar, 55, 0.8));
            TurningExternalTools.Add(new TurningExternalTool(0202, TurningExternalTool.Types.Face, 100, 0.8));
            TurningExternalTools.Add(new TurningExternalTool(0303, TurningExternalTool.Types.Bar, 35, 0.4));
            await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        }
        Tools.AddRange(TurningExternalTools);

        TurningInternalTools = await localStorage.GetItemAsync<List<TurningInternalTool>>(nameof(TurningInternalTools));
        if (TurningInternalTools is null || TurningInternalTools.Count == 0)
        {
            TurningInternalTools = new();
            TurningInternalTools.Add(new TurningInternalTool(0202, 25, 55, 0.8));
            TurningInternalTools.Add(new TurningInternalTool(0202, 32, 80, 0.8));
            TurningInternalTools.Add(new TurningInternalTool(0303, 10, 55, 0.4));
            await localStorage.SetItemAsync(nameof(TurningExternalTools), TurningExternalTools);
        }
        Tools.AddRange(TurningInternalTools);
        #endregion

        #region Инициализация канавочного и отрезного инструмента

        GroovingExternalTools = await localStorage.GetItemAsync<List<GroovingExternalTool>>(nameof(GroovingExternalTools));
        if (GroovingExternalTools is null || GroovingExternalTools.Count == 0)
        {
            GroovingExternalTools = new();
            GroovingExternalTools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Grooving, 3, GroovingExternalTool.Point.Left));
            GroovingExternalTools.Add(new GroovingExternalTool(1212, GroovingExternalTool.Types.Cutting, 3, GroovingExternalTool.Point.Right));
            await localStorage.SetItemAsync(nameof(GroovingExternalTools), GroovingExternalTools);
        }
        Tools.AddRange(GroovingExternalTools);

        GroovingInternalTools = await localStorage.GetItemAsync<List<GroovingInternalTool>>(nameof(GroovingInternalTools));
        if (GroovingInternalTools is null || GroovingInternalTools.Count == 0)
        {
            GroovingInternalTools = new();
            GroovingInternalTools.Add(new GroovingInternalTool(1212, 20, 3, GroovingInternalTool.Point.Right));
            GroovingInternalTools.Add(new GroovingInternalTool(1212, 40, 4, GroovingInternalTool.Point.Right));
            await localStorage.SetItemAsync(nameof(GroovingInternalTools), GroovingInternalTools);
        }
        Tools.AddRange(GroovingInternalTools);
        #endregion

        #region Инициализация резьбового инструмента
        ThreadingExternalTools = await localStorage.GetItemAsync<List<ThreadingExternalTool>>(nameof(ThreadingExternalTools));
        if (ThreadingExternalTools is null || TurningExternalTools.Count == 0)
        {
            ThreadingExternalTools = new();
            ThreadingExternalTools.Add(new ThreadingExternalTool(1111, 1.5, 1));
            await localStorage.SetItemAsync(nameof(ThreadingExternalTools), ThreadingExternalTools);
        }
        Tools.AddRange(ThreadingExternalTools);

        ThreadingInternalTools = await localStorage.GetItemAsync<List<ThreadingInternalTool>>(nameof(ThreadingInternalTools));
        if (ThreadingInternalTools is null || ThreadingInternalTools.Count == 0)
        {
            ThreadingInternalTools = new();
            ThreadingInternalTools.Add(new ThreadingInternalTool(1111, 16, 1.5, 1));
            await localStorage.SetItemAsync(nameof(ThreadingInternalTools), ThreadingInternalTools);
        }
        Tools.AddRange(ThreadingInternalTools);
        #endregion

        #region Инициализация сверел
        DrillingTools = await localStorage.GetItemAsync<List<DrillingTool>>(nameof(DrillingTools));
        if (DrillingTools is null || DrillingTools.Count == 0)
        {
            DrillingTools = new();
            DrillingTools.Add(new DrillingTool(0505, DrillingTool.Types.HSS, 5, 120));
            DrillingTools.Add(new DrillingTool(0707, DrillingTool.Types.Solid, 10, 140));
            DrillingTools.Add(new DrillingTool(0606, DrillingTool.Types.Insert, 25, 180));
            await localStorage.SetItemAsync(nameof(DrillingTools), DrillingTools);
        }
        Tools.AddRange(DrillingTools);
        #endregion

        #region Инициализация метчиков
        TappingTools = await localStorage.GetItemAsync<List<TappingTool>>(nameof(TappingTools));
        if (TappingTools is null || TappingTools.Count == 0)
        {
            TappingTools = new();
            TappingTools.Add(new TappingTool(0909, TappingTool.Types.Cutting, 12, 1.75));
            TappingTools.Add(new TappingTool(0808, TappingTool.Types.Forming, 10, 1.5));
            await localStorage.SetItemAsync(nameof(TappingTools), TappingTools);
        }
        Tools.AddRange(TappingTools);
        #endregion

        Program.Add(Header);
        Program.Add(SafetyString);
    }

    private void OpenToolDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Tools), Tools);
        var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        DialogService.Show<ToolDialog>("Инструмент", parameters, options);
    }

    private void OpenSequencelDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add(nameof(Machine), Machine);
        parameters.Add(nameof(Tools), Tools);
        parameters.Add(nameof(Program), Program);
        parameters.Add(nameof(WorkpieceExternalDiameter), WorkpieceExternalDiameter);
        parameters.Add(nameof(WorkpieceInternalDiameter), WorkpieceInternalDiameter);
        parameters.Add(nameof(WorkpieceLength), WorkpieceLength);
        parameters.Add(nameof(WorkpieceMaterial), WorkpieceMaterial);
        var options = new DialogOptions() { FullScreen = true, CloseButton = true };
        DialogService.Show<SequenceDialog>("Переходы", parameters, options);
    }

    public List<Tool> Tools { get; set; } = new();

    public List<TurningExternalTool> TurningExternalTools { get; set; }
    public List<TurningInternalTool> TurningInternalTools { get; set; }
    public List<GroovingExternalTool> GroovingExternalTools { get; set; }
    public List<GroovingInternalTool> GroovingInternalTools { get; set; }
    public List<ThreadingExternalTool> ThreadingExternalTools { get; set; }
    public List<ThreadingInternalTool> ThreadingInternalTools { get; set; }
    public List<DrillingTool> DrillingTools { get; set; }
    public List<TappingTool> TappingTools { get; set; }
    public List<SpecialTool> SpecialTools { get; set; }

    public Materials WorkpieceMaterial { get; set; }
    public Machines Machine { get; set; }

    public string _WorkpieceExternalDiameter { get; set; } = "50";
    public double WorkpieceExternalDiameter { get => Util.GetDouble(_WorkpieceExternalDiameter); }

    public string _WorkpieceInternalDiameter { get; set; } = string.Empty;
    public double WorkpieceInternalDiameter { get => Util.GetDouble(_WorkpieceInternalDiameter); }

    public string DetailNumber { get; set; }
    public string NcDetailNumber { get => DetailNumber.Translate(); }

    public string DetailName { get; set; }
    public string NcDetailName { get => $"{DetailName.Translate()}.{DrawningVersion.ToString("F1").Replace(",", ".")}"; }

    public double DrawningVersion { get; set; }

    public string _WorkpieceLength { get; set; } = "50";
    public double WorkpieceLength { get => Util.GetDouble(_WorkpieceLength); }

    //public Sequence Header { get => new Sequence { Name = "Шапка", Operation = Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion) }; }
    public string Header => Operation.Header(Machine, NcDetailNumber, NcDetailName, DrawningVersion);
    //public Sequence SafetyString { get => new Sequence { Name = "Строка безопасности", Operation = Operation.SafetyString(Machine, 3000) }; }
    public string SafetyString => Operation.SafetyString(Machine, 3000);

    public bool ValidWorkpiece
    {
        get
        {
            if (WorkpieceExternalDiameter > 0 && WorkpieceInternalDiameter < WorkpieceExternalDiameter && WorkpieceLength > 0)
            {
                if (Program.Contains(Header))
                {
                    Program[Program.IndexOf(Header)] = Header;
                }

                if (Program.Contains(SafetyString))
                {
                    Program[Program.IndexOf(SafetyString)] = SafetyString;
                }

                return true;
            }
            return false;
        }
    }

    //public ObservableCollection<Sequence> Program { get; set; } = new();
    public List<string> Program { get; set; } = new();

    public string ToolTable { get => Util.GetToolTable(ProgramText); }

    public string ProgramText { get => string.Join('\n', Program); set { } }
    //public string ProgramText
    //{
    //    get
    //    {
    //        List<string> result = new();
    //        foreach (var sequence in Program)
    //        {
    //            result.Add(sequence.Operation);
    //        }
    //        return string.Join("\n", result);

    //    }
    //    set { }
    //}
}
